# //  Questa Sim-64
# //  Version 10.7c linux_x86_64 Aug 17 2018
# //
# //  Copyright 1991-2018 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  QuestaSim and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
do run_sim.do
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:26 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/common/fpnormalize_fpnormalize.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Loading package STD_LOGIC_UNSIGNED
# -- Compiling entity FPnormalize
# -- Compiling architecture FPnormalize of FPnormalize
# End time: 14:33:26 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:26 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/common/packfp_packfp.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity PackFP
# -- Compiling architecture PackFP of PackFP
# End time: 14:33:27 on Apr 14,2021, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:27 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/common/fpround_fpround.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Loading package STD_LOGIC_UNSIGNED
# -- Compiling entity FPround
# -- Compiling architecture FPround of FPround
# End time: 14:33:27 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:27 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/common/unpackfp_unpackfp.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity UnpackFP
# -- Compiling architecture UnpackFP of UnpackFP
# End time: 14:33:28 on Apr 14,2021, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:28 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/multiplier/fpmul_stage1_struct.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity FPmul_stage1
# -- Compiling architecture struct of FPmul_stage1
# -- Loading entity UnpackFP
# End time: 14:33:28 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:28 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/multiplier/fpmul_stage2_struct_mbe.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity FPmul_stage2
# -- Compiling architecture struct of FPmul_stage2
# End time: 14:33:29 on Apr 14,2021, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:29 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/multiplier/fpmul_stage3_struct.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity FPmul_stage3
# -- Compiling architecture struct of FPmul_stage3
# -- Loading package STD_LOGIC_UNSIGNED
# -- Loading entity FPnormalize
# -- Loading entity FPround
# End time: 14:33:29 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:29 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/multiplier/fpmul_stage4_struct.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity FPmul_stage4
# -- Compiling architecture struct of FPmul_stage4
# -- Loading package STD_LOGIC_UNSIGNED
# -- Loading entity FPnormalize
# -- Loading entity PackFP
# End time: 14:33:30 on Apr 14,2021, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:30 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/multiplier/fpmul_pipeline.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity FPmul
# -- Compiling architecture pipeline of FPmul
# -- Loading entity FPmul_stage1
# -- Loading entity FPmul_stage2
# -- Loading entity FPmul_stage3
# -- Loading entity FPmul_stage4
# End time: 14:33:30 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:31 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/HA.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity HA
# -- Compiling architecture struct of HA
# End time: 14:33:31 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:31 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/FA.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity FA
# -- Compiling architecture struct of FA
# End time: 14:33:31 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:31 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/MBE.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity MBE_n
# -- Compiling architecture behavioural of MBE_n
# End time: 14:33:32 on Apr 14,2021, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:32 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/MBE_mult.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity MBE_mult
# -- Compiling architecture behavioural of MBE_mult
# End time: 14:33:33 on Apr 14,2021, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# QuestaSim-64 vlog 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:33:33 on Apr 14,2021
# vlog -reportprogress 300 -sv ../tb/top.sv 
# ** Note: (vlog-2286) ../tb/top.sv(2): Using implicit +incdir+/software/mentor/questa10.7c/questasim/uvm-1.1d/../verilog_src/uvm-1.1d/src from import uvm_pkg
# -- Compiling package top_sv_unit
# -- Importing package mtiUvm.uvm_pkg (uvm-1.1d Built-in)
# ** Warning: ../tb/monitor.sv(49): (vlog-2240) Treating stand-alone use of function 'begin_tr' as an implicit VOID cast.
# ** Warning: ../tb/monitor_out.sv(48): (vlog-2240) Treating stand-alone use of function 'begin_tr' as an implicit VOID cast.
# -- Compiling interface dut_if
# -- Compiling module DUT
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 14:33:37 on Apr 14,2021, Elapsed time: 0:00:04
# Errors: 0, Warnings: 2
# vsim top 
# Start time: 14:33:37 on Apr 14,2021
# ** Note: (vsim-3812) Design is being optimized...
# ** Warning: ../tb/monitor.sv(49): (vopt-2240) Treating stand-alone use of function 'begin_tr' as an implicit VOID cast.
# ** Warning: ../tb/monitor_out.sv(48): (vopt-2240) Treating stand-alone use of function 'begin_tr' as an implicit VOID cast.
# Loading sv_std.std
# Loading mtiUvm.uvm_pkg
# Loading work.top_sv_unit(fast)
# Loading work.top(fast)
# Loading work.DUT(fast)
# Loading mtiUvm.questa_uvm_pkg(fast)
# Loading work.dut_if(fast)
# Loading std.standard
# Loading std.textio(body)
# Loading ieee.std_logic_1164(body)
# Loading ieee.std_logic_arith(body)
# Loading work.fpmul(pipeline)#1
# Loading work.fpmul_stage1(struct)#1
# Loading work.unpackfp(unpackfp)#1
# Loading work.fpmul_stage2(struct)#1
# Loading ieee.numeric_std(body)
# Loading work.mbe_mult(behavioural)#1
# Loading work.mbe_n(behavioural)#1
# Loading ieee.std_logic_unsigned(body)
# Loading work.fpmul_stage3(struct)#1
# Loading work.fpnormalize(fpnormalize)#1
# Loading work.fpround(fpround)#1
# Loading work.fpmul_stage4(struct)#1
# Loading work.packfp(packfp)#1
# ** Warning: (vsim-3839) Variable '/top/out/data', driven via a port connection, is multiply driven. See ../src/DUT.sv(3).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum File: ../src/DUT.sv Line: 12
# ** Warning: (vsim-3764) Stand-alone call to function 'begin_tr' treated as implicit void cast.
#    Time: 0 ns  Iteration: 0  Region: /top_sv_unit::driver File: ../tb/driver.sv Line: 67
# Loading /software/mentor/questa10.7c/questasim/uvm-1.1d/linux_x86_64/uvm_dpi.so
# ----------------------------------------------------------------
# UVM-1.1d
# (C) 2007-2013 Mentor Graphics Corporation
# (C) 2007-2013 Cadence Design Systems, Inc.
# (C) 2006-2013 Synopsys, Inc.
# (C) 2011-2013 Cypress Semiconductor Corp.
# ----------------------------------------------------------------
# 
#   ***********       IMPORTANT RELEASE NOTES         ************
# 
#   You are using a version of the UVM library that has been compiled
#   with `UVM_NO_DEPRECATED undefined.
#   See http://www.eda.org/svdb/view.php?id=3313 for more details.
# 
#   You are using a version of the UVM library that has been compiled
#   with `UVM_OBJECT_MUST_HAVE_CONSTRUCTOR undefined.
#   See http://www.eda.org/svdb/view.php?id=3770 for more details.
# 
#       (Specify +UVM_NO_RELNOTES to turn off this notice)
# 
# UVM_INFO verilog_src/questa_uvm_pkg-1.2/src/questa_uvm_pkg.sv(215) @ 0: reporter [Questa UVM] QUESTA_UVM-1.2.3
# UVM_INFO verilog_src/questa_uvm_pkg-1.2/src/questa_uvm_pkg.sv(216) @ 0: reporter [Questa UVM]  questa_uvm::init(+struct)
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I3/I11
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I3/I11
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I2
# UVM_INFO @ 0: reporter [RNTST] Running test simple_test...
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 1  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 1  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 1  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 1  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 5 ns  Iteration: 3  Instance: /top/sum/fpmul_under_test/I3/I11
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 5 ns  Iteration: 3  Instance: /top/sum/fpmul_under_test/I3/I11
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 15 ns  Iteration: 2  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 15 ns  Iteration: 2  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 15 ns  Iteration: 2  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 15 ns  Iteration: 2  Instance: /top/sum/fpmul_under_test/I2
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101011100100100110001111011001, input B: 00001010011100000010010111111101; output Z: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# REFMOD compute
# refmod: input A = 0, input B = 0, output OUT = 0
# refmod: input A = 00000000000000000000000000000000, input B = 00000000000000000000000000000000, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00101011100100100110001111011001, input B: 00001010011100000010010111111101; output Z: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# FPU_mult: SEND
# -- input A: 00101011100100100110001111011001, input B: 00001010011100000010010111111101; output Z: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# 
# dadda_mult: input A = 0, input B = 0, output OUT = 0
# dadda_mult: input A = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, input B = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, output OUT = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000100110010100111111010001011, input B: 10100001000100100111100111110100; output Z: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# FPU_mult: WAIT
# -- input A: 00000100110010100111111010001011, input B: 10100001000100100111100111110100; output Z: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# FPU_mult: SEND
# -- input A: 00000100110010100111111010001011, input B: 10100001000100100111100111110100; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = 1.04016e-12, input B = 1.15627e-32, output OUT = 0
# dadda_mult: input A = 00101011100100100110001111011001, input B = 00001010011100000010010111111101, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001111100011001011000101110100, input B: 11100011010001010000100100011010; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00001111100011001011000101110100, input B: 11100011010001010000100100011010; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00001111100011001011000101110100, input B: 11100011010001010000100100011010; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 4.76062e-36, input B = -4.96281e-19, output OUT = -0
# dadda_mult: input A = 00000100110010100111111010001011, input B = 10100001000100100111100111110100, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11111110001100001111011010001100, input B: 11110100010111100000111001101111; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11111110001100001111011010001100, input B: 11110100010111100000111001101111; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11111110001100001111011010001100, input B: 11110100010111100000111001101111; output Z: 10110011010110001001001100011110
# 
# dadda_mult: input A = 1.38734e-29, input B = -3.63466e+21, output OUT = -5.04252e-08
# dadda_mult: input A = 00001111100011001011000101110100, input B = 11100011010001010000100100011010, output OUT = 10110011010110001001001100011110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011111110111100000100101001111, input B: 11011101011110011000010111101101; output Z: 10110011010110001001001100011110
# FPU_mult: WAIT
# -- input A: 10011111110111100000100101001111, input B: 11011101011110011000010111101101; output Z: 10110011010110001001001100011110
# FPU_mult: SEND
# -- input A: 10011111110111100000100101001111, input B: 11011101011110011000010111101101; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -5.88061e+37, input B = -7.03725e+31, output OUT = inf
# dadda_mult: input A = 11111110001100001111011010001100, input B = 11110100010111100000111001101111, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001000010111101000011100010110, input B: 01000010010000011100101111110100; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 00001000010111101000011100010110, input B: 01000010010000011100101111110100; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 00001000010111101000011100010110, input B: 01000010010000011100101111110100; output Z: 00111101110110000110101100110110
# 
# dadda_mult: input A = -9.40361e-20, input B = -1.12375e+18, output OUT = 0.105673
# dadda_mult: input A = 10011111110111100000100101001111, input B = 11011101011110011000010111101101, output OUT = 00111101110110000110101100110110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100000001011111110001101011011, input B: 11101011010001101100101111001101; output Z: 00111101110110000110101100110110
# FPU_mult: WAIT
# -- input A: 11100000001011111110001101011011, input B: 11101011010001101100101111001101; output Z: 00111101110110000110101100110110
# FPU_mult: SEND
# -- input A: 11100000001011111110001101011011, input B: 11101011010001101100101111001101; output Z: 00001011001010000111010100100001
# 
# dadda_mult: input A = 6.69645e-34, input B = 48.4492, output OUT = 3.24437e-32
# dadda_mult: input A = 00001000010111101000011100010110, input B = 01000010010000011100101111110100, output OUT = 00001011001010000111010100100001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10010110111000011011110110000001, input B: 11001000111100010001110000110000; output Z: 00001011001010000111010100100001
# FPU_mult: WAIT
# -- input A: 10010110111000011011110110000001, input B: 11001000111100010001110000110000; output Z: 00001011001010000111010100100001
# FPU_mult: SEND
# -- input A: 10010110111000011011110110000001, input B: 11001000111100010001110000110000; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -5.06963e+19, input B = -2.4033e+26, output OUT = inf
# dadda_mult: input A = 11100000001011111110001101011011, input B = 11101011010001101100101111001101, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100110110101000110101101011100, input B: 11001110011001010101000000111101; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11100110110101000110101101011100, input B: 11001110011001010101000000111101; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11100110110101000110101101011100, input B: 11001110011001010101000000111101; output Z: 00100000010101001001110001000001
# 
# dadda_mult: input A = -3.64703e-25, input B = -493794, output OUT = 1.80088e-19
# dadda_mult: input A = 10010110111000011011110110000001, input B = 11001000111100010001110000110000, output OUT = 00100000010101001001110001000001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10001101011101001001111010100100, input B: 10101111001000100101100101001001; output Z: 00100000010101001001110001000001
# FPU_mult: WAIT
# -- input A: 10001101011101001001111010100100, input B: 10101111001000100101100101001001; output Z: 00100000010101001001110001000001
# FPU_mult: SEND
# -- input A: 10001101011101001001111010100100, input B: 10101111001000100101100101001001; output Z: 01110101101111100100011010011101
# 
# dadda_mult: input A = -5.01561e+23, input B = -9.6181e+08, output OUT = 4.82407e+32
# dadda_mult: input A = 11100110110101000110101101011100, input B = 11001110011001010101000000111101, output OUT = 01110101101111100100011010011101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011011111001011010001011111001, input B: 01010101001010000000111011110010; output Z: 01110101101111100100011010011101
# FPU_mult: WAIT
# -- input A: 01011011111001011010001011111001, input B: 01010101001010000000111011110010; output Z: 01110101101111100100011010011101
# FPU_mult: SEND
# -- input A: 01011011111001011010001011111001, input B: 01010101001010000000111011110010; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = -7.53793e-31, input B = -1.47655e-10, output OUT = 0
# dadda_mult: input A = 10001101011101001001111010100100, input B = 10101111001000100101100101001001, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001010010010110111101101101101, input B: 11011101100010101011111110001000; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11001010010010110111101101101101, input B: 11011101100010101011111110001000; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11001010010010110111101101101101, input B: 11011101100010101011111110001000; output Z: 01110001100101101100000001011011
# 
# dadda_mult: input A = 1.29274e+17, input B = 1.15489e+13, output OUT = 1.49297e+30
# dadda_mult: input A = 01011011111001011010001011111001, input B = 01010101001010000000111011110010, output OUT = 01110001100101101100000001011011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100110000110100011100001100011, input B: 00100011110101111111111011100011; output Z: 01110001100101101100000001011011
# FPU_mult: WAIT
# -- input A: 01100110000110100011100001100011, input B: 00100011110101111111111011100011; output Z: 01110001100101101100000001011011
# FPU_mult: SEND
# -- input A: 01100110000110100011100001100011, input B: 00100011110101111111111011100011; output Z: 01101000010111001001000110001100
# 
# dadda_mult: input A = -3.33385e+06, input B = -1.24973e+18, output OUT = 4.16642e+24
# dadda_mult: input A = 11001010010010110111101101101101, input B = 11011101100010101011111110001000, output OUT = 01101000010111001001000110001100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010011011011111101111111100011, input B: 00010100111010010111000001010011; output Z: 01101000010111001001000110001100
# FPU_mult: WAIT
# -- input A: 11010011011011111101111111100011, input B: 00010100111010010111000001010011; output Z: 01101000010111001001000110001100
# FPU_mult: SEND
# -- input A: 11010011011011111101111111100011, input B: 00010100111010010111000001010011; output Z: 01001010100000100001111011101000
# 
# dadda_mult: input A = 1.82071e+23, input B = 2.34183e-17, output OUT = 4.2638e+06
# dadda_mult: input A = 01100110000110100011100001100011, input B = 00100011110101111111111011100011, output OUT = 01001010100000100001111011101000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000101011110110001011100100001, input B: 01110101001000100011010000111001; output Z: 01001010100000100001111011101000
# FPU_mult: WAIT
# -- input A: 00000101011110110001011100100001, input B: 01110101001000100011010000111001; output Z: 01001010100000100001111011101000
# FPU_mult: SEND
# -- input A: 00000101011110110001011100100001, input B: 01110101001000100011010000111001; output Z: 10101000110110101011110000000101
# 
# dadda_mult: input A = -1.03025e+12, input B = 2.35713e-26, output OUT = -2.42844e-14
# dadda_mult: input A = 11010011011011111101111111100011, input B = 00010100111010010111000001010011, output OUT = 10101000110110101011110000000101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110111001010010010010100011110, input B: 10011011011101101100011111000110; output Z: 10101000110110101011110000000101
# FPU_mult: WAIT
# -- input A: 10110111001010010010010100011110, input B: 10011011011101101100011111000110; output Z: 10101000110110101011110000000101
# FPU_mult: SEND
# -- input A: 10110111001010010010010100011110, input B: 10011011011101101100011111000110; output Z: 00111011000111110001011111011011
# 
# dadda_mult: input A = 1.18062e-35, input B = 2.05618e+32, output OUT = 0.00242757
# dadda_mult: input A = 00000101011110110001011100100001, input B = 01110101001000100011010000111001, output OUT = 00111011000111110001011111011011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110100001110011000001000100001, input B: 00100100100111011001010001011011; output Z: 00111011000111110001011111011011
# FPU_mult: WAIT
# -- input A: 00110100001110011000001000100001, input B: 00100100100111011001010001011011; output Z: 00111011000111110001011111011011
# FPU_mult: SEND
# -- input A: 00110100001110011000001000100001, input B: 00100100100111011001010001011011; output Z: 00010011001000110000110110101010
# 
# dadda_mult: input A = -1.00818e-05, input B = -2.04132e-22, output OUT = 2.05802e-27
# dadda_mult: input A = 10110111001010010010010100011110, input B = 10011011011101101100011111000110, output OUT = 00010011001000110000110110101010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011101100000010111110111011010, input B: 01000000000101001000101011010010; output Z: 00010011001000110000110110101010
# FPU_mult: WAIT
# -- input A: 01011101100000010111110111011010, input B: 01000000000101001000101011010010; output Z: 00010011001000110000110110101010
# FPU_mult: SEND
# -- input A: 01011101100000010111110111011010, input B: 01000000000101001000101011010010; output Z: 00011001011001000110000010011111
# 
# dadda_mult: input A = 1.72768e-07, input B = 6.83392e-17, output OUT = 1.18068e-23
# dadda_mult: input A = 00110100001110011000001000100001, input B = 00100100100111011001010001011011, output OUT = 00011001011001000110000010011111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100100000100101100101110111111, input B: 00011010011111110110110111101110; output Z: 00011001011001000110000010011111
# FPU_mult: WAIT
# -- input A: 01100100000100101100101110111111, input B: 00011010011111110110110111101110; output Z: 00011001011001000110000010011111
# FPU_mult: SEND
# -- input A: 01100100000100101100101110111111, input B: 00011010011111110110110111101110; output Z: 01011110000101100100010111110100
# 
# dadda_mult: input A = 1.16636e+18, input B = 2.32097, output OUT = 2.70708e+18
# dadda_mult: input A = 01011101100000010111110111011010, input B = 01000000000101001000101011010010, output OUT = 01011110000101100100010111110100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001000110100110111010111111111, input B: 11110111111001100000111111000011; output Z: 01011110000101100100010111110100
# FPU_mult: WAIT
# -- input A: 01001000110100110111010111111111, input B: 11110111111001100000111111000011; output Z: 01011110000101100100010111110100
# FPU_mult: SEND
# -- input A: 01001000110100110111010111111111, input B: 11110111111001100000111111000011; output Z: 00111111000100100111011111111100
# 
# dadda_mult: input A = 1.08316e+22, input B = 5.28216e-23, output OUT = 0.572143
# dadda_mult: input A = 01100100000100101100101110111111, input B = 00011010011111110110110111101110, output OUT = 00111111000100100111011111111100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011100110011011100011010010001, input B: 00000010100011001111000011011011; output Z: 00111111000100100111011111111100
# FPU_mult: WAIT
# -- input A: 10011100110011011100011010010001, input B: 00000010100011001111000011011011; output Z: 00111111000100100111011111111100
# FPU_mult: SEND
# -- input A: 10011100110011011100011010010001, input B: 00000010100011001111000011011011; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 433072, input B = -9.33241e+33, output OUT = -inf
# dadda_mult: input A = 01001000110100110111010111111111, input B = 11110111111001100000111111000011, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011011011000010011000001101011, input B: 11001111001111010001010100000110; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10011011011000010011000001101011, input B: 11001111001111010001010100000110; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10011011011000010011000001101011, input B: 11001111001111010001010100000110; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -1.36171e-21, input B = 2.07094e-37, output OUT = -0
# dadda_mult: input A = 10011100110011011100011010010001, input B = 00000010100011001111000011011011, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001011011101101111111101000101, input B: 01111011100101010101000001100111; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11001011011101101111111101000101, input B: 01111011100101010101000001100111; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11001011011101101111111101000101, input B: 01111011100101010101000001100111; output Z: 00101011001001100101001100111101
# 
# dadda_mult: input A = -1.86272e-22, input B = -3.17227e+09, output OUT = 5.90906e-13
# dadda_mult: input A = 10011011011000010011000001101011, input B = 11001111001111010001010100000110, output OUT = 00101011001001100101001100111101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100110111000101111100101010011, input B: 11100011011110101100001111000111; output Z: 00101011001001100101001100111101
# FPU_mult: WAIT
# -- input A: 10100110111000101111100101010011, input B: 11100011011110101100001111000111; output Z: 00101011001001100101001100111101
# FPU_mult: SEND
# -- input A: 10100110111000101111100101010011, input B: 11100011011110101100001111000111; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = -1.61872e+07, input B = 1.55057e+36, output OUT = -inf
# dadda_mult: input A = 11001011011101101111111101000101, input B = 01111011100101010101000001100111, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110101000110001100011001101111, input B: 11101000000101101100011110011100; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10110101000110001100011001101111, input B: 11101000000101101100011110011100; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10110101000110001100011001101111, input B: 11101000000101101100011110011100; output Z: 01001010110111100101010100001111
# 
# dadda_mult: input A = -1.57495e-15, input B = -4.62579e+21, output OUT = 7.28538e+06
# dadda_mult: input A = 10100110111000101111100101010011, input B = 11100011011110101100001111000111, output OUT = 01001010110111100101010100001111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101010000000001100101001000101, input B: 10001100010010000110111000100110; output Z: 01001010110111100101010100001111
# FPU_mult: WAIT
# -- input A: 01101010000000001100101001000101, input B: 10001100010010000110111000100110; output Z: 01001010110111100101010100001111
# FPU_mult: SEND
# -- input A: 01101010000000001100101001000101, input B: 10001100010010000110111000100110; output Z: 01011101101100111111011011001001
# 
# dadda_mult: input A = -5.69132e-07, input B = -2.84815e+24, output OUT = 1.62097e+18
# dadda_mult: input A = 10110101000110001100011001101111, input B = 11101000000101101100011110011100, output OUT = 01011101101100111111011011001001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111000000010001000110011000110, input B: 00010101010010110000100001100010; output Z: 01011101101100111111011011001001
# FPU_mult: WAIT
# -- input A: 10111000000010001000110011000110, input B: 00010101010010110000100001100010; output Z: 01011101101100111111011011001001
# FPU_mult: SEND
# -- input A: 10111000000010001000110011000110, input B: 00010101010010110000100001100010; output Z: 10110110110010011010101011100000
# 
# dadda_mult: input A = 3.89244e+25, input B = -1.54406e-31, output OUT = -6.01016e-06
# dadda_mult: input A = 01101010000000001100101001000101, input B = 10001100010010000110111000100110, output OUT = 10110110110010011010101011100000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101001010001001110000111110110, input B: 01010010100011101001011110100011; output Z: 10110110110010011010101011100000
# FPU_mult: WAIT
# -- input A: 11101001010001001110000111110110, input B: 01010010100011101001011110100011; output Z: 10110110110010011010101011100000
# FPU_mult: SEND
# -- input A: 11101001010001001110000111110110, input B: 01010010100011101001011110100011; output Z: 10001101110110001001100000110011
# 
# dadda_mult: input A = -3.2556e-05, input B = 4.10021e-26, output OUT = -1.33487e-30
# dadda_mult: input A = 10111000000010001000110011000110, input B = 00010101010010110000100001100010, output OUT = 10001101110110001001100000110011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111011001110010010100101000010, input B: 00111010001111100111111101111110; output Z: 10001101110110001001100000110011
# FPU_mult: WAIT
# -- input A: 01111011001110010010100101000010, input B: 00111010001111100111111101111110; output Z: 10001101110110001001100000110011
# FPU_mult: SEND
# -- input A: 01111011001110010010100101000010, input B: 00111010001111100111111101111110; output Z: 11111100010110110101001111101010
# 
# dadda_mult: input A = -1.4876e+25, input B = 3.06215e+11, output OUT = -4.55526e+36
# dadda_mult: input A = 11101001010001001110000111110110, input B = 01010010100011101001011110100011, output OUT = 11111100010110110101001111101010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010110100101000010101000100010, input B: 00111101100010011011001111010101; output Z: 11111100010110110101001111101010
# FPU_mult: WAIT
# -- input A: 00010110100101000010101000100010, input B: 00111101100010011011001111010101; output Z: 11111100010110110101001111101010
# FPU_mult: SEND
# -- input A: 00010110100101000010101000100010, input B: 00111101100010011011001111010101; output Z: 01110110000010011100100011010110
# 
# dadda_mult: input A = 9.61412e+35, input B = 0.000726692, output OUT = 6.9865e+32
# dadda_mult: input A = 01111011001110010010100101000010, input B = 00111010001111100111111101111110, output OUT = 01110110000010011100100011010110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110101111000101110001100011101, input B: 10000110011101011101010110110100; output Z: 01110110000010011100100011010110
# FPU_mult: WAIT
# -- input A: 11110101111000101110001100011101, input B: 10000110011101011101010110110100; output Z: 01110110000010011100100011010110
# FPU_mult: SEND
# -- input A: 11110101111000101110001100011101, input B: 10000110011101011101010110110100; output Z: 00010100100111110110010101000010
# 
# dadda_mult: input A = 2.39373e-25, input B = 0.0672375, output OUT = 1.60948e-26
# dadda_mult: input A = 00010110100101000010101000100010, input B = 00111101100010011011001111010101, output OUT = 00010100100111110110010101000010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101110110100011000100100100100, input B: 11000100010101111000001000101111; output Z: 00010100100111110110010101000010
# FPU_mult: WAIT
# -- input A: 00101110110100011000100100100100, input B: 11000100010101111000001000101111; output Z: 00010100100111110110010101000010
# FPU_mult: SEND
# -- input A: 00101110110100011000100100100100, input B: 11000100010101111000001000101111; output Z: 00111100110110011110000011000001
# 
# dadda_mult: input A = -5.75227e+32, input B = -4.62364e-35, output OUT = 0.0265964
# dadda_mult: input A = 11110101111000101110001100011101, input B = 10000110011101011101010110110100, output OUT = 00111100110110011110000011000001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110110011110100010010100100011, input B: 10101001001001001101111100101010; output Z: 00111100110110011110000011000001
# FPU_mult: WAIT
# -- input A: 10110110011110100010010100100011, input B: 10101001001001001101111100101010; output Z: 00111100110110011110000011000001
# FPU_mult: SEND
# -- input A: 10110110011110100010010100100011, input B: 10101001001001001101111100101010; output Z: 10110011101100000110010010111011
# 
# dadda_mult: input A = 9.52858e-11, input B = -862.034, output OUT = -8.21396e-08
# dadda_mult: input A = 00101110110100011000100100100100, input B = 11000100010101111000001000101111, output OUT = 10110011101100000110010010111011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011100000101001111001101011011, input B: 01100111100110001010111011100101; output Z: 10110011101100000110010010111011
# FPU_mult: WAIT
# -- input A: 01011100000101001111001101011011, input B: 01100111100110001010111011100101; output Z: 10110011101100000110010010111011
# FPU_mult: SEND
# -- input A: 01011100000101001111001101011011, input B: 01100111100110001010111011100101; output Z: 00100000001000010001100111011010
# 
# dadda_mult: input A = -3.72745e-06, input B = -3.66089e-14, output OUT = 1.36458e-19
# dadda_mult: input A = 10110110011110100010010100100011, input B = 10101001001001001101111100101010, output OUT = 00100000001000010001100111011010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110100111001111010000111101011, input B: 10100001001001011111011011010000; output Z: 00100000001000010001100111011010
# FPU_mult: WAIT
# -- input A: 01110100111001111010000111101011, input B: 10100001001001011111011011010000; output Z: 00100000001000010001100111011010
# FPU_mult: SEND
# -- input A: 01110100111001111010000111101011, input B: 10100001001001011111011011010000; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 1.67703e+17, input B = 1.44205e+24, output OUT = inf
# dadda_mult: input A = 01011100000101001111001101011011, input B = 01100111100110001010111011100101, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100110111100100001110011011000, input B: 00101011001010000101011110101001; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 01100110111100100001110011011000, input B: 00101011001010000101011110101001; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 01100110111100100001110011011000, input B: 00101011001010000101011110101001; output Z: 11010110100101100010101010101110
# 
# dadda_mult: input A = 1.46815e+32, input B = -5.62308e-19, output OUT = -8.2555e+13
# dadda_mult: input A = 01110100111001111010000111101011, input B = 10100001001001011111011011010000, output OUT = 11010110100101100010101010101110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001110101100111010011010101101, input B: 01011111000101000000010011000101; output Z: 11010110100101100010101010101110
# FPU_mult: WAIT
# -- input A: 00001110101100111010011010101101, input B: 01011111000101000000010011000101; output Z: 11010110100101100010101010101110
# FPU_mult: SEND
# -- input A: 00001110101100111010011010101101, input B: 01011111000101000000010011000101; output Z: 01010010100111110011010111010101
# 
# dadda_mult: input A = 5.71672e+23, input B = 5.98072e-13, output OUT = 3.41901e+11
# dadda_mult: input A = 01100110111100100001110011011000, input B = 00101011001010000101011110101001, output OUT = 01010010100111110011010111010101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100010001000000111000010110001, input B: 10111110110101000010110010011011; output Z: 01010010100111110011010111010101
# FPU_mult: WAIT
# -- input A: 01100010001000000111000010110001, input B: 10111110110101000010110010011011; output Z: 01010010100111110011010111010101
# FPU_mult: SEND
# -- input A: 01100010001000000111000010110001, input B: 10111110110101000010110010011011; output Z: 00101110010011111011111101101010
# 
# dadda_mult: input A = 4.42874e-30, input B = 1.06659e+19, output OUT = 4.72364e-11
# dadda_mult: input A = 00001110101100111010011010101101, input B = 01011111000101000000010011000101, output OUT = 00101110010011111011111101101010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101011010111110011000110000100, input B: 01001010010101010000000100000011; output Z: 00101110010011111011111101101010
# FPU_mult: WAIT
# -- input A: 11101011010111110011000110000100, input B: 01001010010101010000000100000011; output Z: 00101110010011111011111101101010
# FPU_mult: SEND
# -- input A: 11101011010111110011000110000100, input B: 01001010010101010000000100000011; output Z: 11100001100001001111100101000111
# 
# dadda_mult: input A = 7.399e+20, input B = -0.414403, output OUT = -3.06617e+20
# dadda_mult: input A = 01100010001000000111000010110001, input B = 10111110110101000010110010011011, output OUT = 11100001100001001111100101000111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100001100110101010111000011110, input B: 00110000110010101010011011000010; output Z: 11100001100001001111100101000111
# FPU_mult: WAIT
# -- input A: 01100001100110101010111000011110, input B: 00110000110010101010011011000010; output Z: 11100001100001001111100101000111
# FPU_mult: SEND
# -- input A: 01100001100110101010111000011110, input B: 00110000110010101010011011000010; output Z: 11110110001110011011010100010101
# 
# dadda_mult: input A = -2.69824e+26, input B = 3.48986e+06, output OUT = -9.41648e+32
# dadda_mult: input A = 11101011010111110011000110000100, input B = 01001010010101010000000100000011, output OUT = 11110110001110011011010100010101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010000000001010000011010111100, input B: 10000011010010001000110001000100; output Z: 11110110001110011011010100010101
# FPU_mult: WAIT
# -- input A: 00010000000001010000011010111100, input B: 10000011010010001000110001000100; output Z: 11110110001110011011010100010101
# FPU_mult: SEND
# -- input A: 00010000000001010000011010111100, input B: 10000011010010001000110001000100; output Z: 01010010111101001110010001001100
# 
# dadda_mult: input A = 3.56668e+20, input B = 1.47448e-09, output OUT = 5.25901e+11
# dadda_mult: input A = 01100001100110101010111000011110, input B = 00110000110010101010011011000010, output OUT = 01010010111101001110010001001100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000001111011110111111000001001, input B: 11111001011000001100101100110001; output Z: 01010010111101001110010001001100
# FPU_mult: WAIT
# -- input A: 01000001111011110111111000001001, input B: 11111001011000001100101100110001; output Z: 01010010111101001110010001001100
# FPU_mult: SEND
# -- input A: 01000001111011110111111000001001, input B: 11111001011000001100101100110001; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 2.62348e-29, input B = -5.89357e-37, output OUT = -0
# dadda_mult: input A = 00010000000001010000011010111100, input B = 10000011010010001000110001000100, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11111110101110010110010010100100, input B: 11110111101111011001011110000010; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11111110101110010110010010100100, input B: 11110111101111011001011110000010; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11111110101110010110010010100100, input B: 11110111101111011001011110000010; output Z: 11111011110100100100110001011111
# 
# dadda_mult: input A = 29.9365, input B = -7.29497e+34, output OUT = -2.18386e+36
# dadda_mult: input A = 01000001111011110111111000001001, input B = 11111001011000001100101100110001, output OUT = 11111011110100100100110001011111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110011011110110100011110010010, input B: 00111011100100010010010001000100; output Z: 11111011110100100100110001011111
# FPU_mult: WAIT
# -- input A: 01110011011110110100011110010010, input B: 00111011100100010010010001000100; output Z: 11111011110100100100110001011111
# FPU_mult: SEND
# -- input A: 01110011011110110100011110010010, input B: 00111011100100010010010001000100; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -1.23215e+38, input B = -7.69076e+33, output OUT = inf
# dadda_mult: input A = 11111110101110010110010010100100, input B = 11110111101111011001011110000010, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110000100110100100011010011011, input B: 01000111010110100011011011101010; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11110000100110100100011010011011, input B: 01000111010110100011011011101010; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11110000100110100100011010011011, input B: 01000111010110100011011011101010; output Z: 01101111100011100111011100100011
# 
# dadda_mult: input A = 1.99084e+31, input B = 0.00442937, output OUT = 8.81818e+28
# dadda_mult: input A = 01110011011110110100011110010010, input B = 00111011100100010010010001000100, output OUT = 01101111100011100111011100100011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101001011111101100110111000011, input B: 00001100001001111100100001100010; output Z: 01101111100011100111011100100011
# FPU_mult: WAIT
# -- input A: 11101001011111101100110111000011, input B: 00001100001001111100100001100010; output Z: 01101111100011100111011100100011
# FPU_mult: SEND
# -- input A: 11101001011111101100110111000011, input B: 00001100001001111100100001100010; output Z: 11111000100000111000000100111000
# 
# dadda_mult: input A = -3.81968e+29, input B = 55862.9, output OUT = -2.13379e+34
# dadda_mult: input A = 11110000100110100100011010011011, input B = 01000111010110100011011011101010, output OUT = 11111000100000111000000100111000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110000001010001011011001101110, input B: 11000001010111000101001001110001; output Z: 11111000100000111000000100111000
# FPU_mult: WAIT
# -- input A: 01110000001010001011011001101110, input B: 11000001010111000101001001110001; output Z: 11111000100000111000000100111000
# FPU_mult: SEND
# -- input A: 01110000001010001011011001101110, input B: 11000001010111000101001001110001; output Z: 10110110001001101111111110101101
# 
# dadda_mult: input A = -1.92524e+25, input B = 1.29255e-31, output OUT = -2.48848e-06
# dadda_mult: input A = 11101001011111101100110111000011, input B = 00001100001001111100100001100010, output OUT = 10110110001001101111111110101101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101001110001000010100001001110, input B: 01001100110001100010000010000111; output Z: 10110110001001101111111110101101
# FPU_mult: WAIT
# -- input A: 01101001110001000010100001001110, input B: 01001100110001100010000010000111; output Z: 10110110001001101111111110101101
# FPU_mult: SEND
# -- input A: 01101001110001000010100001001110, input B: 01001100110001100010000010000111; output Z: 11110010000100010011001100011011
# 
# dadda_mult: input A = 2.08856e+29, input B = -13.7701, output OUT = -2.87597e+30
# dadda_mult: input A = 01110000001010001011011001101110, input B = 11000001010111000101001001110001, output OUT = 11110010000100010011001100011011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010101101000110110010010100000, input B: 11010111110000111101001010011110; output Z: 11110010000100010011001100011011
# FPU_mult: WAIT
# -- input A: 01010101101000110110010010100000, input B: 11010111110000111101001010011110; output Z: 11110010000100010011001100011011
# FPU_mult: SEND
# -- input A: 01010101101000110110010010100000, input B: 11010111110000111101001010011110; output Z: 01110111000101111101000000011001
# 
# dadda_mult: input A = 2.96425e+25, input B = 1.03876e+08, output OUT = 3.07913e+33
# dadda_mult: input A = 01101001110001000010100001001110, input B = 01001100110001100010000010000111, output OUT = 01110111000101111101000000011001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000010010001111001110111110110, input B: 00111111100111100011100101110100; output Z: 01110111000101111101000000011001
# FPU_mult: WAIT
# -- input A: 01000010010001111001110111110110, input B: 00111111100111100011100101110100; output Z: 01110111000101111101000000011001
# FPU_mult: SEND
# -- input A: 01000010010001111001110111110110, input B: 00111111100111100011100101110100; output Z: 11101101111110011111100000100111
# 
# dadda_mult: input A = 2.24566e+13, input B = -4.30619e+14, output OUT = -9.67022e+27
# dadda_mult: input A = 01010101101000110110010010100000, input B = 11010111110000111101001010011110, output OUT = 11101101111110011111100000100111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000010011001101101111110000001, input B: 11101111110111001100100110100001; output Z: 11101101111110011111100000100111
# FPU_mult: WAIT
# -- input A: 11000010011001101101111110000001, input B: 11101111110111001100100110100001; output Z: 11101101111110011111100000100111
# FPU_mult: SEND
# -- input A: 11000010011001101101111110000001, input B: 11101111110111001100100110100001; output Z: 01000010011101101100000010010101
# 
# dadda_mult: input A = 49.9043, input B = 1.23613, output OUT = 61.6881
# dadda_mult: input A = 01000010010001111001110111110110, input B = 00111111100111100011100101110100, output OUT = 01000010011101101100000010010101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111101111001011010000000001101, input B: 10011000110011100001011101010010; output Z: 01000010011101101100000010010101
# FPU_mult: WAIT
# -- input A: 10111101111001011010000000001101, input B: 10011000110011100001011101010010; output Z: 01000010011101101100000010010101
# FPU_mult: SEND
# -- input A: 10111101111001011010000000001101, input B: 10011000110011100001011101010010; output Z: 01110010110001110001110111101010
# 
# dadda_mult: input A = -57.7183, input B = -1.36661e+29, output OUT = 7.88783e+30
# dadda_mult: input A = 11000010011001101101111110000001, input B = 11101111110111001100100110100001, output OUT = 01110010110001110001110111101010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011000011101100100000001110000, input B: 10111110011110111111001000010000; output Z: 01110010110001110001110111101010
# FPU_mult: WAIT
# -- input A: 11011000011101100100000001110000, input B: 10111110011110111111001000010000; output Z: 01110010110001110001110111101010
# FPU_mult: SEND
# -- input A: 11011000011101100100000001110000, input B: 10111110011110111111001000010000; output Z: 00010111001110001101101110110101
# 
# dadda_mult: input A = -0.112122, input B = -5.32733e-24, output OUT = 5.97309e-25
# dadda_mult: input A = 10111101111001011010000000001101, input B = 10011000110011100001011101010010, output OUT = 00010111001110001101101110110101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000010110111011000100000100001, input B: 10011101000110101001100111011011; output Z: 00010111001110001101101110110101
# FPU_mult: WAIT
# -- input A: 00000010110111011000100000100001, input B: 10011101000110101001100111011011; output Z: 00010111001110001101101110110101
# FPU_mult: SEND
# -- input A: 00000010110111011000100000100001, input B: 10011101000110101001100111011011; output Z: 01010111011100100101101000000110
# 
# dadda_mult: input A = -1.08303e+15, input B = -0.246041, output OUT = 2.66468e+14
# dadda_mult: input A = 11011000011101100100000001110000, input B = 10111110011110111111001000010000, output OUT = 01010111011100100101101000000110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000100001010111010110111111001, input B: 10010110001111010011100111001100; output Z: 01010111011100100101101000000110
# FPU_mult: WAIT
# -- input A: 00000100001010111010110111111001, input B: 10010110001111010011100111001100; output Z: 01010111011100100101101000000110
# FPU_mult: SEND
# -- input A: 00000100001010111010110111111001, input B: 10010110001111010011100111001100; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 3.25512e-37, input B = -2.04613e-21, output OUT = -0
# dadda_mult: input A = 00000010110111011000100000100001, input B = 10011101000110101001100111011011, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110100011010111100001011001101, input B: 01001111000001000000101111001001; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01110100011010111100001011001101, input B: 01001111000001000000101111001001; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01110100011010111100001011001101, input B: 01001111000001000000101111001001; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 2.01808e-36, input B = -1.52855e-25, output OUT = -0
# dadda_mult: input A = 00000100001010111010110111111001, input B = 10010110001111010011100111001100, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111101110010111011000101100011, input B: 11000110010001111101100010010011; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00111101110010111011000101100011, input B: 11000110010001111101100010010011; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00111101110010111011000101100011, input B: 11000110010001111101100010010011; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 7.47156e+31, input B = 2.21536e+09, output OUT = inf
# dadda_mult: input A = 01110100011010111100001011001101, input B = 01001111000001000000101111001001, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110111111011111101000110001001, input B: 10001110110100011101101111101100; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 00110111111011111101000110001001, input B: 10001110110100011101101111101100; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 00110111111011111101000110001001, input B: 10001110110100011101101111101100; output Z: 11000100100111110000001100110111
# 
# dadda_mult: input A = 0.0994594, input B = -12790.1, output OUT = -1272.1
# dadda_mult: input A = 00111101110010111011000101100011, input B = 11000110010001111101100010010011, output OUT = 11000100100111110000001100110111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010001011000010011001010001100, input B: 10110000111000100101111011011101; output Z: 11000100100111110000001100110111
# FPU_mult: WAIT
# -- input A: 11010001011000010011001010001100, input B: 10110000111000100101111011011101; output Z: 11000100100111110000001100110111
# FPU_mult: SEND
# -- input A: 11010001011000010011001010001100, input B: 10110000111000100101111011011101; output Z: 10000111010001001001100000010110
# 
# dadda_mult: input A = 2.85886e-05, input B = -5.17343e-30, output OUT = -1.47901e-34
# dadda_mult: input A = 00110111111011111101000110001001, input B = 10001110110100011101101111101100, output OUT = 10000111010001001001100000010110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000110110100000000000001011000, input B: 01100111011001110101101111011110; output Z: 10000111010001001001100000010110
# FPU_mult: WAIT
# -- input A: 11000110110100000000000001011000, input B: 01100111011001110101101111011110; output Z: 10000111010001001001100000010110
# FPU_mult: SEND
# -- input A: 11000110110100000000000001011000, input B: 01100111011001110101101111011110; output Z: 01000010110001110010001000010011
# 
# dadda_mult: input A = -6.0451e+10, input B = -1.64706e-09, output OUT = 99.5666
# dadda_mult: input A = 11010001011000010011001010001100, input B = 10110000111000100101111011011101, output OUT = 01000010110001110010001000010011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110100000111010001110111110100, input B: 11000111000100101110000110100001; output Z: 01000010110001110010001000010011
# FPU_mult: WAIT
# -- input A: 00110100000111010001110111110100, input B: 11000111000100101110000110100001; output Z: 01000010110001110010001000010011
# FPU_mult: SEND
# -- input A: 00110100000111010001110111110100, input B: 11000111000100101110000110100001; output Z: 11101110101110111111101011110100
# 
# dadda_mult: input A = -26624.2, input B = 1.09256e+24, output OUT = -2.90885e+28
# dadda_mult: input A = 11000110110100000000000001011000, input B = 01100111011001110101101111011110, output OUT = 11101110101110111111101011110100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101010000000101011101110011010, input B: 11100111111000111111110001111010; output Z: 11101110101110111111101011110100
# FPU_mult: WAIT
# -- input A: 01101010000000101011101110011010, input B: 11100111111000111111110001111010; output Z: 11101110101110111111101011110100
# FPU_mult: SEND
# -- input A: 01101010000000101011101110011010, input B: 11100111111000111111110001111010; output Z: 10111011101101000100101100011111
# 
# dadda_mult: input A = 1.46327e-07, input B = -37601.6, output OUT = -0.00550212
# dadda_mult: input A = 00110100000111010001110111110100, input B = 11000111000100101110000110100001, output OUT = 10111011101101000100101100011111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111001100111110001111001001101, input B: 01010010111001010101111101000111; output Z: 10111011101101000100101100011111
# FPU_mult: WAIT
# -- input A: 00111001100111110001111001001101, input B: 01010010111001010101111101000111; output Z: 10111011101101000100101100011111
# FPU_mult: SEND
# -- input A: 00111001100111110001111001001101, input B: 01010010111001010101111101000111; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 3.95116e+25, input B = -2.15327e+24, output OUT = -inf
# dadda_mult: input A = 01101010000000101011101110011010, input B = 11100111111000111111110001111010, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110010000011001101000101101101, input B: 00011111101110101110000110101101; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11110010000011001101000101101101, input B: 00011111101110101110000110101101; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11110010000011001101000101101101, input B: 00011111101110101110000110101101; output Z: 01001101000011101001000101010011
# 
# dadda_mult: input A = 0.000303494, input B = 4.92573e+11, output OUT = 1.49493e+08
# dadda_mult: input A = 00111001100111110001111001001101, input B = 01010010111001010101111101000111, output OUT = 01001101000011101001000101010011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110111111011111110010011111010, input B: 00000110110110111100110001111101; output Z: 01001101000011101001000101010011
# FPU_mult: WAIT
# -- input A: 01110111111011111110010011111010, input B: 00000110110110111100110001111101; output Z: 01001101000011101001000101010011
# FPU_mult: SEND
# -- input A: 01110111111011111110010011111010, input B: 00000110110110111100110001111101; output Z: 11010010010011011001100010011001
# 
# dadda_mult: input A = -2.78919e+30, input B = 7.91474e-20, output OUT = -2.20757e+11
# dadda_mult: input A = 11110010000011001101000101101101, input B = 00011111101110101110000110101101, output OUT = 11010010010011011001100010011001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100100111111111001001001010100, input B: 11110000101000010101000001000011; output Z: 11010010010011011001100010011001
# FPU_mult: WAIT
# -- input A: 10100100111111111001001001010100, input B: 11110000101000010101000001000011; output Z: 11010010010011011001100010011001
# FPU_mult: SEND
# -- input A: 10100100111111111001001001010100, input B: 11110000101000010101000001000011; output Z: 00111111010011011111100010000001
# 
# dadda_mult: input A = 9.73127e+33, input B = 8.26791e-35, output OUT = 0.804573
# dadda_mult: input A = 01110111111011111110010011111010, input B = 00000110110110111100110001111101, output OUT = 00111111010011011111100010000001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110111100111100101001110110000, input B: 01111101000110111100010001011001; output Z: 00111111010011011111100010000001
# FPU_mult: WAIT
# -- input A: 00110111100111100101001110110000, input B: 01111101000110111100010001011001; output Z: 00111111010011011111100010000001
# FPU_mult: SEND
# -- input A: 00110111100111100101001110110000, input B: 01111101000110111100010001011001; output Z: 01010110001000010000101100100111
# 
# dadda_mult: input A = -1.10837e-16, input B = -3.99393e+29, output OUT = 4.42673e+13
# dadda_mult: input A = 10100100111111111001001001010100, input B = 11110000101000010101000001000011, output OUT = 01010110001000010000101100100111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010010101011100111001010010101, input B: 11111011010010011000100001101101; output Z: 01010110001000010000101100100111
# FPU_mult: WAIT
# -- input A: 00010010101011100111001010010101, input B: 11111011010010011000100001101101; output Z: 01010110001000010000101100100111
# FPU_mult: SEND
# -- input A: 00010010101011100111001010010101, input B: 11111011010010011000100001101101; output Z: 01110101010000001010110000110101
# 
# dadda_mult: input A = 1.8874e-05, input B = 1.29406e+37, output OUT = 2.44242e+32
# dadda_mult: input A = 00110111100111100101001110110000, input B = 01111101000110111100010001011001, output OUT = 01110101010000001010110000110101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101011011010011010111001100101, input B: 10100110101100001001101011001100; output Z: 01110101010000001010110000110101
# FPU_mult: WAIT
# -- input A: 01101011011010011010111001100101, input B: 10100110101100001001101011001100; output Z: 01110101010000001010110000110101
# FPU_mult: SEND
# -- input A: 01101011011010011010111001100101, input B: 10100110101100001001101011001100; output Z: 11001110100010010101010011101110
# 
# dadda_mult: input A = 1.10092e-27, input B = -1.04642e+36, output OUT = -1.15202e+09
# dadda_mult: input A = 00010010101011100111001010010101, input B = 11111011010010011000100001101101, output OUT = 11001110100010010101010011101110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010100101010111001101000001101, input B: 00101100101111110010100010000010; output Z: 11001110100010010101010011101110
# FPU_mult: WAIT
# -- input A: 00010100101010111001101000001101, input B: 00101100101111110010100010000010; output Z: 11001110100010010101010011101110
# FPU_mult: SEND
# -- input A: 00010100101010111001101000001101, input B: 00101100101111110010100010000010; output Z: 11010010101000010011010100110011
# 
# dadda_mult: input A = 2.82503e+26, input B = -1.22544e-15, output OUT = -3.46191e+11
# dadda_mult: input A = 01101011011010011010111001100101, input B = 10100110101100001001101011001100, output OUT = 11010010101000010011010100110011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100001010100000000100010010110, input B: 01000010011011000110111100100100; output Z: 11010010101000010011010100110011
# FPU_mult: WAIT
# -- input A: 11100001010100000000100010010110, input B: 01000010011011000110111100100100; output Z: 11010010101000010011010100110011
# FPU_mult: SEND
# -- input A: 11100001010100000000100010010110, input B: 01000010011011000110111100100100; output Z: 00000010000000000010001100010111
# 
# dadda_mult: input A = 1.73273e-26, input B = 5.43304e-12, output OUT = 9.41403e-38
# dadda_mult: input A = 00010100101010111001101000001101, input B = 00101100101111110010100010000010, output OUT = 00000010000000000010001100010111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110110100111110011001110101001, input B: 01010010111010101010000100111100; output Z: 00000010000000000010001100010111
# FPU_mult: WAIT
# -- input A: 01110110100111110011001110101001, input B: 01010010111010101010000100111100; output Z: 00000010000000000010001100010111
# FPU_mult: SEND
# -- input A: 01110110100111110011001110101001, input B: 01010010111010101010000100111100; output Z: 11100100010000000010001000111011
# 
# dadda_mult: input A = -2.39846e+20, input B = 59.1085, output OUT = -1.4177e+22
# dadda_mult: input A = 11100001010100000000100010010110, input B = 01000010011011000110111100100100, output OUT = 11100100010000000010001000111011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001001001100011000111110101110, input B: 11110001001101111010110110111001; output Z: 11100100010000000010001000111011
# FPU_mult: WAIT
# -- input A: 11001001001100011000111110101110, input B: 11110001001101111010110110111001; output Z: 11100100010000000010001000111011
# FPU_mult: SEND
# -- input A: 11001001001100011000111110101110, input B: 11110001001101111010110110111001; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 1.6145e+33, input B = 5.03864e+11, output OUT = inf
# dadda_mult: input A = 01110110100111110011001110101001, input B = 01010010111010101010000100111100, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000010000101100001110000010010, input B: 01000011111100101110000011100100; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10000010000101100001110000010010, input B: 01000011111100101110000011100100; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10000010000101100001110000010010, input B: 01000011111100101110000011100100; output Z: 01111010111111101100110001101000
# 
# dadda_mult: input A = -727291, input B = -9.09532e+29, output OUT = 6.61495e+35
# dadda_mult: input A = 11001001001100011000111110101110, input B = 11110001001101111010110110111001, output OUT = 01111010111111101100110001101000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110101110011111110001111000100, input B: 10110101110111000110011110010101; output Z: 01111010111111101100110001101000
# FPU_mult: WAIT
# -- input A: 00110101110011111110001111000100, input B: 10110101110111000110011110010101; output Z: 01111010111111101100110001101000
# FPU_mult: SEND
# -- input A: 00110101110011111110001111000100, input B: 10110101110111000110011110010101; output Z: 10000110100011100110101001100111
# 
# dadda_mult: input A = -1.10283e-37, input B = 485.757, output OUT = -5.35708e-35
# dadda_mult: input A = 10000010000101100001110000010010, input B = 01000011111100101110000011100100, output OUT = 10000110100011100110101001100111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100011011010001001101111111000, input B: 11001001110010101011110101011100; output Z: 10000110100011100110101001100111
# FPU_mult: WAIT
# -- input A: 01100011011010001001101111111000, input B: 11001001110010101011110101011100; output Z: 10000110100011100110101001100111
# FPU_mult: SEND
# -- input A: 01100011011010001001101111111000, input B: 11001001110010101011110101011100; output Z: 10101100001100101111101111011010
# 
# dadda_mult: input A = 1.5489e-06, input B = -1.64214e-06, output OUT = -2.54351e-12
# dadda_mult: input A = 00110101110011111110001111000100, input B = 10110101110111000110011110010101, output OUT = 10101100001100101111101111011010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111000111101111010000110111010, input B: 00011100100101110100001100101000; output Z: 10101100001100101111101111011010
# FPU_mult: WAIT
# -- input A: 00111000111101111010000110111010, input B: 00011100100101110100001100101000; output Z: 10101100001100101111101111011010
# FPU_mult: SEND
# -- input A: 00111000111101111010000110111010, input B: 00011100100101110100001100101000; output Z: 11101101101110000011011100100000
# 
# dadda_mult: input A = 4.29088e+21, input B = -1.66084e+06, output OUT = -7.12649e+27
# dadda_mult: input A = 01100011011010001001101111111000, input B = 11001001110010101011110101011100, output OUT = 11101101101110000011011100100000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101011010111100001001001110110, input B: 10010101001001000000100010110101; output Z: 11101101101110000011011100100000
# FPU_mult: WAIT
# -- input A: 00101011010111100001001001110110, input B: 10010101001001000000100010110101; output Z: 11101101101110000011011100100000
# FPU_mult: SEND
# -- input A: 00101011010111100001001001110110, input B: 10010101001001000000100010110101; output Z: 00010110000100100101000101011011
# 
# dadda_mult: input A = 0.00011808, input B = 1.00097e-21, output OUT = 1.18195e-25
# dadda_mult: input A = 00111000111101111010000110111010, input B = 00011100100101110100001100101000, output OUT = 00010110000100100101000101011011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110011000010101110101100111110, input B: 00010010010000101111000100010000; output Z: 00010110000100100101000101011011
# FPU_mult: WAIT
# -- input A: 11110011000010101110101100111110, input B: 00010010010000101111000100010000; output Z: 00010110000100100101000101011011
# FPU_mult: SEND
# -- input A: 11110011000010101110101100111110, input B: 00010010010000101111000100010000; output Z: 10000001000011100100101101100001
# 
# dadda_mult: input A = 7.88959e-13, input B = -3.31264e-26, output OUT = -2.61354e-38
# dadda_mult: input A = 00101011010111100001001001110110, input B = 10010101001001000000100010110101, output OUT = 10000001000011100100101101100001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111010101101011110011011010010, input B: 00100001010111011001101111000110; output Z: 10000001000011100100101101100001
# FPU_mult: WAIT
# -- input A: 01111010101101011110011011010010, input B: 00100001010111011001101111000110; output Z: 10000001000011100100101101100001
# FPU_mult: SEND
# -- input A: 01111010101101011110011011010010, input B: 00100001010111011001101111000110; output Z: 11000101110100111001001000101010
# 
# dadda_mult: input A = -1.10063e+31, input B = 6.15127e-28, output OUT = -6770.27
# dadda_mult: input A = 11110011000010101110101100111110, input B = 00010010010000101111000100010000, output OUT = 11000101110100111001001000101010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101101110101011100000001010111, input B: 01100001111100100100000101101100; output Z: 11000101110100111001001000101010
# FPU_mult: WAIT
# -- input A: 01101101110101011100000001010111, input B: 01100001111100100100000101101100; output Z: 11000101110100111001001000101010
# FPU_mult: SEND
# -- input A: 01101101110101011100000001010111, input B: 01100001111100100100000101101100; output Z: 01011100100111010111011011110011
# 
# dadda_mult: input A = 4.72244e+35, input B = 7.50839e-19, output OUT = 3.54579e+17
# dadda_mult: input A = 01111010101101011110011011010010, input B = 00100001010111011001101111000110, output OUT = 01011100100111010111011011110011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101100011011111001111000000010, input B: 00110100100101000111000100011111; output Z: 01011100100111010111011011110011
# FPU_mult: WAIT
# -- input A: 00101100011011111001111000000010, input B: 00110100100101000111000100011111; output Z: 01011100100111010111011011110011
# FPU_mult: SEND
# -- input A: 00101100011011111001111000000010, input B: 00110100100101000111000100011111; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 8.2691e+27, input B = 5.58603e+20, output OUT = inf
# dadda_mult: input A = 01101101110101011100000001010111, input B = 01100001111100100100000101101100, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100101010010100101101001011100, input B: 01010011101010101000110011010000; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 00100101010010100101101001011100, input B: 01010011101010101000110011010000; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 00100101010010100101101001011100, input B: 01010011101010101000110011010000; output Z: 00100001100010101111000100111011
# 
# dadda_mult: input A = 3.40517e-12, input B = 2.76495e-07, output OUT = 9.4151e-19
# dadda_mult: input A = 00101100011011111001111000000010, input B = 00110100100101000111000100011111, output OUT = 00100001100010101111000100111011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011000001111111001101110111100, input B: 10011011100001000001001101100110; output Z: 00100001100010101111000100111011
# FPU_mult: WAIT
# -- input A: 01011000001111111001101110111100, input B: 10011011100001000001001101100110; output Z: 00100001100010101111000100111011
# FPU_mult: SEND
# -- input A: 01011000001111111001101110111100, input B: 10011011100001000001001101100110; output Z: 00111001100001101100111101001111
# 
# dadda_mult: input A = 1.75513e-16, input B = 1.46501e+12, output OUT = 0.000257129
# dadda_mult: input A = 00100101010010100101101001011100, input B = 01010011101010101000110011010000, output OUT = 00111001100001101100111101001111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101101110000001101010011010101, input B: 11100000110111100010000101010011; output Z: 00111001100001101100111101001111
# FPU_mult: WAIT
# -- input A: 10101101110000001101010011010101, input B: 11100000110111100010000101010011; output Z: 00111001100001101100111101001111
# FPU_mult: SEND
# -- input A: 10101101110000001101010011010101, input B: 11100000110111100010000101010011; output Z: 10110100010001011011010110100100
# 
# dadda_mult: input A = 8.42702e+14, input B = -2.18501e-22, output OUT = -1.84131e-07
# dadda_mult: input A = 01011000001111111001101110111100, input B = 10011011100001000001001101100110, output OUT = 10110100010001011011010110100100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111001011011100001001100001111, input B: 01100100100100100011000100001010; output Z: 10110100010001011011010110100100
# FPU_mult: WAIT
# -- input A: 00111001011011100001001100001111, input B: 01100100100100100011000100001010; output Z: 10110100010001011011010110100100
# FPU_mult: SEND
# -- input A: 00111001011011100001001100001111, input B: 01100100100100100011000100001010; output Z: 01001111001001110101000110101011
# 
# dadda_mult: input A = -2.19224e-11, input B = -1.28049e+20, output OUT = 2.80715e+09
# dadda_mult: input A = 10101101110000001101010011010101, input B = 11100000110111100010000101010011, output OUT = 01001111001001110101000110101011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110010101111011100000111110001, input B: 00111011000100000000000000010100; output Z: 01001111001001110101000110101011
# FPU_mult: WAIT
# -- input A: 11110010101111011100000111110001, input B: 00111011000100000000000000010100; output Z: 01001111001001110101000110101011
# FPU_mult: SEND
# -- input A: 11110010101111011100000111110001, input B: 00111011000100000000000000010100; output Z: 01011110100001111111010001111010
# 
# dadda_mult: input A = 0.000227045, input B = 2.15741e+22, output OUT = 4.89829e+18
# dadda_mult: input A = 00111001011011100001001100001111, input B = 01100100100100100011000100001010, output OUT = 01011110100001111111010001111010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000111000100111111111000101011, input B: 11100010011101100000100110111001; output Z: 01011110100001111111010001111010
# FPU_mult: WAIT
# -- input A: 10000111000100111111111000101011, input B: 11100010011101100000100110111001; output Z: 01011110100001111111010001111010
# FPU_mult: SEND
# -- input A: 10000111000100111111111000101011, input B: 11100010011101100000100110111001; output Z: 11101110010101010111101001001101
# 
# dadda_mult: input A = -7.51707e+30, input B = 0.00219727, output OUT = -1.6517e+28
# dadda_mult: input A = 11110010101111011100000111110001, input B = 00111011000100000000000000010100, output OUT = 11101110010101010111101001001101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10001010010011010111101000011010, input B: 01011111000101111100010111101111; output Z: 11101110010101010111101001001101
# FPU_mult: WAIT
# -- input A: 10001010010011010111101000011010, input B: 01011111000101111100010111101111; output Z: 11101110010101010111101001001101
# FPU_mult: SEND
# -- input A: 10001010010011010111101000011010, input B: 01011111000101111100010111101111; output Z: 00101010000011100011101111011100
# 
# dadda_mult: input A = -1.11337e-34, input B = -1.13465e+21, output OUT = 1.26329e-13
# dadda_mult: input A = 10000111000100111111111000101011, input B = 11100010011101100000100110111001, output OUT = 00101010000011100011101111011100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100110000010001111111011111011, input B: 00100001101110000100101000110101; output Z: 00101010000011100011101111011100
# FPU_mult: WAIT
# -- input A: 11100110000010001111111011111011, input B: 00100001101110000100101000110101; output Z: 00101010000011100011101111011100
# FPU_mult: SEND
# -- input A: 11100110000010001111111011111011, input B: 00100001101110000100101000110101; output Z: 10101001111100111010001111001000
# 
# dadda_mult: input A = -9.89336e-33, input B = 1.09364e+19, output OUT = -1.08198e-13
# dadda_mult: input A = 10001010010011010111101000011010, input B = 01011111000101111100010111101111, output OUT = 10101001111100111010001111001000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101110000010110101111101001100, input B: 00110111010101011101011000000100; output Z: 10101001111100111010001111001000
# FPU_mult: WAIT
# -- input A: 01101110000010110101111101001100, input B: 00110111010101011101011000000100; output Z: 10101001111100111010001111001000
# FPU_mult: SEND
# -- input A: 01101110000010110101111101001100, input B: 00110111010101011101011000000100; output Z: 11001000010001010011110111110101
# 
# dadda_mult: input A = -1.61736e+23, input B = 1.2488e-18, output OUT = -201976
# dadda_mult: input A = 11100110000010001111111011111011, input B = 00100001101110000100101000110101, output OUT = 11001000010001010011110111110101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101100011101110110011100101000, input B: 10000001101110010011000100010101; output Z: 11001000010001010011110111110101
# FPU_mult: WAIT
# -- input A: 01101100011101110110011100101000, input B: 10000001101110010011000100010101; output Z: 11001000010001010011110111110101
# FPU_mult: SEND
# -- input A: 01101100011101110110011100101000, input B: 10000001101110010011000100010101; output Z: 01100101111010001101010110011100
# 
# dadda_mult: input A = 1.07834e+28, input B = 1.27456e-05, output OUT = 1.37441e+23
# dadda_mult: input A = 01101110000010110101111101001100, input B = 00110111010101011101011000000100, output OUT = 01100101111010001101010110011100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010100011110101110110010111000, input B: 00011100111111111110000101101000; output Z: 01100101111010001101010110011100
# FPU_mult: WAIT
# -- input A: 11010100011110101110110010111000, input B: 00011100111111111110000101101000; output Z: 01100101111010001101010110011100
# FPU_mult: SEND
# -- input A: 11010100011110101110110010111000, input B: 00011100111111111110000101101000; output Z: 10101110101100101111100011111011
# 
# dadda_mult: input A = 1.19637e+27, input B = -6.80287e-38, output OUT = -8.13873e-11
# dadda_mult: input A = 01101100011101110110011100101000, input B = 10000001101110010011000100010101, output OUT = 10101110101100101111100011111011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110001110101100011011101010010, input B: 00100110100010111110000111111011; output Z: 10101110101100101111100011111011
# FPU_mult: WAIT
# -- input A: 00110001110101100011011101010010, input B: 00100110100010111110000111111011; output Z: 10101110101100101111100011111011
# FPU_mult: SEND
# -- input A: 00110001110101100011011101010010, input B: 00100110100010111110000111111011; output Z: 10110001111110101100111010111011
# 
# dadda_mult: input A = -4.31085e+12, input B = 1.69328e-21, output OUT = -7.29946e-09
# dadda_mult: input A = 11010100011110101110110010111000, input B = 00011100111111111110000101101000, output OUT = 10110001111110101100111010111011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111110001010000101111110000011, input B: 11001111101011111010100001010010; output Z: 10110001111110101100111010111011
# FPU_mult: WAIT
# -- input A: 10111110001010000101111110000011, input B: 11001111101011111010100001010010; output Z: 10110001111110101100111010111011
# FPU_mult: SEND
# -- input A: 10111110001010000101111110000011, input B: 11001111101011111010100001010010; output Z: 00011000111010100001101001000100
# 
# dadda_mult: input A = 6.23451e-09, input B = 9.70631e-16, output OUT = 6.05141e-24
# dadda_mult: input A = 00110001110101100011011101010010, input B = 00100110100010111110000111111011, output OUT = 00011000111010100001101001000100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00011100110101101010010010000101, input B: 11100011010011010010100011001110; output Z: 00011000111010100001101001000100
# FPU_mult: WAIT
# -- input A: 00011100110101101010010010000101, input B: 11100011010011010010100011001110; output Z: 00011000111010100001101001000100
# FPU_mult: SEND
# -- input A: 00011100110101101010010010000101, input B: 11100011010011010010100011001110; output Z: 01001110011001110000111111111110
# 
# dadda_mult: input A = -0.164427, input B = -5.89409e+09, output OUT = 9.69146e+08
# dadda_mult: input A = 10111110001010000101111110000011, input B = 11001111101011111010100001010010, output OUT = 01001110011001110000111111111110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101010001111101111001000001111, input B: 11010111111010011100000000001000; output Z: 01001110011001110000111111111110
# FPU_mult: WAIT
# -- input A: 10101010001111101111001000001111, input B: 11010111111010011100000000001000; output Z: 01001110011001110000111111111110
# FPU_mult: SEND
# -- input A: 10101010001111101111001000001111, input B: 11010111111010011100000000001000; output Z: 11000000101011000000001111110101
# 
# dadda_mult: input A = 1.42039e-21, input B = -3.78452e+21, output OUT = -5.37548
# dadda_mult: input A = 00011100110101101010010010000101, input B = 11100011010011010010100011001110, output OUT = 11000000101011000000001111110101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000101100111011111000010111110, input B: 11011111111010010011010001000111; output Z: 11000000101011000000001111110101
# FPU_mult: WAIT
# -- input A: 01000101100111011111000010111110, input B: 11011111111010010011010001000111; output Z: 11000000101011000000001111110101
# FPU_mult: SEND
# -- input A: 01000101100111011111000010111110, input B: 11011111111010010011010001000111; output Z: 01000010101011100101100110001011
# 
# dadda_mult: input A = -1.69594e-13, input B = -5.14022e+14, output OUT = 87.1749
# dadda_mult: input A = 10101010001111101111001000001111, input B = 11010111111010011100000000001000, output OUT = 01000010101011100101100110001011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001011011100101100010110010110, input B: 01001010110000000001011001101011; output Z: 01000010101011100101100110001011
# FPU_mult: WAIT
# -- input A: 01001011011100101100010110010110, input B: 01001010110000000001011001101011; output Z: 01000010101011100101100110001011
# FPU_mult: SEND
# -- input A: 01001011011100101100010110010110, input B: 01001010110000000001011001101011; output Z: 11100110000011111110000001011110
# 
# dadda_mult: input A = 5054.09, input B = -3.36083e+19, output OUT = -1.69859e+23
# dadda_mult: input A = 01000101100111011111000010111110, input B = 11011111111010010011010001000111, output OUT = 11100110000011111110000001011110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000110111000001110100001111001, input B: 00000111110100011011010111111100; output Z: 11100110000011111110000001011110
# FPU_mult: WAIT
# -- input A: 10000110111000001110100001111001, input B: 00000111110100011011010111111100; output Z: 11100110000011111110000001011110
# FPU_mult: SEND
# -- input A: 10000110111000001110100001111001, input B: 00000111110100011011010111111100; output Z: 01010110101101100010100101110011
# 
# dadda_mult: input A = 1.59103e+07, input B = 6.29433e+06, output OUT = 1.00145e+14
# dadda_mult: input A = 01001011011100101100010110010110, input B = 01001010110000000001011001101011, output OUT = 01010110101101100010100101110011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001000010001100111001010101000, input B: 10111000000000010001100111101010; output Z: 01010110101101100010100101110011
# FPU_mult: WAIT
# -- input A: 01001000010001100111001010101000, input B: 10111000000000010001100111101010; output Z: 01010110101101100010100101110011
# FPU_mult: SEND
# -- input A: 01001000010001100111001010101000, input B: 10111000000000010001100111101010; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -8.4601e-35, input B = 3.15538e-34, output OUT = -0
# dadda_mult: input A = 10000110111000001110100001111001, input B = 00000111110100011011010111111100, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100001000110111001011110111010, input B: 11010110001010111000010000110010; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 10100001000110111001011110111010, input B: 11010110001010111000010000110010; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 10100001000110111001011110111010, input B: 11010110001010111000010000110010; output Z: 11000000110010000010011110111010
# 
# dadda_mult: input A = 203211, input B = -3.07801e-05, output OUT = -6.25485
# dadda_mult: input A = 01001000010001100111001010101000, input B = 10111000000000010001100111101010, output OUT = 11000000110010000010011110111010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100010000111110101100111110011, input B: 00111100110111100111110010101001; output Z: 11000000110010000010011110111010
# FPU_mult: WAIT
# -- input A: 01100010000111110101100111110011, input B: 00111100110111100111110010101001; output Z: 11000000110010000010011110111010
# FPU_mult: SEND
# -- input A: 01100010000111110101100111110011, input B: 00111100110111100111110010101001; output Z: 00110111110100000111110101100100
# 
# dadda_mult: input A = -5.27169e-19, input B = -4.71461e+13, output OUT = 2.48539e-05
# dadda_mult: input A = 10100001000110111001011110111010, input B = 11010110001010111000010000110010, output OUT = 00110111110100000111110101100100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110011001000001100100110000110, input B: 00110001111110110101111100101011; output Z: 00110111110100000111110101100100
# FPU_mult: WAIT
# -- input A: 10110011001000001100100110000110, input B: 00110001111110110101111100101011; output Z: 00110111110100000111110101100100
# FPU_mult: SEND
# -- input A: 10110011001000001100100110000110, input B: 00110001111110110101111100101011; output Z: 01011111100010100111110110011001
# 
# dadda_mult: input A = 7.34878e+20, input B = 0.0271591, output OUT = 1.99586e+19
# dadda_mult: input A = 01100010000111110101100111110011, input B = 00111100110111100111110010101001, output OUT = 01011111100010100111110110011001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00011010001000110100001101011011, input B: 10000110001110001000000011000011; output Z: 01011111100010100111110110011001
# FPU_mult: WAIT
# -- input A: 00011010001000110100001101011011, input B: 10000110001110001000000011000011; output Z: 01011111100010100111110110011001
# FPU_mult: SEND
# -- input A: 00011010001000110100001101011011, input B: 10000110001110001000000011000011; output Z: 10100101100111011110000101011100
# 
# dadda_mult: input A = -3.74362e-08, input B = 7.31588e-09, output OUT = -2.73879e-16
# dadda_mult: input A = 10110011001000001100100110000110, input B = 00110001111110110101111100101011, output OUT = 10100101100111011110000101011100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100011010001111100000000000100, input B: 11001100001010111010101001101111; output Z: 10100101100111011110000101011100
# FPU_mult: WAIT
# -- input A: 11100011010001111100000000000100, input B: 11001100001010111010101001101111; output Z: 10100101100111011110000101011100
# FPU_mult: SEND
# -- input A: 11100011010001111100000000000100, input B: 11001100001010111010101001101111; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 3.3762e-23, input B = -3.47012e-35, output OUT = -0
# dadda_mult: input A = 00011010001000110100001101011011, input B = 10000110001110001000000011000011, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001011011111000101001110001101, input B: 01101010110001011111000100101101; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11001011011111000101001110001101, input B: 01101010110001011111000100101101; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11001011011111000101001110001101, input B: 01101010110001011111000100101101; output Z: 01110000000001011111001000111111
# 
# dadda_mult: input A = -3.68474e+21, input B = -4.50011e+07, output OUT = 1.65817e+29
# dadda_mult: input A = 11100011010001111100000000000100, input B = 11001100001010111010101001101111, output OUT = 01110000000001011111001000111111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011001110111101111001001011011, input B: 11000111000101101011110001000010; output Z: 01110000000001011111001000111111
# FPU_mult: WAIT
# -- input A: 01011001110111101111001001011011, input B: 11000111000101101011110001000010; output Z: 01110000000001011111001000111111
# FPU_mult: SEND
# -- input A: 01011001110111101111001001011011, input B: 11000111000101101011110001000010; output Z: 11110110110000110001101000000011
# 
# dadda_mult: input A = -1.65365e+07, input B = 1.19649e+26, output OUT = -1.97857e+33
# dadda_mult: input A = 11001011011111000101001110001101, input B = 01101010110001011111000100101101, output OUT = 11110110110000110001101000000011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110011011001101001100000110001, input B: 11001000110000100001001101010011; output Z: 11110110110000110001101000000011
# FPU_mult: WAIT
# -- input A: 11110011011001101001100000110001, input B: 11001000110000100001001101010011; output Z: 11110110110000110001101000000011
# FPU_mult: SEND
# -- input A: 11110011011001101001100000110001, input B: 11001000110000100001001101010011; output Z: 11100001100000110100010111110101
# 
# dadda_mult: input A = 7.84424e+15, input B = -38588.3, output OUT = -3.02696e+20
# dadda_mult: input A = 01011001110111101111001001011011, input B = 11000111000101101011110001000010, output OUT = 11100001100000110100010111110101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011011100100101010000110010001, input B: 01110011110100101110010100100111; output Z: 11100001100000110100010111110101
# FPU_mult: WAIT
# -- input A: 11011011100100101010000110010001, input B: 01110011110100101110010100100111; output Z: 11100001100000110100010111110101
# FPU_mult: SEND
# -- input A: 11011011100100101010000110010001, input B: 01110011110100101110010100100111; output Z: 01111100101011101101000010111101
# 
# dadda_mult: input A = -1.82696e+31, input B = -397467, output OUT = 7.26155e+36
# dadda_mult: input A = 11110011011001101001100000110001, input B = 11001000110000100001001101010011, output OUT = 01111100101011101101000010111101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101111110011101111001100110111, input B: 11101000000101011111100010100011; output Z: 01111100101011101101000010111101
# FPU_mult: WAIT
# -- input A: 11101111110011101111001100110111, input B: 11101000000101011111100010100011; output Z: 01111100101011101101000010111101
# FPU_mult: SEND
# -- input A: 11101111110011101111001100110111, input B: 11101000000101011111100010100011; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = -8.2546e+16, input B = 3.34177e+31, output OUT = -inf
# dadda_mult: input A = 11011011100100101010000110010001, input B = 01110011110100101110010100100111, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110011101110000000011010111001, input B: 01111100100010000000100010100110; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10110011101110000000011010111001, input B: 01111100100010000000100010100110; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10110011101110000000011010111001, input B: 01111100100010000000100010100110; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -1.28096e+29, input B = -2.83288e+24, output OUT = inf
# dadda_mult: input A = 11101111110011101111001100110111, input B = 11101000000101011111100010100011, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100100011011110110111000111110, input B: 11001111110111111011000110000100; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11100100011011110110111000111110, input B: 11001111110111111011000110000100; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11100100011011110110111000111110, input B: 11001111110111111011000110000100; output Z: 11110000110000111001001110010100
# 
# dadda_mult: input A = -8.56939e-08, input B = 5.65062e+36, output OUT = -4.84224e+29
# dadda_mult: input A = 10110011101110000000011010111001, input B = 01111100100010000000100010100110, output OUT = 11110000110000111001001110010100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001000001111110110111000001111, input B: 11101111100001001001001101010110; output Z: 11110000110000111001001110010100
# FPU_mult: WAIT
# -- input A: 00001000001111110110111000001111, input B: 11101111100001001001001101010110; output Z: 11110000110000111001001110010100
# FPU_mult: SEND
# -- input A: 00001000001111110110111000001111, input B: 11101111100001001001001101010110; output Z: 01110100110100010011011100001111
# 
# dadda_mult: input A = -1.76669e+22, input B = -7.50591e+09, output OUT = 1.32606e+32
# dadda_mult: input A = 11100100011011110110111000111110, input B = 11001111110111111011000110000100, output OUT = 01110100110100010011011100001111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111001000000100011110001011010, input B: 10010001100001111011100010010001; output Z: 01110100110100010011011100001111
# FPU_mult: WAIT
# -- input A: 10111001000000100011110001011010, input B: 10010001100001111011100010010001; output Z: 01110100110100010011011100001111
# FPU_mult: SEND
# -- input A: 10111001000000100011110001011010, input B: 10010001100001111011100010010001; output Z: 10111000010001100100010111011000
# 
# dadda_mult: input A = 5.76063e-34, input B = -8.20603e+28, output OUT = -4.72719e-05
# dadda_mult: input A = 00001000001111110110111000001111, input B = 11101111100001001001001101010110, output OUT = 10111000010001100100010111011000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100011000000010101111000011100, input B: 00111010101101110111111111101111; output Z: 10111000010001100100010111011000
# FPU_mult: WAIT
# -- input A: 01100011000000010101111000011100, input B: 00111010101101110111111111101111; output Z: 10111000010001100100010111011000
# FPU_mult: SEND
# -- input A: 01100011000000010101111000011100, input B: 00111010101101110111111111101111; output Z: 00001011000010100001011101110001
# 
# dadda_mult: input A = -0.000124202, input B = -2.1413e-28, output OUT = 2.65955e-32
# dadda_mult: input A = 10111001000000100011110001011010, input B = 10010001100001111011100010010001, output OUT = 00001011000010100001011101110001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10010011100101111111101010101001, input B: 01001110000001110100101110011101; output Z: 00001011000010100001011101110001
# FPU_mult: WAIT
# -- input A: 10010011100101111111101010101001, input B: 01001110000001110100101110011101; output Z: 00001011000010100001011101110001
# FPU_mult: SEND
# -- input A: 10010011100101111111101010101001, input B: 01001110000001110100101110011101; output Z: 01011110001110010111010111011001
# 
# dadda_mult: input A = 2.38641e+21, input B = 0.00139999, output OUT = 3.34096e+18
# dadda_mult: input A = 01100011000000010101111000011100, input B = 00111010101101110111111111101111, output OUT = 01011110001110010111010111011001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011000001011111000011101111101, input B: 11101010100100100010111101100011; output Z: 01011110001110010111010111011001
# FPU_mult: WAIT
# -- input A: 11011000001011111000011101111101, input B: 11101010100100100010111101100011; output Z: 01011110001110010111010111011001
# FPU_mult: SEND
# -- input A: 11011000001011111000011101111101, input B: 11101010100100100010111101100011; output Z: 10100010001000001010010000100110
# 
# dadda_mult: input A = -3.83649e-27, input B = 5.6747e+08, output OUT = -2.17709e-18
# dadda_mult: input A = 10010011100101111111101010101001, input B = 01001110000001110100101110011101, output OUT = 10100010001000001010010000100110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001111000101001100110010010101, input B: 00100111101111010100000110110010; output Z: 10100010001000001010010000100110
# FPU_mult: WAIT
# -- input A: 11001111000101001100110010010101, input B: 00100111101111010100000110110010; output Z: 10100010001000001010010000100110
# FPU_mult: SEND
# -- input A: 11001111000101001100110010010101, input B: 00100111101111010100000110110010; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -7.71986e+14, input B = -8.83635e+25, output OUT = inf
# dadda_mult: input A = 11011000001011111000011101111101, input B = 11101010100100100010111101100011, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010111011111110001000001110011, input B: 01100110001100100011001010111110; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 00010111011111110001000001110011, input B: 01100110001100100011001010111110; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 00010111011111110001000001110011, input B: 01100110001100100011001010111110; output Z: 10110111010111000000001001110011
# 
# dadda_mult: input A = -2.49644e+09, input B = 5.25293e-15, output OUT = -1.31136e-05
# dadda_mult: input A = 11001111000101001100110010010101, input B = 00100111101111010100000110110010, output OUT = 10110111010111000000001001110011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000001000001110100011010000111, input B: 11110100110111011111000010010001; output Z: 10110111010111000000001001110011
# FPU_mult: WAIT
# -- input A: 01000001000001110100011010000111, input B: 11110100110111011111000010010001; output Z: 10110111010111000000001001110011
# FPU_mult: SEND
# -- input A: 01000001000001110100011010000111, input B: 11110100110111011111000010010001; output Z: 00111110001100011000101111111110
# 
# dadda_mult: input A = 8.24157e-25, input B = 2.10379e+23, output OUT = 0.173386
# dadda_mult: input A = 00010111011111110001000001110011, input B = 01100110001100100011001010111110, output OUT = 00111110001100011000101111111110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100010111100110111000100010101, input B: 00000100111010011110000000111010; output Z: 00111110001100011000101111111110
# FPU_mult: WAIT
# -- input A: 10100010111100110111000100010101, input B: 00000100111010011110000000111010; output Z: 00111110001100011000101111111110
# FPU_mult: SEND
# -- input A: 10100010111100110111000100010101, input B: 00000100111010011110000000111010; output Z: 11110110011010101000111000000011
# 
# dadda_mult: input A = 8.45472, input B = -1.40671e+32, output OUT = -1.18933e+33
# dadda_mult: input A = 01000001000001110100011010000111, input B = 11110100110111011111000010010001, output OUT = 11110110011010101000111000000011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001010100000001111000100111100, input B: 01010001000000111001100101111010; output Z: 11110110011010101000111000000011
# FPU_mult: WAIT
# -- input A: 00001010100000001111000100111100, input B: 01010001000000111001100101111010; output Z: 11110110011010101000111000000011
# FPU_mult: SEND
# -- input A: 00001010100000001111000100111100, input B: 01010001000000111001100101111010; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -6.5985e-18, input B = 5.4984e-36, output OUT = -0
# dadda_mult: input A = 10100010111100110111000100010101, input B = 00000100111010011110000000111010, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110101101011010101111010011000, input B: 11101111111100001110010100010111; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01110101101011010101111010011000, input B: 11101111111100001110010100010111; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01110101101011010101111010011000, input B: 11101111111100001110010100010111; output Z: 00011100000001001001000101111111
# 
# dadda_mult: input A = 1.24167e-32, input B = 3.5326e+10, output OUT = 4.38632e-22
# dadda_mult: input A = 00001010100000001111000100111100, input B = 01010001000000111001100101111010, output OUT = 00011100000001001001000101111111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000001010111000101001111011010, input B: 00101100000010110100001110101110; output Z: 00011100000001001001000101111111
# FPU_mult: WAIT
# -- input A: 11000001010111000101001111011010, input B: 00101100000010110100001110101110; output Z: 00011100000001001001000101111111
# FPU_mult: SEND
# -- input A: 11000001010111000101001111011010, input B: 00101100000010110100001110101110; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 4.39544e+32, input B = -1.49107e+29, output OUT = -inf
# dadda_mult: input A = 01110101101011010101111010011000, input B = 11101111111100001110010100010111, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011011110011110011100110100010, input B: 01001101110110000011101010000101; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10011011110011110011100110100010, input B: 01001101110110000011101010000101; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10011011110011110011100110100010, input B: 01001101110110000011101010000101; output Z: 10101101111011111011011110001110
# 
# dadda_mult: input A = -13.7705, input B = 1.97907e-12, output OUT = -2.72527e-11
# dadda_mult: input A = 11000001010111000101001111011010, input B = 00101100000010110100001110101110, output OUT = 10101101111011111011011110001110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001111111011011110011100101000, input B: 11101110010101000101111101001100; output Z: 10101101111011111011011110001110
# FPU_mult: WAIT
# -- input A: 01001111111011011110011100101000, input B: 11101110010101000101111101001100; output Z: 10101101111011111011011110001110
# FPU_mult: SEND
# -- input A: 01001111111011011110011100101000, input B: 11101110010101000101111101001100; output Z: 10101010001011110000011111111111
# 
# dadda_mult: input A = -3.42825e-22, input B = 4.53464e+08, output OUT = -1.55459e-13
# dadda_mult: input A = 10011011110011110011100110100010, input B = 01001101110110000011101010000101, output OUT = 10101010001011110000011111111111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101011101010111000100111011111, input B: 00110101111111110110110100111100; output Z: 10101010001011110000011111111111
# FPU_mult: WAIT
# -- input A: 00101011101010111000100111011111, input B: 00110101111111110110110100111100; output Z: 10101010001011110000011111111111
# FPU_mult: SEND
# -- input A: 00101011101010111000100111011111, input B: 00110101111111110110110100111100; output Z: 11111110110001010101101111111101
# 
# dadda_mult: input A = 7.9827e+09, input B = -1.64315e+28, output OUT = -1.31168e+38
# dadda_mult: input A = 01001111111011011110011100101000, input B = 11101110010101000101111101001100, output OUT = 11111110110001010101101111111101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001000100001110111000011011111, input B: 11111000101010011011110011000110; output Z: 11111110110001010101101111111101
# FPU_mult: WAIT
# -- input A: 00001000100001110111000011011111, input B: 11111000101010011011110011000110; output Z: 11111110110001010101101111111101
# FPU_mult: SEND
# -- input A: 00001000100001110111000011011111, input B: 11111000101010011011110011000110; output Z: 00100010001010110010011110000111
# 
# dadda_mult: input A = 1.21885e-12, input B = 1.90308e-06, output OUT = 2.31957e-18
# dadda_mult: input A = 00101011101010111000100111011111, input B = 00110101111111110110110100111100, output OUT = 00100010001010110010011110000111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010001100111100000101100100100, input B: 01101000111011110110001110001000; output Z: 00100010001010110010011110000111
# FPU_mult: WAIT
# -- input A: 01010001100111100000101100100100, input B: 01101000111011110110001110001000; output Z: 00100010001010110010011110000111
# FPU_mult: SEND
# -- input A: 01010001100111100000101100100100, input B: 01101000111011110110001110001000; output Z: 11000001101100111001101011000110
# 
# dadda_mult: input A = 8.15155e-34, input B = -2.75415e+34, output OUT = -22.4506
# dadda_mult: input A = 00001000100001110111000011011111, input B = 11111000101010011011110011000110, output OUT = 11000001101100111001101011000110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010000000101000111100100000000, input B: 11101010001011100110101001111111; output Z: 11000001101100111001101011000110
# FPU_mult: WAIT
# -- input A: 01010000000101000111100100000000, input B: 11101010001011100110101001111111; output Z: 11000001101100111001101011000110
# FPU_mult: SEND
# -- input A: 01010000000101000111100100000000, input B: 11101010001011100110101001111111; output Z: 01111011000100111100100111011001
# 
# dadda_mult: input A = 8.4849e+10, input B = 9.04385e+24, output OUT = 7.67362e+35
# dadda_mult: input A = 01010001100111100000101100100100, input B = 01101000111011110110001110001000, output OUT = 01111011000100111100100111011001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111011101001100001111110111011, input B: 10101101001011100100000111101001; output Z: 01111011000100111100100111011001
# FPU_mult: WAIT
# -- input A: 00111011101001100001111110111011, input B: 10101101001011100100000111101001; output Z: 01111011000100111100100111011001
# FPU_mult: SEND
# -- input A: 00111011101001100001111110111011, input B: 10101101001011100100000111101001; output Z: 11111010110010100101000000000100
# 
# dadda_mult: input A = 9.96383e+09, input B = -5.2714e+25, output OUT = -5.25233e+35
# dadda_mult: input A = 01010000000101000111100100000000, input B = 11101010001011100110101001111111, output OUT = 11111010110010100101000000000100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100101111010000011101110010001, input B: 10011011010000010110100111001100; output Z: 11111010110010100101000000000100
# FPU_mult: WAIT
# -- input A: 10100101111010000011101110010001, input B: 10011011010000010110100111001100; output Z: 11111010110010100101000000000100
# FPU_mult: SEND
# -- input A: 10100101111010000011101110010001, input B: 10011011010000010110100111001100; output Z: 10101001011000100010100010101101
# 
# dadda_mult: input A = 0.0050697, input B = -9.90539e-12, output OUT = -5.02174e-14
# dadda_mult: input A = 00111011101001100001111110111011, input B = 10101101001011100100000111101001, output OUT = 10101001011000100010100010101101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010111011100101110100111000001, input B: 01011011000000011011000101011100; output Z: 10101001011000100010100010101101
# FPU_mult: WAIT
# -- input A: 00010111011100101110100111000001, input B: 01011011000000011011000101011100; output Z: 10101001011000100010100010101101
# FPU_mult: SEND
# -- input A: 00010111011100101110100111000001, input B: 01011011000000011011000101011100; output Z: 00000001101011110111010011100010
# 
# dadda_mult: input A = -4.02859e-16, input B = -1.59988e-22, output OUT = 6.44526e-38
# dadda_mult: input A = 10100101111010000011101110010001, input B = 10011011010000010110100111001100, output OUT = 00000001101011110111010011100010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010100101000101111101110111000, input B: 10101010011100011010001000001110; output Z: 00000001101011110111010011100010
# FPU_mult: WAIT
# -- input A: 01010100101000101111101110111000, input B: 10101010011100011010001000001110; output Z: 00000001101011110111010011100010
# FPU_mult: SEND
# -- input A: 01010100101000101111101110111000, input B: 10101010011100011010001000001110; output Z: 00110010111101100010000000101010
# 
# dadda_mult: input A = 7.84895e-25, input B = 3.65053e+16, output OUT = 2.86528e-08
# dadda_mult: input A = 00010111011100101110100111000001, input B = 01011011000000011011000101011100, output OUT = 00110010111101100010000000101010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110110000011010000110001101110, input B: 11010011001011000010010100011101; output Z: 00110010111101100010000000101010
# FPU_mult: WAIT
# -- input A: 11110110000011010000110001101110, input B: 11010011001011000010010100011101; output Z: 00110010111101100010000000101010
# FPU_mult: SEND
# -- input A: 11110110000011010000110001101110, input B: 11010011001011000010010100011101; output Z: 10111111100110011101011000100100
# 
# dadda_mult: input A = 5.60006e+12, input B = -2.14613e-13, output OUT = -1.20185
# dadda_mult: input A = 01010100101000101111101110111000, input B = 10101010011100011010001000001110, output OUT = 10111111100110011101011000100100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101110001000010011010111101110, input B: 11010000011101110010010011110101; output Z: 10111111100110011101011000100100
# FPU_mult: WAIT
# -- input A: 10101110001000010011010111101110, input B: 11010000011101110010010011110101; output Z: 10111111100110011101011000100100
# FPU_mult: SEND
# -- input A: 10101110001000010011010111101110, input B: 11010000011101110010010011110101; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -7.15201e+32, input B = -7.39357e+11, output OUT = inf
# dadda_mult: input A = 11110110000011010000110001101110, input B = 11010011001011000010010100011101, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010011011001110110000100000010, input B: 00111011100000110010000011110000; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 00010011011001110110000100000010, input B: 00111011100000110010000011110000; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 00010011011001110110000100000010, input B: 00111011100000110010000011110000; output Z: 00111111000110111010001001001111
# 
# dadda_mult: input A = -3.66551e-11, input B = -1.65856e+10, output OUT = 0.607945
# dadda_mult: input A = 10101110001000010011010111101110, input B = 11010000011101110010010011110101, output OUT = 00111111000110111010001001001111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101010110011100110001100011100, input B: 10110001111110111010000000100000; output Z: 00111111000110111010001001001111
# FPU_mult: WAIT
# -- input A: 00101010110011100110001100011100, input B: 10110001111110111010000000100000; output Z: 00111111000110111010001001001111
# FPU_mult: SEND
# -- input A: 00101010110011100110001100011100, input B: 10110001111110111010000000100000; output Z: 00001111011011010000100011010010
# 
# dadda_mult: input A = 2.92041e-27, input B = 0.00400173, output OUT = 1.16867e-29
# dadda_mult: input A = 00010011011001110110000100000010, input B = 00111011100000110010000011110000, output OUT = 00001111011011010000100011010010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00011100111011111111111101010111, input B: 00010111001010010111010111110001; output Z: 00001111011011010000100011010010
# FPU_mult: WAIT
# -- input A: 00011100111011111111111101010111, input B: 00010111001010010111010111110001; output Z: 00001111011011010000100011010010
# FPU_mult: SEND
# -- input A: 00011100111011111111111101010111, input B: 00010111001010010111010111110001; output Z: 10011101010010101101110001000100
# 
# dadda_mult: input A = 3.66617e-13, input B = -7.32327e-09, output OUT = -2.68484e-21
# dadda_mult: input A = 00101010110011100110001100011100, input B = 10110001111110111010000000100000, output OUT = 10011101010010101101110001000100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010100010000110001111100010010, input B: 00011010000001011001000100100011; output Z: 10011101010010101101110001000100
# FPU_mult: WAIT
# -- input A: 00010100010000110001111100010010, input B: 00011010000001011001000100100011; output Z: 10011101010010101101110001000100
# FPU_mult: SEND
# -- input A: 00010100010000110001111100010010, input B: 00011010000001011001000100100011; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = 1.58817e-21, input B = 5.47557e-25, output OUT = 0
# dadda_mult: input A = 00011100111011111111111101010111, input B = 00010111001010010111010111110001, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111001011110100010100101011101, input B: 00100000111110000100010100011111; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01111001011110100010100101011101, input B: 00100000111110000100010100011111; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01111001011110100010100101011101, input B: 00100000111110000100010100011111; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = 9.85111e-27, input B = 2.7621e-23, output OUT = 0
# dadda_mult: input A = 00010100010000110001111100010010, input B = 00011010000001011001000100100011, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101010101100110100100010000100, input B: 00011010110100100000111010100010; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00101010101100110100100010000100, input B: 00011010110100100000111010100010; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00101010101100110100100010000100, input B: 00011010110100100000111010100010; output Z: 01011010111100101001101110011110
# 
# dadda_mult: input A = 8.11821e+34, input B = 4.20586e-19, output OUT = 3.4144e+16
# dadda_mult: input A = 01111001011110100010100101011101, input B = 00100000111110000100010100011111, output OUT = 01011010111100101001101110011110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111101100110110101011100110011, input B: 10011011111011100001101100000111; output Z: 01011010111100101001101110011110
# FPU_mult: WAIT
# -- input A: 10111101100110110101011100110011, input B: 10011011111011100001101100000111; output Z: 01011010111100101001101110011110
# FPU_mult: SEND
# -- input A: 10111101100110110101011100110011, input B: 10011011111011100001101100000111; output Z: 00000110000100110001101110111100
# 
# dadda_mult: input A = 3.18471e-13, input B = 8.68776e-23, output OUT = 2.7668e-35
# dadda_mult: input A = 00101010101100110100100010000100, input B = 00011010110100100000111010100010, output OUT = 00000110000100110001101110111100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101100011111011001110110011011, input B: 01011110110010001101010001110000; output Z: 00000110000100110001101110111100
# FPU_mult: WAIT
# -- input A: 10101100011111011001110110011011, input B: 01011110110010001101010001110000; output Z: 00000110000100110001101110111100
# FPU_mult: SEND
# -- input A: 10101100011111011001110110011011, input B: 01011110110010001101010001110000; output Z: 00011010000100000111101101111000
# 
# dadda_mult: input A = -0.0758499, input B = -3.93913e-22, output OUT = 2.98782e-23
# dadda_mult: input A = 10111101100110110101011100110011, input B = 10011011111011100001101100000111, output OUT = 00011010000100000111101101111000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011101001110110010000000100001, input B: 10101111000010001111100111100111; output Z: 00011010000100000111101101111000
# FPU_mult: WAIT
# -- input A: 01011101001110110010000000100001, input B: 10101111000010001111100111100111; output Z: 00011010000100000111101101111000
# FPU_mult: SEND
# -- input A: 01011101001110110010000000100001, input B: 10101111000010001111100111100111; output Z: 11001011110001101111010110010111
# 
# dadda_mult: input A = -3.6041e-12, input B = 7.23566e+18, output OUT = -2.6078e+07
# dadda_mult: input A = 10101100011111011001110110011011, input B = 01011110110010001101010001110000, output OUT = 11001011110001101111010110010111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010010111101101010010100100100, input B: 01100111010010011001001110101100; output Z: 11001011110001101111010110010111
# FPU_mult: WAIT
# -- input A: 00010010111101101010010100100100, input B: 01100111010010011001001110101100; output Z: 11001011110001101111010110010111
# FPU_mult: SEND
# -- input A: 00010010111101101010010100100100, input B: 01100111010010011001001110101100; output Z: 11001100110010000011111101111001
# 
# dadda_mult: input A = 8.42738e+17, input B = -1.24579e-10, output OUT = -1.04988e+08
# dadda_mult: input A = 01011101001110110010000000100001, input B = 10101111000010001111100111100111, output OUT = 11001100110010000011111101111001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101000001111100000111101000110, input B: 11011010010010111110110101110011; output Z: 11001100110010000011111101111001
# FPU_mult: WAIT
# -- input A: 01101000001111100000111101000110, input B: 11011010010010111110110101110011; output Z: 11001100110010000011111101111001
# FPU_mult: SEND
# -- input A: 01101000001111100000111101000110, input B: 11011010010010111110110101110011; output Z: 00111010110000100011010111110000
# 
# dadda_mult: input A = 1.55655e-27, input B = 9.5192e+23, output OUT = 0.00148171
# dadda_mult: input A = 00010010111101101010010100100100, input B = 01100111010010011001001110101100, output OUT = 00111010110000100011010111110000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101111011100101010100101110110, input B: 10101011100000100111110101110100; output Z: 00111010110000100011010111110000
# FPU_mult: WAIT
# -- input A: 01101111011100101010100101110110, input B: 10101011100000100111110101110100; output Z: 00111010110000100011010111110000
# FPU_mult: SEND
# -- input A: 01101111011100101010100101110110, input B: 10101011100000100111110101110100; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 3.59013e+24, input B = -1.43501e+16, output OUT = -inf
# dadda_mult: input A = 01101000001111100000111101000110, input B = 11011010010010111110110101110011, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110100110100100100100001111000, input B: 10101001010001111010001001011101; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11110100110100100100100001111000, input B: 10101001010001111010001001011101; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11110100110100100100100001111000, input B: 10101001010001111010001001011101; output Z: 11011011011101110110000111110001
# 
# dadda_mult: input A = 7.51002e+28, input B = -9.27188e-13, output OUT = -6.9632e+16
# dadda_mult: input A = 01101111011100101010100101110110, input B = 10101011100000100111110101110100, output OUT = 11011011011101110110000111110001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111011101011101101000010111010, input B: 11001011100101001111011000011011; output Z: 11011011011101110110000111110001
# FPU_mult: WAIT
# -- input A: 10111011101011101101000010111010, input B: 11001011100101001111011000011011; output Z: 11011011011101110110000111110001
# FPU_mult: SEND
# -- input A: 10111011101011101101000010111010, input B: 11001011100101001111011000011011; output Z: 01011110101000111111101110110100
# 
# dadda_mult: input A = -1.33283e+32, input B = -4.43277e-14, output OUT = 5.90812e+18
# dadda_mult: input A = 11110100110100100100100001111000, input B = 10101001010001111010001001011101, output OUT = 01011110101000111111101110110100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011000011011111011111010100111, input B: 01100010000101010100111010100111; output Z: 01011110101000111111101110110100
# FPU_mult: WAIT
# -- input A: 10011000011011111011111010100111, input B: 01100010000101010100111010100111; output Z: 01011110101000111111101110110100
# FPU_mult: SEND
# -- input A: 10011000011011111011111010100111, input B: 01100010000101010100111010100111; output Z: 01000111110010110111000101110101
# 
# dadda_mult: input A = -0.00533494, input B = -1.95247e+07, output OUT = 104163
# dadda_mult: input A = 10111011101011101101000010111010, input B = 11001011100101001111011000011011, output OUT = 01000111110010110111000101110101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101110100100110110010010100010, input B: 10101110111011111101110110011111; output Z: 01000111110010110111000101110101
# FPU_mult: WAIT
# -- input A: 10101110100100110110010010100010, input B: 10101110111011111101110110011111; output Z: 01000111110010110111000101110101
# FPU_mult: SEND
# -- input A: 10101110100100110110010010100010, input B: 10101110111011111101110110011111; output Z: 10111011000010111101001110100000
# 
# dadda_mult: input A = -3.09863e-24, input B = 6.88558e+20, output OUT = -0.00213359
# dadda_mult: input A = 10011000011011111011111010100111, input B = 01100010000101010100111010100111, output OUT = 10111011000010111101001110100000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110100011010010011011001100110, input B: 01000010101111011110010100100100; output Z: 10111011000010111101001110100000
# FPU_mult: WAIT
# -- input A: 10110100011010010011011001100110, input B: 01000010101111011110010100100100; output Z: 10111011000010111101001110100000
# FPU_mult: SEND
# -- input A: 10110100011010010011011001100110, input B: 01000010101111011110010100100100; output Z: 00011110000010100001101010001101
# 
# dadda_mult: input A = -6.70266e-11, input B = -1.09078e-10, output OUT = 7.31115e-21
# dadda_mult: input A = 10101110100100110110010010100010, input B = 10101110111011111101110110011111, output OUT = 00011110000010100001101010001101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010101000001000111101011000100, input B: 10101010100101111110010101111100; output Z: 00011110000010100001101010001101
# FPU_mult: WAIT
# -- input A: 01010101000001000111101011000100, input B: 10101010100101111110010101111100; output Z: 00011110000010100001101010001101
# FPU_mult: SEND
# -- input A: 01010101000001000111101011000100, input B: 10101010100101111110010101111100; output Z: 10110111101011001111110111101000
# 
# dadda_mult: input A = -2.17196e-07, input B = 94.9475, output OUT = -2.06222e-05
# dadda_mult: input A = 10110100011010010011011001100110, input B = 01000010101111011110010100100100, output OUT = 10110111101011001111110111101000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010110101011101010011010110001, input B: 10000110011001010010110011101011; output Z: 10110111101011001111110111101000
# FPU_mult: WAIT
# -- input A: 00010110101011101010011010110001, input B: 10000110011001010010110011101011; output Z: 10110111101011001111110111101000
# FPU_mult: SEND
# -- input A: 00010110101011101010011010110001, input B: 10000110011001010010110011101011; output Z: 11000000000111010011011001010111
# 
# dadda_mult: input A = 9.10393e+12, input B = -2.69822e-13, output OUT = -2.45644
# dadda_mult: input A = 01010101000001000111101011000100, input B = 10101010100101111110010101111100, output OUT = 11000000000111010011011001010111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010010011001101010111100110111, input B: 10011100011010011010010001000000; output Z: 11000000000111010011011001010111
# FPU_mult: WAIT
# -- input A: 00010010011001101010111100110111, input B: 10011100011010011010010001000000; output Z: 11000000000111010011011001010111
# FPU_mult: SEND
# -- input A: 00010010011001101010111100110111, input B: 10011100011010011010010001000000; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 2.82164e-25, input B = -4.31031e-35, output OUT = -0
# dadda_mult: input A = 00010110101011101010011010110001, input B = 10000110011001010010110011101011, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110100001110001101111001000010, input B: 10011011101101011110111000010011; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11110100001110001101111001000010, input B: 10011011101101011110111000010011; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11110100001110001101111001000010, input B: 10011011101101011110111000010011; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 7.27912e-28, input B = -7.73055e-22, output OUT = -0
# dadda_mult: input A = 00010010011001101010111100110111, input B = 10011100011010011010010001000000, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010010101111101011110101011111, input B: 01001000111100001001000101110001; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01010010101111101011110101011111, input B: 01001000111100001001000101110001; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01010010101111101011110101011111, input B: 01001000111100001001000101110001; output Z: 01010000100000110110000100010001
# 
# dadda_mult: input A = -5.85871e+31, input B = -3.00978e-22, output OUT = 1.76334e+10
# dadda_mult: input A = 11110100001110001101111001000010, input B = 10011011101101011110111000010011, output OUT = 01010000100000110110000100010001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010111001000001111011001000000, input B: 01010001101111110110101000010110; output Z: 01010000100000110110000100010001
# FPU_mult: WAIT
# -- input A: 00010111001000001111011001000000, input B: 01010001101111110110101000010110; output Z: 01010000100000110110000100010001
# FPU_mult: SEND
# -- input A: 00010111001000001111011001000000, input B: 01010001101111110110101000010110; output Z: 01011100001100110011110111100111
# 
# dadda_mult: input A = 4.0961e+11, input B = 492684, output OUT = 2.01808e+17
# dadda_mult: input A = 01010010101111101011110101011111, input B = 01001000111100001001000101110001, output OUT = 01011100001100110011110111100111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010011010010101111000100110111, input B: 10010100100001110010101010001101; output Z: 01011100001100110011110111100111
# FPU_mult: WAIT
# -- input A: 01010011010010101111000100110111, input B: 10010100100001110010101010001101; output Z: 01011100001100110011110111100111
# FPU_mult: SEND
# -- input A: 01010011010010101111000100110111, input B: 10010100100001110010101010001101; output Z: 00101001011100001011010011011011
# 
# dadda_mult: input A = 5.20096e-25, input B = 1.02765e+11, output OUT = 5.34476e-14
# dadda_mult: input A = 00010111001000001111011001000000, input B = 01010001101111110110101000010110, output OUT = 00101001011100001011010011011011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111010110000000100001101111110, input B: 00101110001111001000110100010011; output Z: 00101001011100001011010011011011
# FPU_mult: WAIT
# -- input A: 01111010110000000100001101111110, input B: 00101110001111001000110100010011; output Z: 00101001011100001011010011011011
# FPU_mult: SEND
# -- input A: 01111010110000000100001101111110, input B: 00101110001111001000110100010011; output Z: 10101000010101100100110111011111
# 
# dadda_mult: input A = 8.7163e+11, input B = -1.36483e-26, output OUT = -1.18963e-14
# dadda_mult: input A = 01010011010010101111000100110111, input B = 10010100100001110010101010001101, output OUT = 10101000010101100100110111011111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000110000110111011101010001101, input B: 00101000111101100101010100000011; output Z: 10101000010101100100110111011111
# FPU_mult: WAIT
# -- input A: 11000110000110111011101010001101, input B: 00101000111101100101010100000011; output Z: 10101000010101100100110111011111
# FPU_mult: SEND
# -- input A: 11000110000110111011101010001101, input B: 00101000111101100101010100000011; output Z: 01101001100011011001101110000100
# 
# dadda_mult: input A = 4.99145e+35, input B = 4.28716e-11, output OUT = 2.13991e+25
# dadda_mult: input A = 01111010110000000100001101111110, input B = 00101110001111001000110100010011, output OUT = 01101001100011011001101110000100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001101100101110000001000010010, input B: 10101010011111100100101111010100; output Z: 01101001100011011001101110000100
# FPU_mult: WAIT
# -- input A: 01001101100101110000001000010010, input B: 10101010011111100100101111010100; output Z: 01101001100011011001101110000100
# FPU_mult: SEND
# -- input A: 01001101100101110000001000010010, input B: 10101010011111100100101111010100; output Z: 10101111100101011101100011111010
# 
# dadda_mult: input A = -9966.64, input B = 2.73484e-14, output OUT = -2.72571e-10
# dadda_mult: input A = 11000110000110111011101010001101, input B = 00101000111101100101010100000011, output OUT = 10101111100101011101100011111010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000010011111100001110010100010, input B: 01110011001111010100000101100101; output Z: 10101111100101011101100011111010
# FPU_mult: WAIT
# -- input A: 11000010011111100001110010100010, input B: 01110011001111010100000101100101; output Z: 10101111100101011101100011111010
# FPU_mult: SEND
# -- input A: 11000010011111100001110010100010, input B: 01110011001111010100000101100101; output Z: 10111000100101100000000011001001
# 
# dadda_mult: input A = 3.16687e+08, input B = -2.2586e-13, output OUT = -7.1527e-05
# dadda_mult: input A = 01001101100101110000001000010010, input B = 10101010011111100100101111010100, output OUT = 10111000100101100000000011001001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111110001111110111101010011010, input B: 10111100111100011010001101000010; output Z: 10111000100101100000000011001001
# FPU_mult: WAIT
# -- input A: 10111110001111110111101010011010, input B: 10111100111100011010001101000010; output Z: 10111000100101100000000011001001
# FPU_mult: SEND
# -- input A: 10111110001111110111101010011010, input B: 10111100111100011010001101000010; output Z: 11110110001110111101110000001101
# 
# dadda_mult: input A = -63.528, input B = 1.49944e+31, output OUT = -9.52561e+32
# dadda_mult: input A = 11000010011111100001110010100010, input B = 01110011001111010100000101100101, output OUT = 11110110001110111101110000001101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011100011111110110000010111111, input B: 10110101010111011001111011100111; output Z: 11110110001110111101110000001101
# FPU_mult: WAIT
# -- input A: 10011100011111110110000010111111, input B: 10110101010111011001111011100111; output Z: 11110110001110111101110000001101
# FPU_mult: SEND
# -- input A: 10011100011111110110000010111111, input B: 10110101010111011001111011100111; output Z: 00111011101101001011110010000111
# 
# dadda_mult: input A = -0.186991, input B = -0.0294968, output OUT = 0.00551564
# dadda_mult: input A = 10111110001111110111101010011010, input B = 10111100111100011010001101000010, output OUT = 00111011101101001011110010000111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101100110000100000100000000010, input B: 11101000101111101111010000000110; output Z: 00111011101101001011110010000111
# FPU_mult: WAIT
# -- input A: 10101100110000100000100000000010, input B: 11101000101111101111010000000110; output Z: 00111011101101001011110010000111
# FPU_mult: SEND
# -- input A: 10101100110000100000100000000010, input B: 11101000101111101111010000000110; output Z: 00010010010111010001010100001001
# 
# dadda_mult: input A = -8.44975e-22, input B = -8.25601e-07, output OUT = 6.97612e-28
# dadda_mult: input A = 10011100011111110110000010111111, input B = 10110101010111011001111011100111, output OUT = 00010010010111010001010100001001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111111000111101101110111110101, input B: 10000000101001111011110010110010; output Z: 00010010010111010001010100001001
# FPU_mult: WAIT
# -- input A: 10111111000111101101110111110101, input B: 10000000101001111011110010110010; output Z: 00010010010111010001010100001001
# FPU_mult: SEND
# -- input A: 10111111000111101101110111110101, input B: 10000000101001111011110010110010; output Z: 01010110000100001011101011100110
# 
# dadda_mult: input A = -5.5147e-12, input B = -7.21401e+24, output OUT = 3.97831e+13
# dadda_mult: input A = 10101100110000100000100000000010, input B = 11101000101111101111010000000110, output OUT = 01010110000100001011101011100110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011100011101010110010100001101, input B: 00110100001011010010010111111001; output Z: 01010110000100001011101011100110
# FPU_mult: WAIT
# -- input A: 01011100011101010110010100001101, input B: 00110100001011010010010111111001; output Z: 01010110000100001011101011100110
# FPU_mult: SEND
# -- input A: 01011100011101010110010100001101, input B: 00110100001011010010010111111001; output Z: 00000000010100000010111111001001
# 
# dadda_mult: input A = -0.620574, input B = -1.54042e-38, output OUT = 7.36398e-39
# dadda_mult: input A = 10111111000111101101110111110101, input B = 10000000101001111011110010110010, output OUT = 00000000010100000010111111001001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010001110001100110101011010001, input B: 10010111101110101001101111110001; output Z: 00000000010100000010111111001001
# FPU_mult: WAIT
# -- input A: 11010001110001100110101011010001, input B: 10010111101110101001101111110001; output Z: 00000000010100000010111111001001
# FPU_mult: SEND
# -- input A: 11010001110001100110101011010001, input B: 10010111101110101001101111110001; output Z: 01010001001001011111100110110000
# 
# dadda_mult: input A = 2.7629e+17, input B = 1.61257e-07, output OUT = 4.45537e+10
# dadda_mult: input A = 01011100011101010110010100001101, input B = 00110100001011010010010111111001, output OUT = 01010001001001011111100110110000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010100101110000110110011111110, input B: 01100101001000010111100011000110; output Z: 01010001001001011111100110110000
# FPU_mult: WAIT
# -- input A: 00010100101110000110110011111110, input B: 01100101001000010111100011000110; output Z: 01010001001001011111100110110000
# FPU_mult: SEND
# -- input A: 00010100101110000110110011111110, input B: 01100101001000010111100011000110; output Z: 00101010000100001010001001111001
# 
# dadda_mult: input A = -1.06524e+11, input B = -1.20593e-24, output OUT = 1.28461e-13
# dadda_mult: input A = 11010001110001100110101011010001, input B = 10010111101110101001101111110001, output OUT = 00101010000100001010001001111001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110100001000101011010110110110, input B: 10001110111101011111000101011111; output Z: 00101010000100001010001001111001
# FPU_mult: WAIT
# -- input A: 01110100001000101011010110110110, input B: 10001110111101011111000101011111; output Z: 00101010000100001010001001111001
# FPU_mult: SEND
# -- input A: 01110100001000101011010110110110, input B: 10001110111101011111000101011111; output Z: 00111010011010001010011100011011
# 
# dadda_mult: input A = 1.86222e-26, input B = 4.76581e+22, output OUT = 0.0008875
# dadda_mult: input A = 00010100101110000110110011111110, input B = 01100101001000010111100011000110, output OUT = 00111010011010001010011100011011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101001011011000011100100100010, input B: 10000110111110111001010111111011; output Z: 00111010011010001010011100011011
# FPU_mult: WAIT
# -- input A: 00101001011011000011100100100010, input B: 10000110111110111001010111111011; output Z: 00111010011010001010011100011011
# FPU_mult: SEND
# -- input A: 00101001011011000011100100100010, input B: 10000110111110111001010111111011; output Z: 11000011100111000101000101010001
# 
# dadda_mult: input A = 5.15648e+31, input B = -6.06296e-30, output OUT = -312.635
# dadda_mult: input A = 01110100001000101011010110110110, input B = 10001110111101011111000101011111, output OUT = 11000011100111000101000101010001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101110000011000111010011001011, input B: 01100001100100001111110110110010; output Z: 11000011100111000101000101010001
# FPU_mult: WAIT
# -- input A: 10101110000011000111010011001011, input B: 01100001100100001111110110110010; output Z: 11000011100111000101000101010001
# FPU_mult: SEND
# -- input A: 10101110000011000111010011001011, input B: 01100001100100001111110110110010; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 5.24521e-14, input B = -9.46361e-35, output OUT = -0
# dadda_mult: input A = 00101001011011000011100100100010, input B = 10000110111110111001010111111011, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101101111100011100000100001000, input B: 10111001011000111000110001111011; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11101101111100011100000100001000, input B: 10111001011000111000110001111011; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11101101111100011100000100001000, input B: 10111001011000111000110001111011; output Z: 11010000000111110001100111000111
# 
# dadda_mult: input A = -3.1936e-11, input B = 3.34326e+20, output OUT = -1.06771e+10
# dadda_mult: input A = 10101110000011000111010011001011, input B = 01100001100100001111110110110010, output OUT = 11010000000111110001100111000111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000101000110111111010011110101, input B: 11110001110001011111001011101001; output Z: 11010000000111110001100111000111
# FPU_mult: WAIT
# -- input A: 01000101000110111111010011110101, input B: 11110001110001011111001011101001; output Z: 11010000000111110001100111000111
# FPU_mult: SEND
# -- input A: 01000101000110111111010011110101, input B: 11110001110001011111001011101001; output Z: 01100111110101101110001011010100
# 
# dadda_mult: input A = -9.35241e+27, input B = -0.000217007, output OUT = 2.02954e+24
# dadda_mult: input A = 11101101111100011100000100001000, input B = 10111001011000111000110001111011, output OUT = 01100111110101101110001011010100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111001100101001111111010000011, input B: 00110010110100001111111100111111; output Z: 01100111110101101110001011010100
# FPU_mult: WAIT
# -- input A: 10111001100101001111111010000011, input B: 00110010110100001111111100111111; output Z: 01100111110101101110001011010100
# FPU_mult: SEND
# -- input A: 10111001100101001111111010000011, input B: 00110010110100001111111100111111; output Z: 11110111011100010010111011111000
# 
# dadda_mult: input A = 2495.31, input B = -1.96039e+30, output OUT = -4.89178e+33
# dadda_mult: input A = 01000101000110111111010011110101, input B = 11110001110001011111001011101001, output OUT = 11110111011100010010111011111000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010101000000100110011111100100, input B: 01101101110001000111010100011010; output Z: 11110111011100010010111011111000
# FPU_mult: WAIT
# -- input A: 11010101000000100110011111100100, input B: 01101101110001000111010100011010; output Z: 11110111011100010010111011111000
# FPU_mult: SEND
# -- input A: 11010101000000100110011111100100, input B: 01101101110001000111010100011010; output Z: 10101100111100110100011010110001
# 
# dadda_mult: input A = -0.000284184, input B = 2.43305e-08, output OUT = -6.91432e-12
# dadda_mult: input A = 10111001100101001111111010000011, input B = 00110010110100001111111100111111, output OUT = 10101100111100110100011010110001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100111111100010110000101000110, input B: 01011100000011101001000001100001; output Z: 10101100111100110100011010110001
# FPU_mult: WAIT
# -- input A: 11100111111100010110000101000110, input B: 01011100000011101001000001100001; output Z: 10101100111100110100011010110001
# FPU_mult: SEND
# -- input A: 11100111111100010110000101000110, input B: 01011100000011101001000001100001; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = -8.96142e+12, input B = 7.60008e+27, output OUT = -inf
# dadda_mult: input A = 11010101000000100110011111100100, input B = 01101101110001000111010100011010, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10010010100000000110111011111101, input B: 11010010111001111100100011011100; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10010010100000000110111011111101, input B: 11010010111001111100100011011100; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10010010100000000110111011111101, input B: 11010010111001111100100011011100; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = -2.27977e+24, input B = 1.60513e+17, output OUT = -inf
# dadda_mult: input A = 11100111111100010110000101000110, input B = 01011100000011101001000001100001, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100100011101101001000001001010, input B: 10100110000010001010011001110100; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10100100011101101001000001001010, input B: 10100110000010001010011001110100; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10100100011101101001000001001010, input B: 10100110000010001010011001110100; output Z: 00100101111010001001000111010111
# 
# dadda_mult: input A = -8.1053e-28, input B = -4.97754e+11, output OUT = 4.03444e-16
# dadda_mult: input A = 10010010100000000110111011111101, input B = 11010010111001111100100011011100, output OUT = 00100101111010001001000111010111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100001100001001101001011111011, input B: 10111010001011001000100001011011; output Z: 00100101111010001001000111010111
# FPU_mult: WAIT
# -- input A: 00100001100001001101001011111011, input B: 10111010001011001000100001011011; output Z: 00100101111010001001000111010111
# FPU_mult: SEND
# -- input A: 00100001100001001101001011111011, input B: 10111010001011001000100001011011; output Z: 00001011000000111001110011111001
# 
# dadda_mult: input A = -5.3465e-17, input B = -4.74101e-16, output OUT = 2.53478e-32
# dadda_mult: input A = 10100100011101101001000001001010, input B = 10100110000010001010011001110100, output OUT = 00001011000000111001110011111001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000010001111001010000011010001, input B: 00110010001100010010010010101110; output Z: 00001011000000111001110011111001
# FPU_mult: WAIT
# -- input A: 00000010001111001010000011010001, input B: 00110010001100010010010010101110; output Z: 00001011000000111001110011111001
# FPU_mult: SEND
# -- input A: 00000010001111001010000011010001, input B: 00110010001100010010010010101110; output Z: 10011100001100110000100100000000
# 
# dadda_mult: input A = 9.00051e-19, input B = -0.00065816, output OUT = -5.92378e-22
# dadda_mult: input A = 00100001100001001101001011111011, input B = 10111010001011001000100001011011, output OUT = 10011100001100110000100100000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111101100110001011010111011011, input B: 10111010010001011110011100011111; output Z: 10011100001100110000100100000000
# FPU_mult: WAIT
# -- input A: 01111101100110001011010111011011, input B: 10111010010001011110011100011111; output Z: 10011100001100110000100100000000
# FPU_mult: SEND
# -- input A: 01111101100110001011010111011011, input B: 10111010010001011110011100011111; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = 1.38582e-37, input B = 1.03111e-08, output OUT = 0
# dadda_mult: input A = 00000010001111001010000011010001, input B = 00110010001100010010010010101110, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111100100000000001101101010010, input B: 11111111001111010110100001111100; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01111100100000000001101101010010, input B: 11111111001111010110100001111100; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01111100100000000001101101010010, input B: 11111111001111010110100001111100; output Z: 11111000011011000001101110100000
# 
# dadda_mult: input A = 2.53734e+37, input B = -0.000754939, output OUT = -1.91553e+34
# dadda_mult: input A = 01111101100110001011010111011011, input B = 10111010010001011110011100011111, output OUT = 11111000011011000001101110100000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101101000001011100110111000011, input B: 00101111100000000010001101001101; output Z: 11111000011011000001101110100000
# FPU_mult: WAIT
# -- input A: 10101101000001011100110111000011, input B: 00101111100000000010001101001101; output Z: 11111000011011000001101110100000
# FPU_mult: SEND
# -- input A: 10101101000001011100110111000011, input B: 00101111100000000010001101001101; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 5.32134e+36, input B = -2.51767e+38, output OUT = -inf
# dadda_mult: input A = 01111100100000000001101101010010, input B = 11111111001111010110100001111100, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011100000000100101010001100011, input B: 00101100111100010100101101010011; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10011100000000100101010001100011, input B: 00101100111100010100101101010011; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10011100000000100101010001100011, input B: 00101100111100010100101101010011; output Z: 10011101000001011111001010101010
# 
# dadda_mult: input A = -7.60586e-12, input B = 2.33081e-10, output OUT = -1.77279e-21
# dadda_mult: input A = 10101101000001011100110111000011, input B = 00101111100000000010001101001101, output OUT = 10011101000001011111001010101010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011000000010111010010101000011, input B: 11010010011110010101011110100010; output Z: 10011101000001011111001010101010
# FPU_mult: WAIT
# -- input A: 01011000000010111010010101000011, input B: 11010010011110010101011110100010; output Z: 10011101000001011111001010101010
# FPU_mult: SEND
# -- input A: 01011000000010111010010101000011, input B: 11010010011110010101011110100010; output Z: 10001001011101011010111110010100
# 
# dadda_mult: input A = -4.31225e-22, input B = 6.85799e-12, output OUT = -2.95734e-33
# dadda_mult: input A = 10011100000000100101010001100011, input B = 00101100111100010100101101010011, output OUT = 10001001011101011010111110010100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000000101000000110110010000111, input B: 11001011010011001010011100000011; output Z: 10001001011101011010111110010100
# FPU_mult: WAIT
# -- input A: 11000000101000000110110010000111, input B: 11001011010011001010011100000011; output Z: 10001001011101011010111110010100
# FPU_mult: SEND
# -- input A: 11000000101000000110110010000111, input B: 11001011010011001010011100000011; output Z: 11101011000010000000001110001100
# 
# dadda_mult: input A = 6.14168e+14, input B = -2.67729e+11, output OUT = -1.64431e+26
# dadda_mult: input A = 01011000000010111010010101000011, input B = 11010010011110010101011110100010, output OUT = 11101011000010000000001110001100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10001010000000101110000111110010, input B: 10011001000100101010001111000100; output Z: 11101011000010000000001110001100
# FPU_mult: WAIT
# -- input A: 10001010000000101110000111110010, input B: 10011001000100101010001111000100; output Z: 11101011000010000000001110001100
# FPU_mult: SEND
# -- input A: 10001010000000101110000111110010, input B: 10011001000100101010001111000100; output Z: 01001100100000000011111100100100
# 
# dadda_mult: input A = -5.01325, input B = -1.34121e+07, output OUT = 6.72382e+07
# dadda_mult: input A = 11000000101000000110110010000111, input B = 11001011010011001010011100000011, output OUT = 01001100100000000011111100100100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010011001000111101010111000001, input B: 01111101100010100100011000110110; output Z: 01001100100000000011111100100100
# FPU_mult: WAIT
# -- input A: 01010011001000111101010111000001, input B: 01111101100010100100011000110110; output Z: 01001100100000000011111100100100
# FPU_mult: SEND
# -- input A: 01010011001000111101010111000001, input B: 01111101100010100100011000110110; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = -6.30177e-33, input B = -7.5811e-24, output OUT = 0
# dadda_mult: input A = 10001010000000101110000111110010, input B = 10011001000100101010001111000100, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010010001001111000011100111101, input B: 00011110001010100111111110101100; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01010010001001111000011100111101, input B: 00011110001010100111111110101100; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01010010001001111000011100111101, input B: 00011110001010100111111110101100; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 7.03666e+11, input B = 2.29748e+37, output OUT = inf
# dadda_mult: input A = 01010011001000111101010111000001, input B = 01111101100010100100011000110110, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110100110010111010100001100000, input B: 10111101001011100111010111011000; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11110100110010111010100001100000, input B: 10111101001011100111010111011000; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11110100110010111010100001100000, input B: 10111101001011100111010111011000; output Z: 00110000110111110010011010110110
# 
# dadda_mult: input A = 1.79882e+11, input B = 9.02613e-21, output OUT = 1.62364e-09
# dadda_mult: input A = 01010010001001111000011100111101, input B = 00011110001010100111111110101100, output OUT = 00110000110111110010011010110110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101101011111000001001100001100, input B: 01110011000100010001010010010110; output Z: 00110000110111110010011010110110
# FPU_mult: WAIT
# -- input A: 10101101011111000001001100001100, input B: 01110011000100010001010010010110; output Z: 00110000110111110010011010110110
# FPU_mult: SEND
# -- input A: 10101101011111000001001100001100, input B: 01110011000100010001010010010110; output Z: 01110010100010101100101000110001
# 
# dadda_mult: input A = -1.29083e+32, input B = -0.0425929, output OUT = 5.49803e+30
# dadda_mult: input A = 11110100110010111010100001100000, input B = 10111101001011100111010111011000, output OUT = 01110010100010101100101000110001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110011100000010010011001100001, input B: 01000101001111100011101101000011; output Z: 01110010100010101100101000110001
# FPU_mult: WAIT
# -- input A: 00110011100000010010011001100001, input B: 01000101001111100011101101000011; output Z: 01110010100010101100101000110001
# FPU_mult: SEND
# -- input A: 00110011100000010010011001100001, input B: 01000101001111100011101101000011; output Z: 11100001000011101101101100001111
# 
# dadda_mult: input A = -1.43288e-11, input B = 1.14945e+31, output OUT = -1.64701e+20
# dadda_mult: input A = 10101101011111000001001100001100, input B = 01110011000100010001010010010110, output OUT = 11100001000011101101101100001111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100101100000111010001101010010, input B: 10111100111000100111011011001111; output Z: 11100001000011101101101100001111
# FPU_mult: WAIT
# -- input A: 10100101100000111010001101010010, input B: 10111100111000100111011011001111; output Z: 11100001000011101101101100001111
# FPU_mult: SEND
# -- input A: 10100101100000111010001101010010, input B: 10111100111000100111011011001111; output Z: 00111001001111111111000011000011
# 
# dadda_mult: input A = 6.01401e-08, input B = 3043.7, output OUT = 0.000183049
# dadda_mult: input A = 00110011100000010010011001100001, input B = 01000101001111100011101101000011, output OUT = 00111001001111111111000011000011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000010100100010010111001111110, input B: 00011111001111011010001000011000; output Z: 00111001001111111111000011000011
# FPU_mult: WAIT
# -- input A: 10000010100100010010111001111110, input B: 00011111001111011010001000011000; output Z: 00111001001111111111000011000011
# FPU_mult: SEND
# -- input A: 10000010100100010010111001111110, input B: 00011111001111011010001000011000; output Z: 00100010111010001110011010001100
# 
# dadda_mult: input A = -2.28355e-16, input B = -0.0276445, output OUT = 6.31278e-18
# dadda_mult: input A = 10100101100000111010001101010010, input B = 10111100111000100111011011001111, output OUT = 00100010111010001110011010001100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111111000101011110100010001101, input B: 01110101011100100000100101101101; output Z: 00100010111010001110011010001100
# FPU_mult: WAIT
# -- input A: 01111111000101011110100010001101, input B: 01110101011100100000100101101101; output Z: 00100010111010001110011010001100
# FPU_mult: SEND
# -- input A: 01111111000101011110100010001101, input B: 01110101011100100000100101101101; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -2.13325e-37, input B = 4.01564e-20, output OUT = -0
# dadda_mult: input A = 10000010100100010010111001111110, input B = 00011111001111011010001000011000, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110110010110011001111001011001, input B: 10000111000010000010010100011011; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01110110010110011001111001011001, input B: 10000111000010000010010100011011; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01110110010110011001111001011001, input B: 10000111000010000010010100011011; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 1.99262e+38, input B = 3.06818e+32, output OUT = inf
# dadda_mult: input A = 01111111000101011110100010001101, input B = 01110101011100100000100101101101, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000010110011010011101111010110, input B: 00010011100011100010010110001001; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10000010110011010011101111010110, input B: 00010011100011100010010110001001; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10000010110011010011101111010110, input B: 00010011100011100010010110001001; output Z: 10111101111001110111011101010100
# 
# dadda_mult: input A = 1.10346e+33, input B = -1.02424e-34, output OUT = -0.113021
# dadda_mult: input A = 01110110010110011001111001011001, input B = 10000111000010000010010100011011, output OUT = 10111101111001110111011101010100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000010001111010000011001000011, input B: 10001000001000101001100011100000; output Z: 10111101111001110111011101010100
# FPU_mult: WAIT
# -- input A: 11000010001111010000011001000011, input B: 10001000001000101001100011100000; output Z: 10111101111001110111011101010100
# FPU_mult: SEND
# -- input A: 11000010001111010000011001000011, input B: 10001000001000101001100011100000; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -3.01564e-37, input B = 3.58829e-27, output OUT = -0
# dadda_mult: input A = 10000010110011010011101111010110, input B = 00010011100011100010010110001001, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011010100100110100000001101001, input B: 00000111001100001001000101101100; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 10011010100100110100000001101001, input B: 00000111001100001001000101101100; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 10011010100100110100000001101001, input B: 00000111001100001001000101101100; output Z: 00001010111100000001110110101111
# 
# dadda_mult: input A = -47.2561, input B = -4.89298e-34, output OUT = 2.31223e-32
# dadda_mult: input A = 11000010001111010000011001000011, input B = 10001000001000101001100011100000, output OUT = 00001010111100000001110110101111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111000110011110011000000000110, input B: 00011100110111000111011111111111; output Z: 00001010111100000001110110101111
# FPU_mult: WAIT
# -- input A: 00111000110011110011000000000110, input B: 00011100110111000111011111111111; output Z: 00001010111100000001110110101111
# FPU_mult: SEND
# -- input A: 00111000110011110011000000000110, input B: 00011100110111000111011111111111; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -6.09018e-23, input B = 1.32835e-34, output OUT = -0
# dadda_mult: input A = 10011010100100110100000001101001, input B = 00000111001100001001000101101100, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101011001100011000100111101100, input B: 11000011011101101100011110010011; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01101011001100011000100111101100, input B: 11000011011101101100011110010011; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01101011001100011000100111101100, input B: 11000011011101101100011110010011; output Z: 00010110001100100110111001100011
# 
# dadda_mult: input A = 9.87947e-05, input B = 1.45894e-21, output OUT = 1.44136e-25
# dadda_mult: input A = 00111000110011110011000000000110, input B = 00011100110111000111011111111111, output OUT = 00010110001100100110111001100011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00011001100100101011010010010100, input B: 00000111101110101110101000101001; output Z: 00010110001100100110111001100011
# FPU_mult: WAIT
# -- input A: 00011001100100101011010010010100, input B: 00000111101110101110101000101001; output Z: 00010110001100100110111001100011
# FPU_mult: SEND
# -- input A: 00011001100100101011010010010100, input B: 00000111101110101110101000101001; output Z: 11101111001010110010010011110001
# 
# dadda_mult: input A = 2.14631e+26, input B = -246.78, output OUT = -5.29666e+28
# dadda_mult: input A = 01101011001100011000100111101100, input B = 11000011011101101100011110010011, output OUT = 11101111001010110010010011110001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10001101000011011110001000001111, input B: 00001111111011111001010011000001; output Z: 11101111001010110010010011110001
# FPU_mult: WAIT
# -- input A: 10001101000011011110001000001111, input B: 00001111111011111001010011000001; output Z: 11101111001010110010010011110001
# FPU_mult: SEND
# -- input A: 10001101000011011110001000001111, input B: 00001111111011111001010011000001; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = 1.5169e-23, input B = 2.81238e-34, output OUT = 0
# dadda_mult: input A = 00011001100100101011010010010100, input B = 00000111101110101110101000101001, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110101100110001011010001110011, input B: 00110010010010000110000101111101; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11110101100110001011010001110011, input B: 00110010010010000110000101111101; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11110101100110001011010001110011, input B: 00110010010010000110000101111101; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -4.37211e-31, input B = 2.36245e-29, output OUT = -0
# dadda_mult: input A = 10001101000011011110001000001111, input B = 00001111111011111001010011000001, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101111101101100000000011011101, input B: 01111001011100101111100000000011; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 10101111101101100000000011011101, input B: 01111001011100101111100000000011; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 10101111101101100000000011011101, input B: 01111001011100101111100000000011; output Z: 11101000011011110000111001000010
# 
# dadda_mult: input A = -3.87153e+32, input B = 1.16637e-08, output OUT = -4.51563e+24
# dadda_mult: input A = 11110101100110001011010001110011, input B = 00110010010010000110000101111101, output OUT = 11101000011011110000111001000010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111101010111101110100001010011, input B: 01001100001001011110011000011001; output Z: 11101000011011110000111001000010
# FPU_mult: WAIT
# -- input A: 01111101010111101110100001010011, input B: 01001100001001011110011000011001; output Z: 11101000011011110000111001000010
# FPU_mult: SEND
# -- input A: 01111101010111101110100001010011, input B: 01001100001001011110011000011001; output Z: 11101001101011001011110100100100
# 
# dadda_mult: input A = -3.31062e-10, input B = 7.88479e+34, output OUT = -2.61036e+25
# dadda_mult: input A = 10101111101101100000000011011101, input B = 01111001011100101111100000000011, output OUT = 11101001101011001011110100100100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000110101101001101001000110111, input B: 10111100010110100110110111001100; output Z: 11101001101011001011110100100100
# FPU_mult: WAIT
# -- input A: 11000110101101001101001000110111, input B: 10111100010110100110110111001100; output Z: 11101001101011001011110100100100
# FPU_mult: SEND
# -- input A: 11000110101101001101001000110111, input B: 10111100010110100110110111001100; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 1.85184e+37, input B = 4.34894e+07, output OUT = inf
# dadda_mult: input A = 01111101010111101110100001010011, input B = 01001100001001011110011000011001, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100110011000110000000110010110, input B: 11110000100001111101110010011001; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11100110011000110000000110010110, input B: 11110000100001111101110010011001; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11100110011000110000000110010110, input B: 11110000100001111101110010011001; output Z: 01000011100110100100100010010000
# 
# dadda_mult: input A = -23145.1, input B = -0.0133318, output OUT = 308.567
# dadda_mult: input A = 11000110101101001101001000110111, input B = 10111100010110100110110111001100, output OUT = 01000011100110100100100010010000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100110000110000001110001111011, input B: 01000001111011011110001010101111; output Z: 01000011100110100100100010010000
# FPU_mult: WAIT
# -- input A: 10100110000110000001110001111011, input B: 01000001111011011110001010101111; output Z: 01000011100110100100100010010000
# FPU_mult: SEND
# -- input A: 10100110000110000001110001111011, input B: 01000001111011011110001010101111; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -2.68002e+23, input B = -3.36377e+29, output OUT = inf
# dadda_mult: input A = 11100110011000110000000110010110, input B = 11110000100001111101110010011001, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110110101010101111110100001100, input B: 11000011001001000100100010100010; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10110110101010101111110100001100, input B: 11000011001001000100100010100010; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10110110101010101111110100001100, input B: 11000011001001000100100010100010; output Z: 10101000100011010101100100001111
# 
# dadda_mult: input A = -5.27742e-16, input B = 29.7357, output OUT = -1.56928e-14
# dadda_mult: input A = 10100110000110000001110001111011, input B = 01000001111011011110001010101111, output OUT = 10101000100011010101100100001111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000101001011001001011001101010, input B: 00101001001110100001111100100110; output Z: 10101000100011010101100100001111
# FPU_mult: WAIT
# -- input A: 10000101001011001001011001101010, input B: 00101001001110100001111100100110; output Z: 10101000100011010101100100001111
# FPU_mult: SEND
# -- input A: 10000101001011001001011001101010, input B: 00101001001110100001111100100110; output Z: 00111010010110110111010100111110
# 
# dadda_mult: input A = -5.09585e-06, input B = -164.284, output OUT = 0.000837166
# dadda_mult: input A = 10110110101010101111110100001100, input B = 11000011001001000100100010100010, output OUT = 00111010010110110111010100111110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000010010100101001010100010010, input B: 00001000011000010110111001011000; output Z: 00111010010110110111010100111110
# FPU_mult: WAIT
# -- input A: 10000010010100101001010100010010, input B: 00001000011000010110111001011000; output Z: 00111010010110110111010100111110
# FPU_mult: SEND
# -- input A: 10000010010100101001010100010010, input B: 00001000011000010110111001011000; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -8.11503e-36, input B = 4.13273e-14, output OUT = -0
# dadda_mult: input A = 10000101001011001001011001101010, input B = 00101001001110100001111100100110, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100010000010001100001011100101, input B: 01010000001100100111010110000011; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00100010000010001100001011100101, input B: 01010000001100100111010110000011; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00100010000010001100001011100101, input B: 01010000001100100111010110000011; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -1.54711e-37, input B = 6.78382e-34, output OUT = -0
# dadda_mult: input A = 10000010010100101001010100010010, input B = 00001000011000010110111001011000, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111001110001001001001000011110, input B: 00101110001111100010001110000110; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 10111001110001001001001000011110, input B: 00101110001111100010001110000110; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 10111001110001001001001000011110, input B: 00101110001111100010001110000110; output Z: 00110010101111101010110010010101
# 
# dadda_mult: input A = 1.85346e-18, input B = 1.19762e+10, output OUT = 2.21974e-08
# dadda_mult: input A = 00100010000010001100001011100101, input B = 01010000001100100111010110000011, output OUT = 00110010101111101010110010010101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101110101110100111110111010110, input B: 11101011111010111110010011001011; output Z: 00110010101111101010110010010101
# FPU_mult: WAIT
# -- input A: 11101110101110100111110111010110, input B: 11101011111010111110010011001011; output Z: 00110010101111101010110010010101
# FPU_mult: SEND
# -- input A: 11101110101110100111110111010110, input B: 11101011111010111110010011001011; output Z: 10101000100100011111111110111001
# 
# dadda_mult: input A = -0.000374929, input B = 4.32325e-11, output OUT = -1.62091e-14
# dadda_mult: input A = 10111001110001001001001000011110, input B = 00101110001111100010001110000110, output OUT = 10101000100100011111111110111001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000010111001111110100010001000, input B: 11001010111001110010001110010101; output Z: 10101000100100011111111110111001
# FPU_mult: WAIT
# -- input A: 11000010111001111110100010001000, input B: 11001010111001110010001110010101; output Z: 10101000100100011111111110111001
# FPU_mult: SEND
# -- input A: 11000010111001111110100010001000, input B: 11001010111001110010001110010101; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -2.88582e+28, input B = -5.70356e+26, output OUT = inf
# dadda_mult: input A = 11101110101110100111110111010110, input B = 11101011111010111110010011001011, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111111110101111011111101000101, input B: 10000111110110010000101100100110; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 01111111110101111011111101000101, input B: 10000111110110010000101100100110; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 01111111110101111011111101000101, input B: 10000111110110010000101100100110; output Z: 01001110010100010110001100001110
# 
# dadda_mult: input A = -115.954, input B = -7.57396e+06, output OUT = 8.78232e+08
# dadda_mult: input A = 11000010111001111110100010001000, input B = 11001010111001110010001110010101, output OUT = 01001110010100010110001100001110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001010000101110001111100011011, input B: 00101011101110001011001110100111; output Z: 01001110010100010110001100001110
# FPU_mult: WAIT
# -- input A: 00001010000101110001111100011011, input B: 00101011101110001011001110100111; output Z: 01001110010100010110001100001110
# FPU_mult: SEND
# -- input A: 00001010000101110001111100011011, input B: 00101011101110001011001110100111; output Z: 11111111110000000000000000000000
# 
# dadda_mult: input A = nan, input B = -3.26571e-34, output OUT = -nan
# dadda_mult: input A = 01111111110101111011111101000101, input B = 10000111110110010000101100100110, output OUT = 11111111110000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101100111001011111101111110000, input B: 11000001111100101101010110011000; output Z: 11111111110000000000000000000000
# FPU_mult: WAIT
# -- input A: 00101100111001011111101111110000, input B: 11000001111100101101010110011000; output Z: 11111111110000000000000000000000
# FPU_mult: SEND
# -- input A: 00101100111001011111101111110000, input B: 11000001111100101101010110011000; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = 7.27624e-33, input B = 1.31238e-12, output OUT = 0
# dadda_mult: input A = 00001010000101110001111100011011, input B = 00101011101110001011001110100111, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111111100110101010111011010011, input B: 01001111101000001101000001011000; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01111111100110101010111011010011, input B: 01001111101000001101000001011000; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01111111100110101010111011010011, input B: 01001111101000001101000001011000; output Z: 10101111010110100010100000001100
# 
# dadda_mult: input A = 6.53654e-12, input B = -30.3543, output OUT = -1.98412e-10
# dadda_mult: input A = 00101100111001011111101111110000, input B = 11000001111100101101010110011000, output OUT = 10101111010110100010100000001100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001000010100100100111110011100, input B: 01000101000111011101110100010010; output Z: 10101111010110100010100000001100
# FPU_mult: WAIT
# -- input A: 00001000010100100100111110011100, input B: 01000101000111011101110100010010; output Z: 10101111010110100010100000001100
# FPU_mult: SEND
# -- input A: 00001000010100100100111110011100, input B: 01000101000111011101110100010010; output Z: 01111111110000000000000000000000
# 
# dadda_mult: input A = nan, input B = 5.39602e+09, output OUT = nan
# dadda_mult: input A = 01111111100110101010111011010011, input B = 01001111101000001101000001011000, output OUT = 01111111110000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001100001100100010001110111101, input B: 11000100100001001100001100001011; output Z: 01111111110000000000000000000000
# FPU_mult: WAIT
# -- input A: 00001100001100100010001110111101, input B: 11000100100001001100001100001011; output Z: 01111111110000000000000000000000
# FPU_mult: SEND
# -- input A: 00001100001100100010001110111101, input B: 11000100100001001100001100001011; output Z: 00001110000000011011000001110000
# 
# dadda_mult: input A = 6.32882e-34, input B = 2525.82, output OUT = 1.59854e-30
# dadda_mult: input A = 00001000010100100100111110011100, input B = 01000101000111011101110100010010, output OUT = 00001110000000011011000001110000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101011110101111010011001100100, input B: 01011000001011000100000001101100; output Z: 00001110000000011011000001110000
# FPU_mult: WAIT
# -- input A: 00101011110101111010011001100100, input B: 01011000001011000100000001101100; output Z: 00001110000000011011000001110000
# FPU_mult: SEND
# -- input A: 00101011110101111010011001100100, input B: 01011000001011000100000001101100; output Z: 10010001001110001100010001001101
# 
# dadda_mult: input A = 1.37234e-31, input B = -1062.1, output OUT = -1.45755e-28
# dadda_mult: input A = 00001100001100100010001110111101, input B = 11000100100001001100001100001011, output OUT = 10010001001110001100010001001101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001000010100110011100100011010, input B: 11011011111010110101010001000010; output Z: 10010001001110001100010001001101
# FPU_mult: WAIT
# -- input A: 11001000010100110011100100011010, input B: 11011011111010110101010001000010; output Z: 10010001001110001100010001001101
# FPU_mult: SEND
# -- input A: 11001000010100110011100100011010, input B: 11011011111010110101010001000010; output Z: 01000100100100010001101000010000
# 
# dadda_mult: input A = 1.53229e-12, input B = 7.57571e+14, output OUT = 1160.81
# dadda_mult: input A = 00101011110101111010011001100100, input B = 01011000001011000100000001101100, output OUT = 01000100100100010001101000010000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100111010010000110010101110000, input B: 00001011001000001000010011001100; output Z: 01000100100100010001101000010000
# FPU_mult: WAIT
# -- input A: 00100111010010000110010101110000, input B: 00001011001000001000010011001100; output Z: 01000100100100010001101000010000
# FPU_mult: SEND
# -- input A: 00100111010010000110010101110000, input B: 00001011001000001000010011001100; output Z: 01100100110000100010101011110000
# 
# dadda_mult: input A = -216292, input B = -1.32479e+17, output OUT = 2.86541e+22
# dadda_mult: input A = 11001000010100110011100100011010, input B = 11011011111010110101010001000010, output OUT = 01100100110000100010101011110000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000001000101011101000010010111, input B: 01001010101011100110111010010110; output Z: 01100100110000100010101011110000
# FPU_mult: WAIT
# -- input A: 10000001000101011101000010010111, input B: 01001010101011100110111010010110; output Z: 01100100110000100010101011110000
# FPU_mult: SEND
# -- input A: 10000001000101011101000010010111, input B: 01001010101011100110111010010110; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = 2.78106e-15, input B = 3.09148e-32, output OUT = 0
# dadda_mult: input A = 00100111010010000110010101110000, input B = 00001011001000001000010011001100, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000011000110110010000100000010, input B: 10010000100110110011111101100100; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 10000011000110110010000100000010, input B: 10010000100110110011111101100100; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 10000011000110110010000100000010, input B: 10010000100110110011111101100100; output Z: 10001100010011000010100011111100
# 
# dadda_mult: input A = -2.75166e-38, input B = 5.71579e+06, output OUT = -1.57279e-31
# dadda_mult: input A = 10000001000101011101000010010111, input B = 01001010101011100110111010010110, output OUT = 10001100010011000010100011111100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111111100101101011011100001011, input B: 01101001001100111100010000101110; output Z: 10001100010011000010100011111100
# FPU_mult: WAIT
# -- input A: 00111111100101101011011100001011, input B: 01101001001100111100010000101110; output Z: 10001100010011000010100011111100
# FPU_mult: SEND
# -- input A: 00111111100101101011011100001011, input B: 01101001001100111100010000101110; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = -4.55883e-37, input B = -6.12344e-29, output OUT = 0
# dadda_mult: input A = 10000011000110110010000100000010, input B = 10010000100110110011111101100100, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110001001011110001001100010101, input B: 11111110011110101110111011111010; output Z: 00000000000000000000000000000000
run 3 u
# Invalid time value: 3 u
run 3u
# Invalid time value: 3u
run 3 us
# FPU_mult: WAIT
# -- input A: 01110001001011110001001100010101, input B: 11111110011110101110111011111010; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01110001001011110001001100010101, input B: 11111110011110101110111011111010; output Z: 01101001010100111010101011111000
# 
# dadda_mult: input A = 1.17746, input B = 1.35828e+25, output OUT = 1.59932e+25
# dadda_mult: input A = 00111111100101101011011100001011, input B = 01101001001100111100010000101110, output OUT = 01101001010100111010101011111000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001010100111011111000101001101, input B: 10001001110000000101000110000010; output Z: 01101001010100111010101011111000
# FPU_mult: WAIT
# -- input A: 01001010100111011111000101001101, input B: 10001001110000000101000110000010; output Z: 01101001010100111010101011111000
# FPU_mult: SEND
# -- input A: 01001010100111011111000101001101, input B: 10001001110000000101000110000010; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 8.66927e+29, input B = -8.3387e+37, output OUT = -inf
# dadda_mult: input A = 01110001001011110001001100010101, input B = 11111110011110101110111011111010, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001001101110111010110111101110, input B: 00011111000101011111000101011001; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 01001001101110111010110111101110, input B: 00011111000101011111000101011001; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 01001001101110111010110111101110, input B: 00011111000101011111000101011001; output Z: 10010100111011010100111010000111
# 
# dadda_mult: input A = 5.17546e+06, input B = -4.6299e-33, output OUT = -2.39619e-26
# dadda_mult: input A = 01001010100111011111000101001101, input B = 10001001110000000101000110000010, output OUT = 10010100111011010100111010000111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111110101101110010000010101111, input B: 10011000011011000010110000111110; output Z: 10010100111011010100111010000111
# FPU_mult: WAIT
# -- input A: 01111110101101110010000010101111, input B: 10011000011011000010110000111110; output Z: 10010100111011010100111010000111
# FPU_mult: SEND
# -- input A: 01111110101101110010000010101111, input B: 10011000011011000010110000111110; output Z: 00101001010110111101101001010111
# 
# dadda_mult: input A = 1.53747e+06, input B = 3.17516e-20, output OUT = 4.88171e-14
# dadda_mult: input A = 01001001101110111010110111101110, input B = 00011111000101011111000101011001, output OUT = 00101001010110111101101001010111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100100110101001010111110001010, input B: 00010100001110010001111001000001; output Z: 00101001010110111101101001010111
# FPU_mult: WAIT
# -- input A: 10100100110101001010111110001010, input B: 00010100001110010001111001000001; output Z: 00101001010110111101101001010111
# FPU_mult: SEND
# -- input A: 10100100110101001010111110001010, input B: 00010100001110010001111001000001; output Z: 11010111101010001111000111000111
# 
# dadda_mult: input A = 1.21709e+38, input B = -3.05246e-24, output OUT = -3.71513e+14
# dadda_mult: input A = 01111110101101110010000010101111, input B = 10011000011011000010110000111110, output OUT = 11010111101010001111000111000111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010010110001000000100101100110, input B: 01111011001010111110110010000111; output Z: 11010111101010001111000111000111
# FPU_mult: WAIT
# -- input A: 00010010110001000000100101100110, input B: 01111011001010111110110010000111; output Z: 11010111101010001111000111000111
# FPU_mult: SEND
# -- input A: 00010010110001000000100101100110, input B: 01111011001010111110110010000111; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -9.22377e-17, input B = 9.34608e-27, output OUT = -0
# dadda_mult: input A = 10100100110101001010111110001010, input B = 00010100001110010001111001000001, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00011011100101000010001101111001, input B: 00110000011101111001011000101001; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00011011100101000010001101111001, input B: 00110000011101111001011000101001; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00011011100101000010001101111001, input B: 00110000011101111001011000101001; output Z: 01001110100000111010011101100111
# 
# dadda_mult: input A = 1.23717e-27, input B = 8.9268e+35, output OUT = 1.10439e+09
# dadda_mult: input A = 00010010110001000000100101100110, input B = 01111011001010111110110010000111, output OUT = 01001110100000111010011101100111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001000011110111101111001001100, input B: 01110101011000100110101101001000; output Z: 01001110100000111010011101100111
# FPU_mult: WAIT
# -- input A: 11001000011110111101111001001100, input B: 01110101011000100110101101001000; output Z: 01001110100000111010011101100111
# FPU_mult: SEND
# -- input A: 11001000011110111101111001001100, input B: 01110101011000100110101101001000; output Z: 00001100100011110100010100011110
# 
# dadda_mult: input A = 2.45075e-22, input B = 9.00715e-10, output OUT = 2.20742e-31
# dadda_mult: input A = 00011011100101000010001101111001, input B = 00110000011101111001011000101001, output OUT = 00001100100011110100010100011110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001111010000101100011101100001, input B: 00110011001110100111110111000011; output Z: 00001100100011110100010100011110
# FPU_mult: WAIT
# -- input A: 01001111010000101100011101100001, input B: 00110011001110100111110111000011; output Z: 00001100100011110100010100011110
# FPU_mult: SEND
# -- input A: 01001111010000101100011101100001, input B: 00110011001110100111110111000011; output Z: 11111110010111101100001111001100
# 
# dadda_mult: input A = -257913, input B = 2.8702e+32, output OUT = -7.40263e+37
# dadda_mult: input A = 11001000011110111101111001001100, input B = 01110101011000100110101101001000, output OUT = 11111110010111101100001111001100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110101101010110101110001100000, input B: 10100001111000010110110000001000; output Z: 11111110010111101100001111001100
# FPU_mult: WAIT
# -- input A: 11110101101010110101110001100000, input B: 10100001111000010110110000001000; output Z: 11111110010111101100001111001100
# FPU_mult: SEND
# -- input A: 11110101101010110101110001100000, input B: 10100001111000010110110000001000; output Z: 01000011000011011110010010001100
# 
# dadda_mult: input A = 3.26785e+09, input B = 4.34209e-08, output OUT = 141.893
# dadda_mult: input A = 01001111010000101100011101100001, input B = 00110011001110100111110111000011, output OUT = 01000011000011011110010010001100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100000010110011001011111011100, input B: 00010001110010010100101000101000; output Z: 01000011000011011110010010001100
# FPU_mult: WAIT
# -- input A: 11100000010110011001011111011100, input B: 00010001110010010100101000101000; output Z: 01000011000011011110010010001100
# FPU_mult: SEND
# -- input A: 11100000010110011001011111011100, input B: 00010001110010010100101000101000; output Z: 01011000000101101110010010000001
# 
# dadda_mult: input A = -4.34451e+32, input B = -1.52752e-18, output OUT = 6.63633e+14
# dadda_mult: input A = 11110101101010110101110001100000, input B = 10100001111000010110110000001000, output OUT = 01011000000101101110010010000001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000110110100001011110111111100, input B: 01100101011101010000111010100011; output Z: 01011000000101101110010010000001
# FPU_mult: WAIT
# -- input A: 01000110110100001011110111111100, input B: 01100101011101010000111010100011; output Z: 01011000000101101110010010000001
# FPU_mult: SEND
# -- input A: 01000110110100001011110111111100, input B: 01100101011101010000111010100011; output Z: 10110010101010110001011101000100
# 
# dadda_mult: input A = -6.2717e+19, input B = 3.17579e-28, output OUT = -1.99176e-08
# dadda_mult: input A = 11100000010110011001011111011100, input B = 00010001110010010100101000101000, output OUT = 10110010101010110001011101000100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000101010110000110101011100010, input B: 01110100110001000111010011101001; output Z: 10110010101010110001011101000100
# FPU_mult: WAIT
# -- input A: 10000101010110000110101011100010, input B: 01110100110001000111010011101001; output Z: 10110010101010110001011101000100
# FPU_mult: SEND
# -- input A: 10000101010110000110101011100010, input B: 01110100110001000111010011101001; output Z: 01101100110001111101000111000001
# 
# dadda_mult: input A = 26719, input B = 7.23281e+22, output OUT = 1.93253e+27
# dadda_mult: input A = 01000110110100001011110111111100, input B = 01100101011101010000111010100011, output OUT = 01101100110001111101000111000001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111110001011011100010110111010, input B: 11100010111101000010001010001010; output Z: 01101100110001111101000111000001
# FPU_mult: WAIT
# -- input A: 01111110001011011100010110111010, input B: 11100010111101000010001010001010; output Z: 01101100110001111101000111000001
# FPU_mult: SEND
# -- input A: 01111110001011011100010110111010, input B: 11100010111101000010001010001010; output Z: 10111010101001100001010010101010
# 
# dadda_mult: input A = -1.01759e-35, input B = 1.24519e+32, output OUT = -0.0012671
# dadda_mult: input A = 10000101010110000110101011100010, input B = 01110100110001000111010011101001, output OUT = 10111010101001100001010010101010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110011000100011100100100101100, input B: 00101111011011111010011110001111; output Z: 10111010101001100001010010101010
# FPU_mult: WAIT
# -- input A: 00110011000100011100100100101100, input B: 00101111011011111010011110001111; output Z: 10111010101001100001010010101010
# FPU_mult: SEND
# -- input A: 00110011000100011100100100101100, input B: 00101111011011111010011110001111; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 5.77458e+37, input B = -2.25175e+21, output OUT = -inf
# dadda_mult: input A = 01111110001011011100010110111010, input B = 11100010111101000010001010001010, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001000000001001011011100010101, input B: 11011111001110010001100110101101; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11001000000001001011011100010101, input B: 11011111001110010001100110101101; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11001000000001001011011100010101, input B: 11011111001110010001100110101101; output Z: 00100011000010000111101000111100
# 
# dadda_mult: input A = 3.39434e-08, input B = 2.17965e-10, output OUT = 7.39846e-18
# dadda_mult: input A = 00110011000100011100100100101100, input B = 00101111011011111010011110001111, output OUT = 00100011000010000111101000111100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010000100101101001100110001111, input B: 10011011000001001110000100101001; output Z: 00100011000010000111101000111100
# FPU_mult: WAIT
# -- input A: 01010000100101101001100110001111, input B: 10011011000001001110000100101001; output Z: 00100011000010000111101000111100
# FPU_mult: SEND
# -- input A: 01010000100101101001100110001111, input B: 10011011000001001110000100101001; output Z: 01100111101111111110101100111011
# 
# dadda_mult: input A = -135900, input B = -1.33379e+19, output OUT = 1.81262e+24
# dadda_mult: input A = 11001000000001001011011100010101, input B = 11011111001110010001100110101101, output OUT = 01100111101111111110101100111011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011100010100110101011100010001, input B: 00011001011011101001001000010100; output Z: 01100111101111111110101100111011
# FPU_mult: WAIT
# -- input A: 11011100010100110101011100010001, input B: 00011001011011101001001000010100; output Z: 01100111101111111110101100111011
# FPU_mult: SEND
# -- input A: 11011100010100110101011100010001, input B: 00011001011011101001001000010100; output Z: 10101100000111000101011101000110
# 
# dadda_mult: input A = 2.02132e+10, input B = -1.09915e-22, output OUT = -2.22174e-12
# dadda_mult: input A = 01010000100101101001100110001111, input B = 10011011000001001110000100101001, output OUT = 10101100000111000101011101000110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011011100100010001101111011001, input B: 11100100110001011100111110010001; output Z: 10101100000111000101011101000110
# FPU_mult: WAIT
# -- input A: 11011011100100010001101111011001, input B: 11100100110001011100111110010001; output Z: 10101100000111000101011101000110
# FPU_mult: SEND
# -- input A: 11011011100100010001101111011001, input B: 11100100110001011100111110010001; output Z: 10110110010001001111001110001010
# 
# dadda_mult: input A = -2.37948e+17, input B = 1.23338e-23, output OUT = -2.9348e-06
# dadda_mult: input A = 11011100010100110101011100010001, input B = 00011001011011101001001000010100, output OUT = 10110110010001001111001110001010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10010000101111001101010101111100, input B: 01110000100001100101110111000010; output Z: 10110110010001001111001110001010
# FPU_mult: WAIT
# -- input A: 10010000101111001101010101111100, input B: 01110000100001100101110111000010; output Z: 10110110010001001111001110001010
# FPU_mult: SEND
# -- input A: 10010000101111001101010101111100, input B: 01110000100001100101110111000010; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -8.1689e+16, input B = -2.91917e+22, output OUT = inf
# dadda_mult: input A = 11011011100100010001101111011001, input B = 11100100110001011100111110010001, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010010110010110000000001101101, input B: 10110101001010011110011001101001; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11010010110010110000000001101101, input B: 10110101001010011110011001101001; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11010010110010110000000001101101, input B: 10110101001010011110011001101001; output Z: 11000001110001100011100111001111
# 
# dadda_mult: input A = -7.44818e-29, input B = 3.32675e+29, output OUT = -24.7782
# dadda_mult: input A = 10010000101111001101010101111100, input B = 01110000100001100101110111000010, output OUT = 11000001110001100011100111001111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010100100100001110101011101011, input B: 10010011000100010011111111101110; output Z: 11000001110001100011100111001111
# FPU_mult: WAIT
# -- input A: 00010100100100001110101011101011, input B: 10010011000100010011111111101110; output Z: 11000001110001100011100111001111
# FPU_mult: SEND
# -- input A: 00010100100100001110101011101011, input B: 10010011000100010011111111101110; output Z: 01001000100001101011100111111110
# 
# dadda_mult: input A = -4.35943e+11, input B = -6.32927e-07, output OUT = 275920
# dadda_mult: input A = 11010010110010110000000001101101, input B = 10110101001010011110011001101001, output OUT = 01001000100001101011100111111110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111010101001100110010111111001, input B: 01101110110100001011010010000101; output Z: 01001000100001101011100111111110
# FPU_mult: WAIT
# -- input A: 00111010101001100110010111111001, input B: 01101110110100001011010010000101; output Z: 01001000100001101011100111111110
# FPU_mult: SEND
# -- input A: 00111010101001100110010111111001, input B: 01101110110100001011010010000101; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 1.46329e-26, input B = -1.83331e-27, output OUT = -0
# dadda_mult: input A = 00010100100100001110101011101011, input B = 10010011000100010011111111101110, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101110110110001011100110000101, input B: 10011001001110001101101100011100; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01101110110110001011100110000101, input B: 10011001001110001101101100011100; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01101110110110001011100110000101, input B: 10011001001110001101101100011100; output Z: 01101010000001111010100000110000
# 
# dadda_mult: input A = 0.00126952, input B = 3.22956e+28, output OUT = 4.09998e+25
# dadda_mult: input A = 00111010101001100110010111111001, input B = 01101110110100001011010010000101, output OUT = 01101010000001111010100000110000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10001000100101001101101011011100, input B: 00100011000010000110100111100001; output Z: 01101010000001111010100000110000
# FPU_mult: WAIT
# -- input A: 10001000100101001101101011011100, input B: 00100011000010000110100111100001; output Z: 01101010000001111010100000110000
# FPU_mult: SEND
# -- input A: 10001000100101001101101011011100, input B: 00100011000010000110100111100001; output Z: 11001000100111000111111011010110
# 
# dadda_mult: input A = 3.35365e+28, input B = -9.55683e-24, output OUT = -320503
# dadda_mult: input A = 01101110110110001011100110000101, input B = 10011001001110001101101100011100, output OUT = 11001000100111000111111011010110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110110101100100110100101011011, input B: 10000100001010101111011010000110; output Z: 11001000100111000111111011010110
# FPU_mult: WAIT
# -- input A: 11110110101100100110100101011011, input B: 10000100001010101111011010000110; output Z: 11001000100111000111111011010110
# FPU_mult: SEND
# -- input A: 11110110101100100110100101011011, input B: 10000100001010101111011010000110; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -8.95888e-34, input B = 7.395e-18, output OUT = -0
# dadda_mult: input A = 10001000100101001101101011011100, input B = 00100011000010000110100111100001, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001011110101001100000011101001, input B: 11111101000101010010011100110111; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01001011110101001100000011101001, input B: 11111101000101010010011100110111; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01001011110101001100000011101001, input B: 11111101000101010010011100110111; output Z: 00111011011011100100101110001010
# 
# dadda_mult: input A = -1.80931e+33, input B = -2.00966e-36, output OUT = 0.00363609
# dadda_mult: input A = 11110110101100100110100101011011, input B = 10000100001010101111011010000110, output OUT = 00111011011011100100101110001010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001000011010000111100011011010, input B: 00111001100101001100101110010111; output Z: 00111011011011100100101110001010
# FPU_mult: WAIT
# -- input A: 00001000011010000111100011011010, input B: 00111001100101001100101110010111; output Z: 00111011011011100100101110001010
# FPU_mult: SEND
# -- input A: 00001000011010000111100011011010, input B: 00111001100101001100101110010111; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 2.7886e+07, input B = -1.23912e+37, output OUT = -inf
# dadda_mult: input A = 01001011110101001100000011101001, input B = 11111101000101010010011100110111, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110001110111000000010110011110, input B: 00110100101001100110111011010100; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10110001110111000000010110011110, input B: 00110100101001100110111011010100; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10110001110111000000010110011110, input B: 00110100101001100110111011010100; output Z: 00000010100001110001111010111111
# 
# dadda_mult: input A = 6.9957e-34, input B = 0.000283804, output OUT = 1.98541e-37
# dadda_mult: input A = 00001000011010000111100011011010, input B = 00111001100101001100101110010111, output OUT = 00000010100001110001111010111111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111111011101101001100011101101, input B: 10101111111100110100000011110100; output Z: 00000010100001110001111010111111
# FPU_mult: WAIT
# -- input A: 00111111011101101001100011101101, input B: 10101111111100110100000011110100; output Z: 00000010100001110001111010111111
# FPU_mult: SEND
# -- input A: 00111111011101101001100011101101, input B: 10101111111100110100000011110100; output Z: 10100111000011110000101011100101
# 
# dadda_mult: input A = -6.40348e-09, input B = 3.10005e-07, output OUT = -1.98511e-15
# dadda_mult: input A = 10110001110111000000010110011110, input B = 00110100101001100110111011010100, output OUT = 10100111000011110000101011100101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110001100100011000010111111111, input B: 01010101001100110111000000100011; output Z: 10100111000011110000101011100101
# FPU_mult: WAIT
# -- input A: 01110001100100011000010111111111, input B: 01010101001100110111000000100011; output Z: 10100111000011110000101011100101
# FPU_mult: SEND
# -- input A: 01110001100100011000010111111111, input B: 01010101001100110111000000100011; output Z: 10101111111010100101000110111010
# 
# dadda_mult: input A = 0.963271, input B = -4.42476e-10, output OUT = -4.26224e-10
# dadda_mult: input A = 00111111011101101001100011101101, input B = 10101111111100110100000011110100, output OUT = 10101111111010100101000110111010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111100000110101000011010000110, input B: 11011000100011101100111110110011; output Z: 10101111111010100101000110111010
# FPU_mult: WAIT
# -- input A: 10111100000110101000011010000110, input B: 11011000100011101100111110110011; output Z: 10101111111010100101000110111010
# FPU_mult: SEND
# -- input A: 10111100000110101000011010000110, input B: 11011000100011101100111110110011; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 1.44119e+30, input B = 1.23309e+13, output OUT = inf
# dadda_mult: input A = 01110001100100011000010111111111, input B = 01010101001100110111000000100011, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011010000000110001101111011110, input B: 01010011001001001100111011010100; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11011010000000110001101111011110, input B: 01010011001001001100111011010100; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11011010000000110001101111011110, input B: 01010011001001001100111011010100; output Z: 01010101001011000110011111111010
# 
# dadda_mult: input A = -0.00943149, input B = -1.25618e+15, output OUT = 1.18477e+13
# dadda_mult: input A = 10111100000110101000011010000110, input B = 11011000100011101100111110110011, output OUT = 01010101001011000110011111111010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011110100100001011100011111011, input B: 11000111011110110011110011001110; output Z: 01010101001011000110011111111010
# FPU_mult: WAIT
# -- input A: 10011110100100001011100011111011, input B: 11000111011110110011110011001110; output Z: 01010101001011000110011111111010
# FPU_mult: SEND
# -- input A: 10011110100100001011100011111011, input B: 11000111011110110011110011001110; output Z: 11101101101010001100111110001110
# 
# dadda_mult: input A = -9.22597e+15, input B = 7.07845e+11, output OUT = -6.53055e+27
# dadda_mult: input A = 11011010000000110001101111011110, input B = 01010011001001001100111011010100, output OUT = 11101101101010001100111110001110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10010000100100101000100110010101, input B: 11111110100011101010001101000001; output Z: 11101101101010001100111110001110
# FPU_mult: WAIT
# -- input A: 10010000100100101000100110010101, input B: 11111110100011101010001101000001; output Z: 11101101101010001100111110001110
# FPU_mult: SEND
# -- input A: 10010000100100101000100110010101, input B: 11111110100011101010001101000001; output Z: 00100110100011100000011110111110
# 
# dadda_mult: input A = -1.53231e-20, input B = -64316.8, output OUT = 9.85533e-16
# dadda_mult: input A = 10011110100100001011100011111011, input B = 11000111011110110011110011001110, output OUT = 00100110100011100000011110111110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011000001010000101101101111000, input B: 00110001010100000111010010000010; output Z: 00100110100011100000011110111110
# FPU_mult: WAIT
# -- input A: 11011000001010000101101101111000, input B: 00110001010100000111010010000010; output Z: 00100110100011100000011110111110
# FPU_mult: SEND
# -- input A: 11011000001010000101101101111000, input B: 00110001010100000111010010000010; output Z: 01001111101000110100101110000111
# 
# dadda_mult: input A = -5.77988e-29, input B = -9.4799e+37, output OUT = 5.47927e+09
# dadda_mult: input A = 10010000100100101000100110010101, input B = 11111110100011101010001101000001, output OUT = 01001111101000110100101110000111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010000010111011010010110001010, input B: 00010111100111100100101111001111; output Z: 01001111101000110100101110000111
# FPU_mult: WAIT
# -- input A: 11010000010111011010010110001010, input B: 00010111100111100100101111001111; output Z: 01001111101000110100101110000111
# FPU_mult: SEND
# -- input A: 11010000010111011010010110001010, input B: 00010111100111100100101111001111; output Z: 11001010000010010001011011110000
# 
# dadda_mult: input A = -7.40443e+14, input B = 3.03342e-09, output OUT = -2.24608e+06
# dadda_mult: input A = 11011000001010000101101101111000, input B = 00110001010100000111010010000010, output OUT = 11001010000010010001011011110000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000000101100110101001101000011, input B: 11100100010000010000110000101000; output Z: 11001010000010010001011011110000
# FPU_mult: WAIT
# -- input A: 00000000101100110101001101000011, input B: 11100100010000010000110000101000; output Z: 11001010000010010001011011110000
# FPU_mult: SEND
# -- input A: 00000000101100110101001101000011, input B: 11100100010000010000110000101000; output Z: 10101000100010010000110111001110
# 
# dadda_mult: input A = -1.48745e+10, input B = 1.02296e-24, output OUT = -1.5216e-14
# dadda_mult: input A = 11010000010111011010010110001010, input B = 00010111100111100100101111001111, output OUT = 10101000100010010000110111001110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010011101001011111111000110100, input B: 01101010010011010111001110110110; output Z: 10101000100010010000110111001110
# FPU_mult: WAIT
# -- input A: 11010011101001011111111000110100, input B: 01101010010011010111001110110110; output Z: 10101000100010010000110111001110
# FPU_mult: SEND
# -- input A: 11010011101001011111111000110100, input B: 01101010010011010111001110110110; output Z: 10100101100001110011101001001001
# 
# dadda_mult: input A = 1.64684e-38, input B = -1.42444e+22, output OUT = -2.34583e-16
# dadda_mult: input A = 00000000101100110101001101000011, input B = 11100100010000010000110000101000, output OUT = 10100101100001110011101001001001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110011111100111001001001101000, input B: 10011100011111101111111111100111; output Z: 10100101100001110011101001001001
# FPU_mult: WAIT
# -- input A: 00110011111100111001001001101000, input B: 10011100011111101111111111100111; output Z: 10100101100001110011101001001001
# FPU_mult: SEND
# -- input A: 00110011111100111001001001101000, input B: 10011100011111101111111111100111; output Z: 11111110100001010011011110010111
# 
# dadda_mult: input A = -1.42587e+12, input B = 6.20941e+25, output OUT = -8.8538e+37
# dadda_mult: input A = 11010011101001011111111000110100, input B = 01101010010011010111001110110110, output OUT = 11111110100001010011011110010111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100000011000111100111001111011, input B: 10011101100100110011100001111010; output Z: 11111110100001010011011110010111
# FPU_mult: WAIT
# -- input A: 01100000011000111100111001111011, input B: 10011101100100110011100001111010; output Z: 11111110100001010011011110010111
# FPU_mult: SEND
# -- input A: 01100000011000111100111001111011, input B: 10011101100100110011100001111010; output Z: 10010000111100101001111010111110
# 
# dadda_mult: input A = 1.13422e-07, input B = -8.43723e-22, output OUT = -9.56968e-29
# dadda_mult: input A = 00110011111100111001001001101000, input B = 10011100011111101111111111100111, output OUT = 10010000111100101001111010111110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011101111011000100000101001011, input B: 01001100010010101110010110000100; output Z: 10010000111100101001111010111110
# FPU_mult: WAIT
# -- input A: 11011101111011000100000101001011, input B: 01001100010010101110010110000100; output Z: 10010000111100101001111010111110
# FPU_mult: SEND
# -- input A: 11011101111011000100000101001011, input B: 01001100010010101110010110000100; output Z: 10111110100000110000000111010010
# 
# dadda_mult: input A = 6.56608e+19, input B = -3.8969e-21, output OUT = -0.255873
# dadda_mult: input A = 01100000011000111100111001111011, input B = 10011101100100110011100001111010, output OUT = 10111110100000110000000111010010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11111110111010000000111110011110, input B: 00110011010110111110011000110101; output Z: 10111110100000110000000111010010
# FPU_mult: WAIT
# -- input A: 11111110111010000000111110011110, input B: 00110011010110111110011000110101; output Z: 10111110100000110000000111010010
# FPU_mult: SEND
# -- input A: 11111110111010000000111110011110, input B: 00110011010110111110011000110101; output Z: 11101010101110110011111101010101
# 
# dadda_mult: input A = -2.128e+18, input B = 5.31881e+07, output OUT = -1.13184e+26
# dadda_mult: input A = 11011101111011000100000101001011, input B = 01001100010010101110010110000100, output OUT = 11101010101110110011111101010101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111110000110010010011000010111, input B: 01000001101010000010100001001111; output Z: 11101010101110110011111101010101
# FPU_mult: WAIT
# -- input A: 01111110000110010010011000010111, input B: 01000001101010000010100001001111; output Z: 11101010101110110011111101010101
# FPU_mult: SEND
# -- input A: 01111110000110010010011000010111, input B: 01000001101010000010100001001111; output Z: 11110010110001110101011000001010
# 
# dadda_mult: input A = -1.54231e+38, input B = 5.11993e-08, output OUT = -7.89652e+30
# dadda_mult: input A = 11111110111010000000111110011110, input B = 00110011010110111110011000110101, output OUT = 11110010110001110101011000001010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010010001101110011101001000100, input B: 11010011110101111010111001100010; output Z: 11110010110001110101011000001010
# FPU_mult: WAIT
# -- input A: 00010010001101110011101001000100, input B: 11010011110101111010111001100010; output Z: 11110010110001110101011000001010
# FPU_mult: SEND
# -- input A: 00010010001101110011101001000100, input B: 11010011110101111010111001100010; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 5.08924e+37, input B = 21.0197, output OUT = inf
# dadda_mult: input A = 01111110000110010010011000010111, input B = 01000001101010000010100001001111, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001010010111000100000000110101, input B: 00110110010111000101110111111010; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 01001010010111000100000000110101, input B: 00110110010111000101110111111010; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 01001010010111000100000000110101, input B: 00110110010111000101110111111010; output Z: 10100110100110100101111010111111
# 
# dadda_mult: input A = 5.78164e-28, input B = -1.85269e+12, output OUT = -1.07116e-15
# dadda_mult: input A = 00010010001101110011101001000100, input B = 11010011110101111010111001100010, output OUT = 10100110100110100101111010111111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110101001000010110011100101011, input B: 10000011101010010010001110101110; output Z: 10100110100110100101111010111111
# FPU_mult: WAIT
# -- input A: 11110101001000010110011100101011, input B: 10000011101010010010001110101110; output Z: 10100110100110100101111010111111
# FPU_mult: SEND
# -- input A: 11110101001000010110011100101011, input B: 10000011101010010010001110101110; output Z: 01000001001111011001100000001000
# 
# dadda_mult: input A = 3.60859e+06, input B = 3.28373e-06, output OUT = 11.8496
# dadda_mult: input A = 01001010010111000100000000110101, input B = 00110110010111000101110111111010, output OUT = 01000001001111011001100000001000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011110010011001010101010011100, input B: 01110001101000110111001010110111; output Z: 01000001001111011001100000001000
# FPU_mult: WAIT
# -- input A: 10011110010011001010101010011100, input B: 01110001101000110111001010110111; output Z: 01000001001111011001100000001000
# FPU_mult: SEND
# -- input A: 10011110010011001010101010011100, input B: 01110001101000110111001010110111; output Z: 00111001010101010100011100110100
# 
# dadda_mult: input A = -2.04603e+32, input B = -9.94112e-37, output OUT = 0.000203398
# dadda_mult: input A = 11110101001000010110011100101011, input B = 10000011101010010010001110101110, output OUT = 00111001010101010100011100110100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111010011111101111011100000110, input B: 10001110001100011010000101000101; output Z: 00111001010101010100011100110100
# FPU_mult: WAIT
# -- input A: 00111010011111101111011100000110, input B: 10001110001100011010000101000101; output Z: 00111001010101010100011100110100
# FPU_mult: SEND
# -- input A: 00111010011111101111011100000110, input B: 10001110001100011010000101000101; output Z: 11010000100000101010110001011000
# 
# dadda_mult: input A = -1.0835e-20, input B = 1.61871e+30, output OUT = -1.75387e+10
# dadda_mult: input A = 10011110010011001010101010011100, input B = 01110001101000110111001010110111, output OUT = 11010000100000101010110001011000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111111111111001011011101110001, input B: 11101011001011000101110111011011; output Z: 11010000100000101010110001011000
# FPU_mult: WAIT
# -- input A: 00111111111111001011011101110001, input B: 11101011001011000101110111011011; output Z: 11010000100000101010110001011000
# FPU_mult: SEND
# -- input A: 00111111111111001011011101110001, input B: 11101011001011000101110111011011; output Z: 10001001001100001110100101101001
# 
# dadda_mult: input A = 0.000972614, input B = -2.18946e-30, output OUT = -2.1295e-33
# dadda_mult: input A = 00111010011111101111011100000110, input B = 10001110001100011010000101000101, output OUT = 10001001001100001110100101101001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000001111110100100000100011010, input B: 10000100100111111111110010000010; output Z: 10001001001100001110100101101001
# FPU_mult: WAIT
# -- input A: 11000001111110100100000100011010, input B: 10000100100111111111110010000010; output Z: 10001001001100001110100101101001
# FPU_mult: SEND
# -- input A: 11000001111110100100000100011010, input B: 10000100100111111111110010000010; output Z: 11101011101010100010011111100111
# 
# dadda_mult: input A = 1.97435, input B = -2.08378e+26, output OUT = -4.11412e+26
# dadda_mult: input A = 00111111111111001011011101110001, input B = 11101011001011000101110111011011, output OUT = 11101011101010100010011111100111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101110100001011101001110100010, input B: 00010101101000110101011011000011; output Z: 11101011101010100010011111100111
# FPU_mult: WAIT
# -- input A: 10101110100001011101001110100010, input B: 00010101101000110101011011000011; output Z: 11101011101010100010011111100111
# FPU_mult: SEND
# -- input A: 10101110100001011101001110100010, input B: 00010101101000110101011011000011; output Z: 00000111000111000110010101000110
# 
# dadda_mult: input A = -31.2818, input B = -3.76126e-36, output OUT = 1.17659e-34
# dadda_mult: input A = 11000001111110100100000100011010, input B = 10000100100111111111110010000010, output OUT = 00000111000111000110010101000110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101111111111010101111111011101, input B: 00101010010100110100000100110111; output Z: 00000111000111000110010101000110
# FPU_mult: WAIT
# -- input A: 11101111111111010101111111011101, input B: 00101010010100110100000100110111; output Z: 00000111000111000110010101000110
# FPU_mult: SEND
# -- input A: 11101111111111010101111111011101, input B: 00101010010100110100000100110111; output Z: 10000100101010101100011000110110
# 
# dadda_mult: input A = -6.08573e-11, input B = 6.59721e-26, output OUT = -4.01488e-36
# dadda_mult: input A = 10101110100001011101001110100010, input B = 00010101101000110101011011000011, output OUT = 10000100101010101100011000110110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000110110100011111100100000100, input B: 11011001000011110110001110111111; output Z: 10000100101010101100011000110110
# FPU_mult: WAIT
# -- input A: 10000110110100011111100100000100, input B: 11011001000011110110001110111111; output Z: 10000100101010101100011000110110
# FPU_mult: SEND
# -- input A: 10000110110100011111100100000100, input B: 11011001000011110110001110111111; output Z: 11011010110100010001011010001111
# 
# dadda_mult: input A = -1.56831e+29, input B = 1.87632e-13, output OUT = -2.94265e+16
# dadda_mult: input A = 11101111111111010101111111011101, input B = 00101010010100110100000100110111, output OUT = 11011010110100010001011010001111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101011001000010000011011111111, input B: 11010100100111001010010111111001; output Z: 11011010110100010001011010001111
# FPU_mult: WAIT
# -- input A: 00101011001000010000011011111111, input B: 11010100100111001010010111111001; output Z: 11011010110100010001011010001111
# FPU_mult: SEND
# -- input A: 00101011001000010000011011111111, input B: 11010100100111001010010111111001; output Z: 00100000011010110011011111010010
# 
# dadda_mult: input A = -7.8983e-35, input B = -2.52254e+15, output OUT = 1.99237e-19
# dadda_mult: input A = 10000110110100011111100100000100, input B = 11011001000011110110001110111111, output OUT = 00100000011010110011011111010010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110101000000111010111110010001, input B: 10000010010011101010001101100101; output Z: 00100000011010110011011111010010
# FPU_mult: WAIT
# -- input A: 01110101000000111010111110010001, input B: 10000010010011101010001101100101; output Z: 00100000011010110011011111010010
# FPU_mult: SEND
# -- input A: 01110101000000111010111110010001, input B: 10000010010011101010001101100101; output Z: 11000000010001010001000101010011
# 
# dadda_mult: input A = 5.72084e-13, input B = -5.3824e+12, output OUT = -3.07918
# dadda_mult: input A = 00101011001000010000011011111111, input B = 11010100100111001010010111111001, output OUT = 11000000010001010001000101010011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110110100000010101100010010110, input B: 11011011011011111101001101100110; output Z: 11000000010001010001000101010011
# FPU_mult: WAIT
# -- input A: 00110110100000010101100010010110, input B: 11011011011011111101001101100110; output Z: 11000000010001010001000101010011
# FPU_mult: SEND
# -- input A: 00110110100000010101100010010110, input B: 11011011011011111101001101100110; output Z: 10110111110101001001011010100111
# 
# dadda_mult: input A = 1.66932e+32, input B = -1.51814e-37, output OUT = -2.53425e-05
# dadda_mult: input A = 01110101000000111010111110010001, input B = 10000010010011101010001101100101, output OUT = 10110111110101001001011010100111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101001110001001010001000000001, input B: 00000110101010011010111011010011; output Z: 10110111110101001001011010100111
# FPU_mult: WAIT
# -- input A: 11101001110001001010001000000001, input B: 00000110101010011010111011010011; output Z: 10110111110101001001011010100111
# FPU_mult: SEND
# -- input A: 11101001110001001010001000000001, input B: 00000110101010011010111011010011; output Z: 11010010011100100101100100000111
# 
# dadda_mult: input A = 3.85481e-06, input B = -6.7505e+16, output OUT = -2.60219e+11
# dadda_mult: input A = 00110110100000010101100010010110, input B = 11011011011011111101001101100110, output OUT = 11010010011100100101100100000111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000000111010101001010010101001, input B: 10111110101101010101101101011000; output Z: 11010010011100100101100100000111
# FPU_mult: WAIT
# -- input A: 00000000111010101001010010101001, input B: 10111110101101010101101101011000; output Z: 11010010011100100101100100000111
# FPU_mult: SEND
# -- input A: 00000000111010101001010010101001, input B: 10111110101101010101101101011000; output Z: 10110001000000100101010100111011
# 
# dadda_mult: input A = -2.97143e+25, input B = 6.38276e-35, output OUT = -1.89659e-09
# dadda_mult: input A = 11101001110001001010001000000001, input B = 00000110101010011010111011010011, output OUT = 10110001000000100101010100111011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011100010000010100100111011100, input B: 11100111011111001101101101101001; output Z: 10110001000000100101010100111011
# FPU_mult: WAIT
# -- input A: 11011100010000010100100111011100, input B: 11100111011111001101101101101001; output Z: 10110001000000100101010100111011
# FPU_mult: SEND
# -- input A: 11011100010000010100100111011100, input B: 11100111011111001101101101101001; output Z: 10000000001001100010111011001111
# 
# dadda_mult: input A = 2.15428e-38, input B = -0.354213, output OUT = -3.50654e-39
# dadda_mult: input A = 00000000111010101001010010101001, input B = 10111110101101010101101101011000, output OUT = 10000000001001100010111011001111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000111100111010100011101100001, input B: 00001011100000100011110001010010; output Z: 10000000001001100010111011001111
# FPU_mult: WAIT
# -- input A: 00000111100111010100011101100001, input B: 00001011100000100011110001010010; output Z: 10000000001001100010111011001111
# FPU_mult: SEND
# -- input A: 00000111100111010100011101100001, input B: 00001011100000100011110001010010; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -2.17624e+17, input B = -1.19408e+24, output OUT = inf
# dadda_mult: input A = 11011100010000010100100111011100, input B = 11100111011111001101101101101001, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11111011011100101010001000001100, input B: 10110001111100111110101001011110; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11111011011100101010001000001100, input B: 10110001111100111110101001011110; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11111011011100101010001000001100, input B: 10110001111100111110101001011110; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = 2.36647e-34, input B = 5.01649e-32, output OUT = 0
# dadda_mult: input A = 00000111100111010100011101100001, input B = 00001011100000100011110001010010, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100101100010111110001110110000, input B: 11111011110100100010100111101111; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01100101100010111110001110110000, input B: 11111011110100100010100111101111; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01100101100010111110001110110000, input B: 11111011110100100010100111101111; output Z: 01101101111001110010110111110011
# 
# dadda_mult: input A = -1.25982e+36, input B = -7.09888e-09, output OUT = 8.94332e+27
# dadda_mult: input A = 11111011011100101010001000001100, input B = 10110001111100111110101001011110, output OUT = 01101101111001110010110111110011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101001110001101111001001010111, input B: 10000110100000100100110010110110; output Z: 01101101111001110010110111110011
# FPU_mult: WAIT
# -- input A: 10101001110001101111001001010111, input B: 10000110100000100100110010110110; output Z: 01101101111001110010110111110011
# FPU_mult: SEND
# -- input A: 10101001110001101111001001010111, input B: 10000110100000100100110010110110; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 8.25761e+22, input B = -2.18247e+36, output OUT = -inf
# dadda_mult: input A = 01100101100010111110001110110000, input B = 11111011110100100010100111101111, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100100000000111101110110010100, input B: 00100001010110011001101011110110; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 01100100000000111101110110010100, input B: 00100001010110011001101011110110; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 01100100000000111101110110010100, input B: 00100001010110011001101011110110; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = -8.83501e-14, input B = -4.90133e-35, output OUT = 0
# dadda_mult: input A = 10101001110001101111001001010111, input B = 10000110100000100100110010110110, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100100011101000100100111010110, input B: 01101011111001001001000000010111; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 10100100011101000100100111010110, input B: 01101011111001001001000000010111; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 10100100011101000100100111010110, input B: 01101011111001001001000000010111; output Z: 01000101111000000010110101001001
# 
# dadda_mult: input A = 9.72996e+21, input B = 7.37275e-19, output OUT = 7173.66
# dadda_mult: input A = 01100100000000111101110110010100, input B = 00100001010110011001101011110110, output OUT = 01000101111000000010110101001001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101000100000010110010011010110, input B: 01010100010000000100100111111110; output Z: 01000101111000000010110101001001
# FPU_mult: WAIT
# -- input A: 01101000100000010110010011010110, input B: 01010100010000000100100111111110; output Z: 01000101111000000010110101001001
# FPU_mult: SEND
# -- input A: 01101000100000010110010011010110, input B: 01010100010000000100100111111110; output Z: 11010000110110100001101101000010
# 
# dadda_mult: input A = -5.29716e-17, input B = 5.52631e+26, output OUT = -2.92738e+10
# dadda_mult: input A = 10100100011101000100100111010110, input B = 01101011111001001001000000010111, output OUT = 11010000110110100001101101000010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000111101001110101010001110000, input B: 11111011000100110001011110011111; output Z: 11010000110110100001101101000010
# FPU_mult: WAIT
# -- input A: 01000111101001110101010001110000, input B: 11111011000100110001011110011111; output Z: 11010000110110100001101101000010
# FPU_mult: SEND
# -- input A: 01000111101001110101010001110000, input B: 11111011000100110001011110011111; output Z: 01111101010000100110001000001101
# 
# dadda_mult: input A = 4.88836e+24, input B = 3.3035e+12, output OUT = 1.61487e+37
# dadda_mult: input A = 01101000100000010110010011010110, input B = 01010100010000000100100111111110, output OUT = 01111101010000100110001000001101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000010111001011110010100011111, input B: 00100001011111100001000010101111; output Z: 01111101010000100110001000001101
# FPU_mult: WAIT
# -- input A: 00000010111001011110010100011111, input B: 00100001011111100001000010101111; output Z: 01111101010000100110001000001101
# FPU_mult: SEND
# -- input A: 00000010111001011110010100011111, input B: 00100001011111100001000010101111; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 85672.9, input B = -7.63747e+35, output OUT = -inf
# dadda_mult: input A = 01000111101001110101010001110000, input B = 11111011000100110001011110011111, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011111101001101101100011111011, input B: 00110111001001101111101110100000; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10011111101001101101100011111011, input B: 00110111001001101111101110100000; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10011111101001101101100011111011, input B: 00110111001001101111101110100000; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = 3.378e-37, input B = 8.60806e-19, output OUT = 0
# dadda_mult: input A = 00000010111001011110010100011111, input B = 00100001011111100001000010101111, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101000100000001101100100101110, input B: 10101010111100001001000100011111; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11101000100000001101100100101110, input B: 10101010111100001001000100011111; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11101000100000001101100100101110, input B: 10101010111100001001000100011111; output Z: 10010111010110011010100101100100
# 
# dadda_mult: input A = -7.06627e-20, input B = 9.95296e-06, output OUT = -7.03303e-25
# dadda_mult: input A = 10011111101001101101100011111011, input B = 00110111001001101111101110100000, output OUT = 10010111010110011010100101100100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000001001100100001100001001101, input B: 00001010000010000010110101000000; output Z: 10010111010110011010100101100100
# FPU_mult: WAIT
# -- input A: 10000001001100100001100001001101, input B: 00001010000010000010110101000000; output Z: 10010111010110011010100101100100
# FPU_mult: SEND
# -- input A: 10000001001100100001100001001101, input B: 00001010000010000010110101000000; output Z: 01010011111100100010100101001011
# 
# dadda_mult: input A = -4.86775e+24, input B = -4.27333e-13, output OUT = 2.08015e+12
# dadda_mult: input A = 11101000100000001101100100101110, input B = 10101010111100001001000100011111, output OUT = 01010011111100100010100101001011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000001001010100001100111010001, input B: 01100000000111011000010000101001; output Z: 01010011111100100010100101001011
# FPU_mult: WAIT
# -- input A: 01000001001010100001100111010001, input B: 01100000000111011000010000101001; output Z: 01010011111100100010100101001011
# FPU_mult: SEND
# -- input A: 01000001001010100001100111010001, input B: 01100000000111011000010000101001; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -3.27109e-38, input B = 6.55667e-33, output OUT = -0
# dadda_mult: input A = 10000001001100100001100001001101, input B = 00001010000010000010110101000000, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110100011001001100011010011010, input B: 00000110000101001111010010010101; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11110100011001001100011010011010, input B: 00000110000101001111010010010101; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11110100011001001100011010011010, input B: 00000110000101001111010010010101; output Z: 01100001110100010101001101001011
# 
# dadda_mult: input A = 10.6313, input B = 4.5401e+19, output OUT = 4.82671e+20
# dadda_mult: input A = 01000001001010100001100111010001, input B = 01100000000111011000010000101001, output OUT = 01100001110100010101001101001011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001111101000011011100110000000, input B: 11110101101100010011001101011011; output Z: 01100001110100010101001101001011
# FPU_mult: WAIT
# -- input A: 11001111101000011011100110000000, input B: 11110101101100010011001101011011; output Z: 01100001110100010101001101001011
# FPU_mult: SEND
# -- input A: 11001111101000011011100110000000, input B: 11110101101100010011001101011011; output Z: 10111011000001010001110101100011
# 
# dadda_mult: input A = -7.25019e+31, input B = 2.80154e-35, output OUT = -0.00203117
# dadda_mult: input A = 11110100011001001100011010011010, input B = 00000110000101001111010010010101, output OUT = 10111011000001010001110101100011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110001100110101101010101011101, input B: 11110010101110001110001010100100; output Z: 10111011000001010001110101100011
# FPU_mult: WAIT
# -- input A: 00110001100110101101010101011101, input B: 11110010101110001110001010100100; output Z: 10111011000001010001110101100011
# FPU_mult: SEND
# -- input A: 00110001100110101101010101011101, input B: 11110010101110001110001010100100; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -5.42658e+09, input B = -4.49257e+32, output OUT = inf
# dadda_mult: input A = 11001111101000011011100110000000, input B = 11110101101100010011001101011011, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100000101011100110011011000000, input B: 10101101000001010101010011111101; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10100000101011100110011011000000, input B: 10101101000001010101010011111101; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10100000101011100110011011000000, input B: 10101101000001010101010011111101; output Z: 11100100110111111010010011011101
# 
# dadda_mult: input A = 4.50625e-09, input B = -7.32406e+30, output OUT = -3.3004e+22
# dadda_mult: input A = 00110001100110101101010101011101, input B = 11110010101110001110001010100100, output OUT = 11100100110111111010010011011101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101001011100010000100111100000, input B: 01011011111011000000111110110010; output Z: 11100100110111111010010011011101
# FPU_mult: WAIT
# -- input A: 01101001011100010000100111100000, input B: 01011011111011000000111110110010; output Z: 11100100110111111010010011011101
# FPU_mult: SEND
# -- input A: 01101001011100010000100111100000, input B: 01011011111011000000111110110010; output Z: 00001110001101011010101010010000
# 
# dadda_mult: input A = -2.95447e-19, input B = -7.57905e-12, output OUT = 2.23921e-30
# dadda_mult: input A = 10100000101011100110011011000000, input B = 10101101000001010101010011111101, output OUT = 00001110001101011010101010010000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00011100010101011010010001000110, input B: 11011111001011011101111010001001; output Z: 00001110001101011010101010010000
# FPU_mult: WAIT
# -- input A: 00011100010101011010010001000110, input B: 11011111001011011101111010001001; output Z: 00001110001101011010101010010000
# FPU_mult: SEND
# -- input A: 00011100010101011010010001000110, input B: 11011111001011011101111010001001; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 1.82124e+25, input B = 1.32891e+17, output OUT = inf
# dadda_mult: input A = 01101001011100010000100111100000, input B = 01011011111011000000111110110010, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100100010100001000100110001011, input B: 00000000111011011001110001100000; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11100100010100001000100110001011, input B: 00000000111011011001110001100000; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11100100010100001000100110001011, input B: 00000000111011011001110001100000; output Z: 10111100000100010001100110111010
# 
# dadda_mult: input A = 7.06881e-22, input B = -1.25286e+19, output OUT = -0.00885623
# dadda_mult: input A = 00011100010101011010010001000110, input B = 11011111001011011101111010001001, output OUT = 10111100000100010001100110111010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110110111000100001000011101010, input B: 01011111011110011000000001010001; output Z: 10111100000100010001100110111010
# FPU_mult: WAIT
# -- input A: 11110110111000100001000011101010, input B: 01011111011110011000000001010001; output Z: 10111100000100010001100110111010
# FPU_mult: SEND
# -- input A: 11110110111000100001000011101010, input B: 01011111011110011000000001010001; output Z: 10100101110000011000111010111000
# 
# dadda_mult: input A = -1.53873e+22, input B = 2.18211e-38, output OUT = -3.35769e-16
# dadda_mult: input A = 11100100010100001000100110001011, input B = 00000000111011011001110001100000, output OUT = 10100101110000011000111010111000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111010000111011101010011001010, input B: 10110110011011101011101100101001; output Z: 10100101110000011000111010111000
# FPU_mult: WAIT
# -- input A: 10111010000111011101010011001010, input B: 10110110011011101011101100101001; output Z: 10100101110000011000111010111000
# FPU_mult: SEND
# -- input A: 10111010000111011101010011001010, input B: 10110110011011101011101100101001; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = -2.29258e+33, input B = 1.79785e+19, output OUT = -inf
# dadda_mult: input A = 11110110111000100001000011101010, input B = 01011111011110011000000001010001, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10001000010010101101110101001001, input B: 11001001001001001110001010010001; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10001000010010101101110101001001, input B: 11001001001001001110001010010001; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10001000010010101101110101001001, input B: 11001001001001001110001010010001; output Z: 00110001000100110010111100111000
# 
# dadda_mult: input A = -0.000602078, input B = -3.55737e-06, output OUT = 2.14182e-09
# dadda_mult: input A = 10111010000111011101010011001010, input B = 10110110011011101011101100101001, output OUT = 00110001000100110010111100111000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110110001111101111001000110000, input B: 01111011010111101010110011000001; output Z: 00110001000100110010111100111000
# FPU_mult: WAIT
# -- input A: 10110110001111101111001000110000, input B: 01111011010111101010110011000001; output Z: 00110001000100110010111100111000
# FPU_mult: SEND
# -- input A: 10110110001111101111001000110000, input B: 01111011010111101010110011000001; output Z: 00010010000000101010100101001101
# 
# dadda_mult: input A = -6.10473e-34, input B = -675369, output OUT = 4.12294e-28
# dadda_mult: input A = 10001000010010101101110101001001, input B = 11001001001001001110001010010001, output OUT = 00010010000000101010100101001101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010101001100001111010111101010, input B: 10010010000011010110011010011111; output Z: 00010010000000101010100101001101
# FPU_mult: WAIT
# -- input A: 00010101001100001111010111101010, input B: 10010010000011010110011010011111; output Z: 00010010000000101010100101001101
# FPU_mult: SEND
# -- input A: 00010101001100001111010111101010, input B: 10010010000011010110011010011111; output Z: 11110010001001100001011011100000
# 
# dadda_mult: input A = -2.84532e-06, input B = 1.15619e+36, output OUT = -3.28974e+30
# dadda_mult: input A = 10110110001111101111001000110000, input B = 01111011010111101010110011000001, output OUT = 11110010001001100001011011100000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110001011011000101110010100111, input B: 10010100000111110100001100101100; output Z: 11110010001001100001011011100000
# FPU_mult: WAIT
# -- input A: 11110001011011000101110010100111, input B: 10010100000111110100001100101100; output Z: 11110010001001100001011011100000
# FPU_mult: SEND
# -- input A: 11110001011011000101110010100111, input B: 10010100000111110100001100101100; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 3.57369e-26, input B = -4.46182e-28, output OUT = -0
# dadda_mult: input A = 00010101001100001111010111101010, input B = 10010010000011010110011010011111, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011010011110000110100100101011, input B: 10011111110111011110111001101100; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 10011010011110000110100100101011, input B: 10011111110111011110111001101100; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 10011010011110000110100100101011, input B: 10011111110111011110111001101100; output Z: 01000110000100110000101110010001
# 
# dadda_mult: input A = -1.17041e+30, input B = -8.0407e-27, output OUT = 9410.89
# dadda_mult: input A = 11110001011011000101110010100111, input B = 10010100000111110100001100101100, output OUT = 01000110000100110000101110010001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111101111111010100001000111101, input B: 11001101001010111011011000000110; output Z: 01000110000100110000101110010001
# FPU_mult: WAIT
# -- input A: 00111101111111010100001000111101, input B: 11001101001010111011011000000110; output Z: 01000110000100110000101110010001
# FPU_mult: SEND
# -- input A: 00111101111111010100001000111101, input B: 11001101001010111011011000000110; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = -5.13702e-23, input B = -9.39916e-20, output OUT = 0
# dadda_mult: input A = 10011010011110000110100100101011, input B = 10011111110111011110111001101100, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111010111111100111110001111011, input B: 11100101011110001001111000010010; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00111010111111100111110001111011, input B: 11100101011110001001111000010010; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00111010111111100111110001111011, input B: 11100101011110001001111000010010; output Z: 11001011101010011101111101010010
# 
# dadda_mult: input A = 0.123661, input B = -1.80052e+08, output OUT = -2.22655e+07
# dadda_mult: input A = 00111101111111010100001000111101, input B = 11001101001010111011011000000110, output OUT = 11001011101010011101111101010010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100010011011011101101111101010, input B: 11001111101111011110001110001101; output Z: 11001011101010011101111101010010
# FPU_mult: WAIT
# -- input A: 10100010011011011101101111101010, input B: 11001111101111011110001110001101; output Z: 11001011101010011101111101010010
# FPU_mult: SEND
# -- input A: 10100010011011011101101111101010, input B: 11001111101111011110001110001101; output Z: 11100000111101110010010110111010
# 
# dadda_mult: input A = 0.00194158, input B = -7.33789e+22, output OUT = -1.42471e+20
# dadda_mult: input A = 00111010111111100111110001111011, input B = 11100101011110001001111000010010, output OUT = 11100000111101110010010110111010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000011011100010000011101000000, input B: 10111010110101101100001000000100; output Z: 11100000111101110010010110111010
# FPU_mult: WAIT
# -- input A: 00000011011100010000011101000000, input B: 10111010110101101100001000000100; output Z: 11100000111101110010010110111010
# FPU_mult: SEND
# -- input A: 00000011011100010000011101000000, input B: 10111010110101101100001000000100; output Z: 00110010101100000110111011001001
# 
# dadda_mult: input A = -3.22359e-18, input B = -6.37161e+09, output OUT = 2.05395e-08
# dadda_mult: input A = 10100010011011011101101111101010, input B = 11001111101111011110001110001101, output OUT = 00110010101100000110111011001001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001000101010100000001110100001, input B: 11110011011101010100110101001100; output Z: 00110010101100000110111011001001
# FPU_mult: WAIT
# -- input A: 01001000101010100000001110100001, input B: 11110011011101010100110101001100; output Z: 00110010101100000110111011001001
# FPU_mult: SEND
# -- input A: 01001000101010100000001110100001, input B: 11110011011101010100110101001100; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 7.08319e-37, input B = -0.00163847, output OUT = -0
# dadda_mult: input A = 00000011011100010000011101000000, input B = 10111010110101101100001000000100, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001100001001000001001010000101, input B: 01000100101110101011101001000101; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00001100001001000001001010000101, input B: 01000100101110101011101001000101; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00001100001001000001001010000101, input B: 01000100101110101011101001000101; output Z: 11111100101000101110100011001111
# 
# dadda_mult: input A = 348189, input B = -1.94348e+31, output OUT = -6.76699e+36
# dadda_mult: input A = 01001000101010100000001110100001, input B = 11110011011101010100110101001100, output OUT = 11111100101000101110100011001111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110100110100011110111100101111, input B: 11101101010011111110101001001100; output Z: 11111100101000101110100011001111
# FPU_mult: WAIT
# -- input A: 10110100110100011110111100101111, input B: 11101101010011111110101001001100; output Z: 11111100101000101110100011001111
# FPU_mult: SEND
# -- input A: 10110100110100011110111100101111, input B: 11101101010011111110101001001100; output Z: 00010001011011110101100110101101
# 
# dadda_mult: input A = 1.26397e-31, input B = 1493.82, output OUT = 1.88814e-28
# dadda_mult: input A = 00001100001001000001001010000101, input B = 01000100101110101011101001000101, output OUT = 00010001011011110101100110101101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000111000111111010110110111001, input B: 11000010011100011101010011111000; output Z: 00010001011011110101100110101101
# FPU_mult: WAIT
# -- input A: 01000111000111111010110110111001, input B: 11000010011100011101010011111000; output Z: 00010001011011110101100110101101
# FPU_mult: SEND
# -- input A: 01000111000111111010110110111001, input B: 11000010011100011101010011111000; output Z: 01100010101010101000000010001010
# 
# dadda_mult: input A = -3.91033e-07, input B = -4.02167e+27, output OUT = 1.5726e+21
# dadda_mult: input A = 10110100110100011110111100101111, input B = 11101101010011111110101001001100, output OUT = 01100010101010101000000010001010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011010000011011010110010001100, input B: 11110111100101011100000001110111; output Z: 01100010101010101000000010001010
# FPU_mult: WAIT
# -- input A: 11011010000011011010110010001100, input B: 11110111100101011100000001110111; output Z: 01100010101010101000000010001010
# FPU_mult: SEND
# -- input A: 11011010000011011010110010001100, input B: 11110111100101011100000001110111; output Z: 11001010000101101101011101100010
# 
# dadda_mult: input A = 40877.7, input B = -60.458, output OUT = -2.47138e+06
# dadda_mult: input A = 01000111000111111010110110111001, input B = 11000010011100011101010011111000, output OUT = 11001010000101101101011101100010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110000110100000111000101101111, input B: 01011001101111010000000011011000; output Z: 11001010000101101101011101100010
# FPU_mult: WAIT
# -- input A: 11110000110100000111000101101111, input B: 01011001101111010000000011011000; output Z: 11001010000101101101011101100010
# FPU_mult: SEND
# -- input A: 11110000110100000111000101101111, input B: 01011001101111010000000011011000; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -9.96942e+15, input B = -6.07466e+33, output OUT = inf
# dadda_mult: input A = 11011010000011011010110010001100, input B = 11110111100101011100000001110111, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001100111101000110110110111100, input B: 11010111011010001101100000100010; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11001100111101000110110110111100, input B: 11010111011010001101100000100010; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11001100111101000110110110111100, input B: 11010111011010001101100000100010; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = -5.1608e+29, input B = 6.64996e+15, output OUT = -inf
# dadda_mult: input A = 11110000110100000111000101101111, input B = 01011001101111010000000011011000, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10010010000000001110110111111111, input B: 01111100010001011001000101100110; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10010010000000001110110111111111, input B: 01111100010001011001000101100110; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10010010000000001110110111111111, input B: 01111100010001011001000101100110; output Z: 01100100110111100101000111001111
# 
# dadda_mult: input A = -1.28151e+08, input B = -2.56015e+14, output OUT = 3.28086e+22
# dadda_mult: input A = 11001100111101000110110110111100, input B = 11010111011010001101100000100010, output OUT = 01100100110111100101000111001111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111110010100010011111111110001, input B: 01000011100000011000011101111110; output Z: 01100100110111100101000111001111
# FPU_mult: WAIT
# -- input A: 10111110010100010011111111110001, input B: 01000011100000011000011101111110; output Z: 01100100110111100101000111001111
# FPU_mult: SEND
# -- input A: 10111110010100010011111111110001, input B: 01000011100000011000011101111110; output Z: 11001110110001110000000010111111
# 
# dadda_mult: input A = -4.0683e-28, input B = 4.10333e+36, output OUT = -1.66936e+09
# dadda_mult: input A = 10010010000000001110110111111111, input B = 01111100010001011001000101100110, output OUT = 11001110110001110000000010111111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10010011101110011110010110001000, input B: 00011101101110000011010011011100; output Z: 11001110110001110000000010111111
run 4 us
# FPU_mult: WAIT
# -- input A: 10010011101110011110010110001000, input B: 00011101101110000011010011011100; output Z: 11001110110001110000000010111111
# FPU_mult: SEND
# -- input A: 10010011101110011110010110001000, input B: 00011101101110000011010011011100; output Z: 11000010010100111011111111110000
# 
# dadda_mult: input A = -0.204345, input B = 259.059, output OUT = -52.9374
# dadda_mult: input A = 10111110010100010011111111110001, input B = 01000011100000011000011101111110, output OUT = 11000010010100111011111111110000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011000010010101001100000010100, input B: 11001000101000000111010010100111; output Z: 11000010010100111011111111110000
# FPU_mult: WAIT
# -- input A: 11011000010010101001100000010100, input B: 11001000101000000111010010100111; output Z: 11000010010100111011111111110000
# FPU_mult: SEND
# -- input A: 11011000010010101001100000010100, input B: 11001000101000000111010010100111; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -4.69269e-27, input B = 4.8759e-21, output OUT = -0
# dadda_mult: input A = 10010011101110011110010110001000, input B = 00011101101110000011010011011100, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111010010101110110011111000101, input B: 11101100110101010110101000111111; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01111010010101110110011111000101, input B: 11101100110101010110101000111111; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01111010010101110110011111000101, input B: 11101100110101010110101000111111; output Z: 01100001011111011111011010111011
# 
# dadda_mult: input A = -8.91018e+14, input B = -328613, output OUT = 2.928e+20
# dadda_mult: input A = 11011000010010101001100000010100, input B = 11001000101000000111010010100111, output OUT = 01100001011111011111011010111011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000111000101100101011000010010, input B: 11001110111000110000110110000011; output Z: 01100001011111011111011010111011
# FPU_mult: WAIT
# -- input A: 10000111000101100101011000010010, input B: 11001110111000110000110110000011; output Z: 01100001011111011111011010111011
# FPU_mult: SEND
# -- input A: 10000111000101100101011000010010, input B: 11001110111000110000110110000011; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 2.79612e+35, input B = -2.06402e+27, output OUT = -inf
# dadda_mult: input A = 01111010010101110110011111000101, input B = 11101100110101010110101000111111, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000110011011000110001110110101, input B: 11111111000000111110101101010100; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 01000110011011000110001110110101, input B: 11111111000000111110101101010100; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 01000110011011000110001110110101, input B: 11111111000000111110101101010100; output Z: 00010110100001010101011001000001
# 
# dadda_mult: input A = -1.131e-34, input B = -1.90466e+09, output OUT = 2.15417e-25
# dadda_mult: input A = 10000111000101100101011000010010, input B = 11001110111000110000110110000011, output OUT = 00010110100001010101011001000001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010000110110111110010111000100, input B: 01010001010010110010111001101101; output Z: 00010110100001010101011001000001
# FPU_mult: WAIT
# -- input A: 11010000110110111110010111000100, input B: 01010001010010110010111001101101; output Z: 00010110100001010101011001000001
# FPU_mult: SEND
# -- input A: 11010000110110111110010111000100, input B: 01010001010010110010111001101101; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 15128.9, input B = -1.75351e+38, output OUT = -inf
# dadda_mult: input A = 01000110011011000110001110110101, input B = 11111111000000111110101101010100, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111110111110101010000001001000, input B: 11101000100001100100110101110000; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 00111110111110101010000001001000, input B: 11101000100001100100110101110000; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 00111110111110101010000001001000, input B: 11101000100001100100110101110000; output Z: 11100010101011101000011100010011
# 
# dadda_mult: input A = -2.95141e+10, input B = 5.45411e+10, output OUT = -1.60973e+21
# dadda_mult: input A = 11010000110110111110010111000100, input B = 01010001010010110010111001101101, output OUT = 11100010101011101000011100010011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110101010101101011101111111010, input B: 01101000001111001000110000111001; output Z: 11100010101011101000011100010011
# FPU_mult: WAIT
# -- input A: 11110101010101101011101111111010, input B: 01101000001111001000110000111001; output Z: 11100010101011101000011100010011
# FPU_mult: SEND
# -- input A: 11110101010101101011101111111010, input B: 01101000001111001000110000111001; output Z: 11101000000000110111101110110110
# 
# dadda_mult: input A = 0.489504, input B = -5.0738e+24, output OUT = -2.48365e+24
# dadda_mult: input A = 00111110111110101010000001001000, input B = 11101000100001100100110101110000, output OUT = 11101000000000110111101110110110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000001110001110011110011110010, input B: 11000100011100100101001100100111; output Z: 11101000000000110111101110110110
# FPU_mult: WAIT
# -- input A: 10000001110001110011110011110010, input B: 11000100011100100101001100100111; output Z: 11101000000000110111101110110110
# FPU_mult: SEND
# -- input A: 10000001110001110011110011110010, input B: 11000100011100100101001100100111; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = -2.72208e+32, input B = 3.56157e+24, output OUT = -inf
# dadda_mult: input A = 11110101010101101011101111111010, input B = 01101000001111001000110000111001, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010001001000010011110101000110, input B: 00111000010010101111010011100011; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 01010001001000010011110101000110, input B: 00111000010010101111010011100011; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 01010001001000010011110101000110, input B: 00111000010010101111010011100011; output Z: 00000110101111001001100001010100
# 
# dadda_mult: input A = -7.31885e-38, input B = -969.299, output OUT = 7.09416e-35
# dadda_mult: input A = 10000001110001110011110011110010, input B = 11000100011100100101001100100111, output OUT = 00000110101111001001100001010100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000000001010110000101010111000, input B: 00100011011000000110011011001001; output Z: 00000110101111001001100001010100
# FPU_mult: WAIT
# -- input A: 01000000001010110000101010111000, input B: 00100011011000000110011011001001; output Z: 00000110101111001001100001010100
# FPU_mult: SEND
# -- input A: 01000000001010110000101010111000, input B: 00100011011000000110011011001001; output Z: 01001001111111111010100100101101
# 
# dadda_mult: input A = 4.32824e+10, input B = 4.83886e-05, output OUT = 2.09437e+06
# dadda_mult: input A = 01010001001000010011110101000110, input B = 00111000010010101111010011100011, output OUT = 01001001111111111010100100101101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100011011011001001111101101101, input B: 01001001010101011101101111011110; output Z: 01001001111111111010100100101101
# FPU_mult: WAIT
# -- input A: 01100011011011001001111101101101, input B: 01001001010101011101101111011110; output Z: 01001001111111111010100100101101
# FPU_mult: SEND
# -- input A: 01100011011011001001111101101101, input B: 01001001010101011101101111011110; output Z: 00100100000101011110111000001110
# 
# dadda_mult: input A = 2.67253, input B = 1.21648e-17, output OUT = 3.25109e-17
# dadda_mult: input A = 01000000001010110000101010111000, input B = 00100011011000000110011011001001, output OUT = 00100100000101011110111000001110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011110011001100010101010111101, input B: 00000110111001101010110001000111; output Z: 00100100000101011110111000001110
# FPU_mult: WAIT
# -- input A: 10011110011001100010101010111101, input B: 00000110111001101010110001000111; output Z: 00100100000101011110111000001110
# FPU_mult: SEND
# -- input A: 10011110011001100010101010111101, input B: 00000110111001101010110001000111; output Z: 01101101010001011010101111011111
# 
# dadda_mult: input A = 4.36492e+21, input B = 875966, output OUT = 3.82352e+27
# dadda_mult: input A = 01100011011011001001111101101101, input B = 01001001010101011101101111011110, output OUT = 01101101010001011010101111011111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000110101111010000101011110000, input B: 00011011110100000110110100101111; output Z: 01101101010001011010101111011111
# FPU_mult: WAIT
# -- input A: 10000110101111010000101011110000, input B: 00011011110100000110110100101111; output Z: 01101101010001011010101111011111
# FPU_mult: SEND
# -- input A: 10000110101111010000101011110000, input B: 00011011110100000110110100101111; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -1.21849e-20, input B = 8.67695e-35, output OUT = -0
# dadda_mult: input A = 10011110011001100010101010111101, input B = 00000110111001101010110001000111, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10010001100101000010000000110010, input B: 00000000110110110111110100000000; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 10010001100101000010000000110010, input B: 00000000110110110111110100000000; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 10010001100101000010000000110010, input B: 00000000110110110111110100000000; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -7.111e-35, input B = 3.44813e-22, output OUT = -0
# dadda_mult: input A = 10000110101111010000101011110000, input B = 00011011110100000110110100101111, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011010010000011011100000100110, input B: 00111011010000100001110111000111; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01011010010000011011100000100110, input B: 00111011010000100001110111000111; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01011010010000011011100000100110, input B: 00111011010000100001110111000111; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -2.33701e-28, input B = 2.01568e-38, output OUT = -0
# dadda_mult: input A = 10010001100101000010000000110010, input B = 00000000110110110111110100000000, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11111111111100111010001010110110, input B: 10010010111011001001110110101101; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11111111111100111010001010110110, input B: 10010010111011001001110110101101; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11111111111100111010001010110110, input B: 10010010111011001001110110101101; output Z: 01010110000100101110010000010101
# 
# dadda_mult: input A = 1.36318e+16, input B = 0.00296198, output OUT = 4.03771e+13
# dadda_mult: input A = 01011010010000011011100000100110, input B = 00111011010000100001110111000111, output OUT = 01010110000100101110010000010101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100011010110110111001100011000, input B: 10100000011011011111010010011101; output Z: 01010110000100101110010000010101
# FPU_mult: WAIT
# -- input A: 00100011010110110111001100011000, input B: 10100000011011011111010010011101; output Z: 01010110000100101110010000010101
# FPU_mult: SEND
# -- input A: 00100011010110110111001100011000, input B: 10100000011011011111010010011101; output Z: 01111111110000000000000000000000
# 
# dadda_mult: input A = -nan, input B = -1.49326e-27, output OUT = nan
# dadda_mult: input A = 11111111111100111010001010110110, input B = 10010010111011001001110110101101, output OUT = 01111111110000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011100011001101100001001100001, input B: 11000000001001110101011101011001; output Z: 01111111110000000000000000000000
# FPU_mult: WAIT
# -- input A: 01011100011001101100001001100001, input B: 11000000001001110101011101011001; output Z: 01111111110000000000000000000000
# FPU_mult: SEND
# -- input A: 01011100011001101100001001100001, input B: 11000000001001110101011101011001; output Z: 10000100010010111111101100111110
# 
# dadda_mult: input A = 1.18964e-17, input B = -2.01556e-19, output OUT = -2.39779e-36
# dadda_mult: input A = 00100011010110110111001100011000, input B = 10100000011011011111010010011101, output OUT = 10000100010010111111101100111110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110101000100000011011010011010, input B: 11111110001010100010111011011110; output Z: 10000100010010111111101100111110
# FPU_mult: WAIT
# -- input A: 10110101000100000011011010011010, input B: 11111110001010100010111011011110; output Z: 10000100010010111111101100111110
# FPU_mult: SEND
# -- input A: 10110101000100000011011010011010, input B: 11111110001010100010111011011110; output Z: 11011101000101101101011110001010
# 
# dadda_mult: input A = 2.59812e+17, input B = -2.61471, output OUT = -6.79332e+17
# dadda_mult: input A = 01011100011001101100001001100001, input B = 11000000001001110101011101011001, output OUT = 11011101000101101101011110001010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110101100011101011001000011100, input B: 01010101101001100101110000110111; output Z: 11011101000101101101011110001010
# FPU_mult: WAIT
# -- input A: 01110101100011101011001000011100, input B: 01010101101001100101110000110111; output Z: 11011101000101101101011110001010
# FPU_mult: SEND
# -- input A: 01110101100011101011001000011100, input B: 01010101101001100101110000110111; output Z: 01110011101111111011110101010010
# 
# dadda_mult: input A = -5.37236e-07, input B = -5.6553e+37, output OUT = 3.03823e+31
# dadda_mult: input A = 10110101000100000011011010011010, input B = 11111110001010100010111011011110, output OUT = 01110011101111111011110101010010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111110000101010110100111001100, input B: 00010000011100011110110111110111; output Z: 01110011101111111011110101010010
# FPU_mult: WAIT
# -- input A: 10111110000101010110100111001100, input B: 00010000011100011110110111110111; output Z: 01110011101111111011110101010010
# FPU_mult: SEND
# -- input A: 10111110000101010110100111001100, input B: 00010000011100011110110111110111; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 3.61777e+32, input B = 2.28644e+13, output OUT = inf
# dadda_mult: input A = 01110101100011101011001000011100, input B = 01010101101001100101110000110111, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011110000100010111110111010110, input B: 10100011011011111111111011111101; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 01011110000100010111110111010110, input B: 10100011011011111111111011111101; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 01011110000100010111110111010110, input B: 10100011011011111111111011111101; output Z: 10001111000011010011001101111100
# 
# dadda_mult: input A = -0.145911, input B = 4.77122e-29, output OUT = -6.96175e-30
# dadda_mult: input A = 10111110000101010110100111001100, input B = 00010000011100011110110111110111, output OUT = 10001111000011010011001101111100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101011100010111101010000010010, input B: 00111011011000010111101000111000; output Z: 10001111000011010011001101111100
# FPU_mult: WAIT
# -- input A: 11101011100010111101010000010010, input B: 00111011011000010111101000111000; output Z: 10001111000011010011001101111100
# FPU_mult: SEND
# -- input A: 11101011100010111101010000010010, input B: 00111011011000010111101000111000; output Z: 11000010000010000110010101100101
# 
# dadda_mult: input A = 2.62094e+18, input B = -1.30102e-17, output OUT = -34.099
# dadda_mult: input A = 01011110000100010111110111010110, input B = 10100011011011111111111011111101, output OUT = 11000010000010000110010101100101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110011101010100010101100100110, input B: 11111000100010101111000011000011; output Z: 11000010000010000110010101100101
# FPU_mult: WAIT
# -- input A: 10110011101010100010101100100110, input B: 11111000100010101111000011000011; output Z: 11000010000010000110010101100101
# FPU_mult: SEND
# -- input A: 10110011101010100010101100100110, input B: 11111000100010101111000011000011; output Z: 11100111011101100101000001001011
# 
# dadda_mult: input A = -3.38084e+26, input B = 0.00344051, output OUT = -1.16318e+24
# dadda_mult: input A = 11101011100010111101010000010010, input B = 00111011011000010111101000111000, output OUT = 11100111011101100101000001001011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101010001101110110110101010110, input B: 00010001101011011010110100010110; output Z: 11100111011101100101000001001011
# FPU_mult: WAIT
# -- input A: 10101010001101110110110101010110, input B: 00010001101011011010110100010110; output Z: 11100111011101100101000001001011
# FPU_mult: SEND
# -- input A: 10101010001101110110110101010110, input B: 00010001101011011010110100010110; output Z: 01101100101110001011011010011001
# 
# dadda_mult: input A = -7.92409e-08, input B = -2.25444e+34, output OUT = 1.78644e+27
# dadda_mult: input A = 10110011101010100010101100100110, input B = 11111000100010101111000011000011, output OUT = 01101100101110001011011010011001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111101101111110110001100111110, input B: 10100001000011000110101001000101; output Z: 01101100101110001011011010011001
# FPU_mult: WAIT
# -- input A: 01111101101111110110001100111110, input B: 10100001000011000110101001000101; output Z: 01101100101110001011011010011001
# FPU_mult: SEND
# -- input A: 01111101101111110110001100111110, input B: 10100001000011000110101001000101; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -1.62916e-13, input B = 2.74013e-28, output OUT = -0
# dadda_mult: input A = 10101010001101110110110101010110, input B = 00010001101011011010110100010110, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110001000110100000100011111011, input B: 01010101110110110100100100100111; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00110001000110100000100011111011, input B: 01010101110110110100100100100111; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00110001000110100000100011111011, input B: 01010101110110110100100100100111; output Z: 11011111010100011111001101110001
# 
# dadda_mult: input A = 3.17997e+37, input B = -4.75745e-19, output OUT = -1.51286e+19
# dadda_mult: input A = 01111101101111110110001100111110, input B = 10100001000011000110101001000101, output OUT = 11011111010100011111001101110001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100101011000111100000100011111, input B: 01101100001111001110111101110110; output Z: 11011111010100011111001101110001
# FPU_mult: WAIT
# -- input A: 11100101011000111100000100011111, input B: 01101100001111001110111101110110; output Z: 11011111010100011111001101110001
# FPU_mult: SEND
# -- input A: 11100101011000111100000100011111, input B: 01101100001111001110111101110110; output Z: 01000111100000111111000110110011
# 
# dadda_mult: input A = 2.24151e-09, input B = 3.01384e+13, output OUT = 67555.4
# dadda_mult: input A = 00110001000110100000100011111011, input B = 01010101110110110100100100100111, output OUT = 01000111100000111111000110110011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101111101100011010101000100011, input B: 10001111110011011001111011101011; output Z: 01000111100000111111000110110011
# FPU_mult: WAIT
# -- input A: 11101111101100011010101000100011, input B: 10001111110011011001111011101011; output Z: 01000111100000111111000110110011
# FPU_mult: SEND
# -- input A: 11101111101100011010101000100011, input B: 10001111110011011001111011101011; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = -6.72212e+22, input B = 9.13636e+26, output OUT = -inf
# dadda_mult: input A = 11100101011000111100000100011111, input B = 01101100001111001110111101110110, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111101110100011100010100111111, input B: 10010010100110010001000011010110; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 01111101110100011100010100111111, input B: 10010010100110010001000011010110; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 01111101110100011100010100111111, input B: 10010010100110010001000011010110; output Z: 01000000000011101011001110001000
# 
# dadda_mult: input A = -1.09969e+29, input B = -2.02758e-29, output OUT = 2.22971
# dadda_mult: input A = 11101111101100011010101000100011, input B = 10001111110011011001111011101011, output OUT = 01000000000011101011001110001000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111100001010011101100101100100, input B: 10011100100010000101011100000000; output Z: 01000000000011101011001110001000
# FPU_mult: WAIT
# -- input A: 01111100001010011101100101100100, input B: 10011100100010000101011100000000; output Z: 01000000000011101011001110001000
# FPU_mult: SEND
# -- input A: 01111100001010011101100101100100, input B: 10011100100010000101011100000000; output Z: 11010000111110101101100101011101
# 
# dadda_mult: input A = 3.48541e+37, input B = -9.65981e-28, output OUT = -3.36684e+10
# dadda_mult: input A = 01111101110100011100010100111111, input B = 10010010100110010001000011010110, output OUT = 11010000111110101101100101011101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10001001101011011000101110010010, input B: 00100100000010110110011110011010; output Z: 11010000111110101101100101011101
# FPU_mult: WAIT
# -- input A: 10001001101011011000101110010010, input B: 00100100000010110110011110011010; output Z: 11010000111110101101100101011101
# FPU_mult: SEND
# -- input A: 10001001101011011000101110010010, input B: 00100100000010110110011110011010; output Z: 11011001001101001110101001101100
# 
# dadda_mult: input A = 3.52763e+36, input B = -9.02221e-22, output OUT = -3.1827e+15
# dadda_mult: input A = 01111100001010011101100101100100, input B = 10011100100010000101011100000000, output OUT = 11011001001101001110101001101100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000011100011111010110111100110, input B: 00010111110011001001000001111101; output Z: 11011001001101001110101001101100
# FPU_mult: WAIT
# -- input A: 10000011100011111010110111100110, input B: 00010111110011001001000001111101; output Z: 11011001001101001110101001101100
# FPU_mult: SEND
# -- input A: 10000011100011111010110111100110, input B: 00010111110011001001000001111101; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -4.17795e-33, input B = 3.02286e-17, output OUT = -0
# dadda_mult: input A = 10001001101011011000101110010010, input B = 00100100000010110110011110011010, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00011011100100000110010110100010, input B: 01101000001100010010011111010000; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00011011100100000110010110100010, input B: 01101000001100010010011111010000; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00011011100100000110010110100010, input B: 01101000001100010010011111010000; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -8.44471e-37, input B = 1.32197e-24, output OUT = -0
# dadda_mult: input A = 10000011100011111010110111100110, input B = 00010111110011001001000001111101, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001100100000010001011001101010, input B: 01111011000000100110110101110011; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11001100100000010001011001101010, input B: 01111011000000100110110101110011; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11001100100000010001011001101010, input B: 01111011000000100110110101110011; output Z: 01000100010001111101100101110100
# 
# dadda_mult: input A = 2.38885e-22, input B = 3.34637e+24, output OUT = 799.398
# dadda_mult: input A = 00011011100100000110010110100010, input B = 01101000001100010010011111010000, output OUT = 01000100010001111101100101110100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101111011000011000100100101010, input B: 01000011000010000010111111011101; output Z: 01000100010001111101100101110100
# FPU_mult: WAIT
# -- input A: 00101111011000011000100100101010, input B: 01000011000010000010111111011101; output Z: 01000100010001111101100101110100
# FPU_mult: SEND
# -- input A: 00101111011000011000100100101010, input B: 01000011000010000010111111011101; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = -6.76791e+07, input B = 6.77218e+35, output OUT = -inf
# dadda_mult: input A = 11001100100000010001011001101010, input B = 01111011000000100110110101110011, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101100100101101101000111111011, input B: 10000101101101011001000111100111; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 00101100100101101101000111111011, input B: 10000101101101011001000111100111; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 00101100100101101101000111111011, input B: 10000101101101011001000111100111; output Z: 00110010111011111111011000010010
# 
# dadda_mult: input A = 2.05124e-10, input B = 136.187, output OUT = 2.79352e-08
# dadda_mult: input A = 00101111011000011000100100101010, input B = 01000011000010000010111111011101, output OUT = 00110010111011111111011000010010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100000100000111011110001101000, input B: 11000110111100100010010111100000; output Z: 00110010111011111111011000010010
# FPU_mult: WAIT
# -- input A: 01100000100000111011110001101000, input B: 11000110111100100010010111100000; output Z: 00110010111011111111011000010010
# FPU_mult: SEND
# -- input A: 01100000100000111011110001101000, input B: 11000110111100100010010111100000; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 4.28657e-12, input B = -1.70748e-35, output OUT = -0
# dadda_mult: input A = 00101100100101101101000111111011, input B = 10000101101101011001000111100111, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000111110001001001000000011010, input B: 01011100110000101010111011000010; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 10000111110001001001000000011010, input B: 01011100110000101010111011000010; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 10000111110001001001000000011010, input B: 01011100110000101010111011000010; output Z: 11100111111110010011011100110000
# 
# dadda_mult: input A = 7.59406e+19, input B = -30994.9, output OUT = -2.35377e+24
# dadda_mult: input A = 01100000100000111011110001101000, input B = 11000110111100100010010111100000, output OUT = 11100111111110010011011100110000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100101111010100010000011001110, input B: 01010110000001011010111110101011; output Z: 11100111111110010011011100110000
# FPU_mult: WAIT
# -- input A: 00100101111010100010000011001110, input B: 01010110000001011010111110101011; output Z: 11100111111110010011011100110000
# FPU_mult: SEND
# -- input A: 00100101111010100010000011001110, input B: 01010110000001011010111110101011; output Z: 10100101000101010111101101100011
# 
# dadda_mult: input A = -2.95755e-34, input B = 4.38386e+17, output OUT = -1.29655e-16
# dadda_mult: input A = 10000111110001001001000000011010, input B = 01011100110000101010111011000010, output OUT = 10100101000101010111101101100011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110100100110010011110100101101, input B: 00000101001101010100001110100000; output Z: 10100101000101010111101101100011
# FPU_mult: WAIT
# -- input A: 11110100100110010011110100101101, input B: 00000101001101010100001110100000; output Z: 10100101000101010111101101100011
# FPU_mult: SEND
# -- input A: 11110100100110010011110100101101, input B: 00000101001101010100001110100000; output Z: 00111100011101001000011101101000
# 
# dadda_mult: input A = 4.06148e-16, input B = 3.67474e+13, output OUT = 0.0149249
# dadda_mult: input A = 00100101111010100010000011001110, input B = 01010110000001011010111110101011, output OUT = 00111100011101001000011101101000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111100000100111011101100101010, input B: 00001111110111101001000111100100; output Z: 00111100011101001000011101101000
# FPU_mult: WAIT
# -- input A: 10111100000100111011101100101010, input B: 00001111110111101001000111100100; output Z: 00111100011101001000011101101000
# FPU_mult: SEND
# -- input A: 10111100000100111011101100101010, input B: 00001111110111101001000111100100; output Z: 10111010010110010000000101110111
# 
# dadda_mult: input A = -9.71267e+31, input B = 8.523e-36, output OUT = -0.000827811
# dadda_mult: input A = 11110100100110010011110100101101, input B = 00000101001101010100001110100000, output OUT = 10111010010110010000000101110111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101000101011001010000000110000, input B: 01000000001001111000000110111101; output Z: 10111010010110010000000101110111
# FPU_mult: WAIT
# -- input A: 10101000101011001010000000110000, input B: 01000000001001111000000110111101; output Z: 10111010010110010000000101110111
# FPU_mult: SEND
# -- input A: 10101000101011001010000000110000, input B: 01000000001001111000000110111101; output Z: 10001100100000000111000001111111
# 
# dadda_mult: input A = -0.00901679, input B = 2.19471e-29, output OUT = -1.97892e-31
# dadda_mult: input A = 10111100000100111011101100101010, input B = 00001111110111101001000111100100, output OUT = 10001100100000000111000001111111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101101100000100010101111110000, input B: 01010010011001010000100011100101; output Z: 10001100100000000111000001111111
# FPU_mult: WAIT
# -- input A: 00101101100000100010101111110000, input B: 01010010011001010000100011100101; output Z: 10001100100000000111000001111111
# FPU_mult: SEND
# -- input A: 00101101100000100010101111110000, input B: 01010010011001010000100011100101; output Z: 10101001011000011110011111110111
# 
# dadda_mult: input A = -1.91653e-14, input B = 2.61729, output OUT = -5.01612e-14
# dadda_mult: input A = 10101000101011001010000000110000, input B = 01000000001001111000000110111101, output OUT = 10101001011000011110011111110111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111101110000001010011111110101, input B: 11010101100000010100101101010011; output Z: 10101001011000011110011111110111
# FPU_mult: WAIT
# -- input A: 10111101110000001010011111110101, input B: 11010101100000010100101101010011; output Z: 10101001011000011110011111110111
# FPU_mult: SEND
# -- input A: 10111101110000001010011111110101, input B: 11010101100000010100101101010011; output Z: 01000000011010001110101110100111
# 
# dadda_mult: input A = 1.47988e-11, input B = 2.45924e+11, output OUT = 3.63938
# dadda_mult: input A = 00101101100000100010101111110000, input B = 01010010011001010000100011100101, output OUT = 01000000011010001110101110100111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010110010000011011011111100000, input B: 00000000101011100001000101100000; output Z: 01000000011010001110101110100111
# FPU_mult: WAIT
# -- input A: 01010110010000011011011111100000, input B: 00000000101011100001000101100000; output Z: 01000000011010001110101110100111
# FPU_mult: SEND
# -- input A: 01010110010000011011011111100000, input B: 00000000101011100001000101100000; output Z: 01010011110000101001101010100100
# 
# dadda_mult: input A = -0.0940704, input B = -1.77701e+13, output OUT = 1.67164e+12
# dadda_mult: input A = 10111101110000001010011111110101, input B = 11010101100000010100101101010011, output OUT = 01010011110000101001101010100100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101000001101000011101001000010, input B: 00011001111010110111001110000000; output Z: 01010011110000101001101010100100
# FPU_mult: WAIT
# -- input A: 10101000001101000011101001000010, input B: 00011001111010110111001110000000; output Z: 01010011110000101001101010100100
# FPU_mult: SEND
# -- input A: 10101000001101000011101001000010, input B: 00011001111010110111001110000000; output Z: 00010111100000111011100000100000
# 
# dadda_mult: input A = 5.32489e+13, input B = 1.59856e-38, output OUT = 8.51216e-25
# dadda_mult: input A = 01010110010000011011011111100000, input B = 00000000101011100001000101100000, output OUT = 00010111100000111011100000100000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000001010000100100101011111010, input B: 10110000001100101111111010000010; output Z: 00010111100000111011100000100000
# FPU_mult: WAIT
# -- input A: 00000001010000100100101011111010, input B: 10110000001100101111111010000010; output Z: 00010111100000111011100000100000
# FPU_mult: SEND
# -- input A: 00000001010000100100101011111010, input B: 10110000001100101111111010000010; output Z: 10000010101001011100001011001011
# 
# dadda_mult: input A = -1.00046e-14, input B = 2.43451e-23, output OUT = -2.43564e-37
# dadda_mult: input A = 10101000001101000011101001000010, input B = 00011001111010110111001110000000, output OUT = 10000010101001011100001011001011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000111011001010101110011000001, input B: 01010000101101000010001101010101; output Z: 10000010101001011100001011001011
# FPU_mult: WAIT
# -- input A: 11000111011001010101110011000001, input B: 01010000101101000010001101010101; output Z: 10000010101001011100001011001011
# FPU_mult: SEND
# -- input A: 11000111011001010101110011000001, input B: 01010000101101000010001101010101; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 3.5686e-38, input B = -6.51177e-10, output OUT = -0
# dadda_mult: input A = 00000001010000100100101011111010, input B = 10110000001100101111111010000010, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011011100001011110110100010000, input B: 10011110011010111000000101110101; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 10011011100001011110110100010000, input B: 10011110011010111000000101110101; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 10011011100001011110110100010000, input B: 10011110011010111000000101110101; output Z: 11011000101000010110010011100000
# 
# dadda_mult: input A = -58716.8, input B = 2.41777e+10, output OUT = -1.41964e+15
# dadda_mult: input A = 11000111011001010101110011000001, input B = 01010000101101000010001101010101, output OUT = 11011000101000010110010011100000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101011110110000101101001001011, input B: 11001110110101100010100011110100; output Z: 11011000101000010110010011100000
# FPU_mult: WAIT
# -- input A: 10101011110110000101101001001011, input B: 11001110110101100010100011110100; output Z: 11011000101000010110010011100000
# FPU_mult: SEND
# -- input A: 10101011110110000101101001001011, input B: 11001110110101100010100011110100; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = -2.21562e-22, input B = -1.24676e-20, output OUT = 0
# dadda_mult: input A = 10011011100001011110110100010000, input B = 10011110011010111000000101110101, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000010001101101000100100000011, input B: 00001110100011111101011101101000; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 10000010001101101000100100000011, input B: 00001110100011111101011101101000; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 10000010001101101000100100000011, input B: 00001110100011111101011101101000; output Z: 00111011001101001111111000010111
# 
# dadda_mult: input A = -1.53728e-12, input B = -1.7965e+09, output OUT = 0.00276173
# dadda_mult: input A = 10101011110110000101101001001011, input B = 11001110110101100010100011110100, output OUT = 00111011001101001111111000010111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000010110111111101111100001110, input B: 10001110110110010101010100001000; output Z: 00111011001101001111111000010111
# FPU_mult: WAIT
# -- input A: 01000010110111111101111100001110, input B: 10001110110110010101010100001000; output Z: 00111011001101001111111000010111
# FPU_mult: SEND
# -- input A: 01000010110111111101111100001110, input B: 10001110110110010101010100001000; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -1.34106e-37, input B = 3.54597e-30, output OUT = -0
# dadda_mult: input A = 10000010001101101000100100000011, input B = 00001110100011111101011101101000, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00011010110100101100010111100010, input B: 01111111101001001001111101011110; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00011010110100101100010111100010, input B: 01111111101001001001111101011110; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00011010110100101100010111100010, input B: 01111111101001001001111101011110; output Z: 10010010001111100000111001101111
# 
# dadda_mult: input A = 111.936, input B = -5.35765e-30, output OUT = -5.99712e-28
# dadda_mult: input A = 01000010110111111101111100001110, input B = 10001110110110010101010100001000, output OUT = 10010010001111100000111001101111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000101110101101001000110000111, input B: 01001100011111010111101101001001; output Z: 10010010001111100000111001101111
# FPU_mult: WAIT
# -- input A: 01000101110101101001000110000111, input B: 01001100011111010111101101001001; output Z: 10010010001111100000111001101111
# FPU_mult: SEND
# -- input A: 01000101110101101001000110000111, input B: 01001100011111010111101101001001; output Z: 01111111110000000000000000000000
# 
# dadda_mult: input A = 8.71737e-23, input B = nan, output OUT = nan
# dadda_mult: input A = 00011010110100101100010111100010, input B = 01111111101001001001111101011110, output OUT = 01111111110000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000100110100101010100110010001, input B: 10010101111000100010000110111101; output Z: 01111111110000000000000000000000
# FPU_mult: WAIT
# -- input A: 00000100110100101010100110010001, input B: 10010101111000100010000110111101; output Z: 01111111110000000000000000000000
# FPU_mult: SEND
# -- input A: 00000100110100101010100110010001, input B: 10010101111000100010000110111101; output Z: 01010010110101000111010100101000
# 
# dadda_mult: input A = 6866.19, input B = 6.64487e+07, output OUT = 4.56249e+11
# dadda_mult: input A = 01000101110101101001000110000111, input B = 01001100011111010111101101001001, output OUT = 01010010110101000111010100101000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001011110111101101100101111000, input B: 10101000111011011111101110101101; output Z: 01010010110101000111010100101000
# FPU_mult: WAIT
# -- input A: 00001011110111101101100101111000, input B: 10101000111011011111101110101101; output Z: 01010010110101000111010100101000
# FPU_mult: SEND
# -- input A: 00001011110111101101100101111000, input B: 10101000111011011111101110101101; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 4.95265e-36, input B = -9.13339e-26, output OUT = -0
# dadda_mult: input A = 00000100110100101010100110010001, input B = 10010101111000100010000110111101, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000001001000100100010100111011, input B: 00010001001010101110110100001110; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11000001001000100100010100111011, input B: 00010001001010101110110100001110; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11000001001000100100010100111011, input B: 00010001001010101110110100001110; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 8.58385e-32, input B = -2.64214e-14, output OUT = -0
# dadda_mult: input A = 00001011110111101101100101111000, input B = 10101000111011011111101110101101, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100110101110111011100000110100, input B: 11110010110111110101011101011001; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00100110101110111011100000110100, input B: 11110010110111110101011101011001; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00100110101110111011100000110100, input B: 11110010110111110101011101011001; output Z: 10010010110110001011000001111000
# 
# dadda_mult: input A = -10.1419, input B = 1.34837e-28, output OUT = -1.3675e-27
# dadda_mult: input A = 11000001001000100100010100111011, input B = 00010001001010101110110100001110, output OUT = 10010010110110001011000001111000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011101010111011101000111101110, input B: 10111110101010100100010101010111; output Z: 10010010110110001011000001111000
# FPU_mult: WAIT
# -- input A: 11011101010111011101000111101110, input B: 10111110101010100100010101010111; output Z: 10010010110110001011000001111000
# FPU_mult: SEND
# -- input A: 11011101010111011101000111101110, input B: 10111110101010100100010101010111; output Z: 11011010001000111100010110000010
# 
# dadda_mult: input A = 1.30257e-15, input B = -8.84746e+30, output OUT = -1.15244e+16
# dadda_mult: input A = 00100110101110111011100000110100, input B = 11110010110111110101011101011001, output OUT = 11011010001000111100010110000010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00011000101000110100001100010010, input B: 10001010001101001010111011011001; output Z: 11011010001000111100010110000010
# FPU_mult: WAIT
# -- input A: 00011000101000110100001100010010, input B: 10001010001101001010111011011001; output Z: 11011010001000111100010110000010
# FPU_mult: SEND
# -- input A: 00011000101000110100001100010010, input B: 10001010001101001010111011011001; output Z: 01011100100100111000100101111101
# 
# dadda_mult: input A = -9.98989e+17, input B = -0.33256, output OUT = 3.32224e+17
# dadda_mult: input A = 11011101010111011101000111101110, input B = 10111110101010100100010101010111, output OUT = 01011100100100111000100101111101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111101100111011000110101011010, input B: 10011111100011111101011101100001; output Z: 01011100100100111000100101111101
# FPU_mult: WAIT
# -- input A: 10111101100111011000110101011010, input B: 10011111100011111101011101100001; output Z: 01011100100100111000100101111101
# FPU_mult: SEND
# -- input A: 10111101100111011000110101011010, input B: 10011111100011111101011101100001; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 4.22022e-24, input B = -8.69957e-33, output OUT = -0
# dadda_mult: input A = 00011000101000110100001100010010, input B = 10001010001101001010111011011001, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011010101110000011001110010100, input B: 00011100010111011001000110100100; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01011010101110000011001110010100, input B: 00011100010111011001000110100100; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01011010101110000011001110010100, input B: 00011100010111011001000110100100; output Z: 00011101101100010000110100000101
# 
# dadda_mult: input A = -0.0769298, input B = -6.09192e-20, output OUT = 4.6865e-21
# dadda_mult: input A = 10111101100111011000110101011010, input B = 10011111100011111101011101100001, output OUT = 00011101101100010000110100000101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011011101110101010111001001111, input B: 11000101001110100001111101111010; output Z: 00011101101100010000110100000101
# FPU_mult: WAIT
# -- input A: 01011011101110101010111001001111, input B: 11000101001110100001111101111010; output Z: 00011101101100010000110100000101
# FPU_mult: SEND
# -- input A: 01011011101110101010111001001111, input B: 11000101001110100001111101111010; output Z: 00110111100111110110110101010010
# 
# dadda_mult: input A = 2.59241e+16, input B = 7.3311e-22, output OUT = 1.90052e-05
# dadda_mult: input A = 01011010101110000011001110010100, input B = 00011100010111011001000110100100, output OUT = 00110111100111110110110101010010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10001011100111001001000001001000, input B: 10000111001110010000101110001110; output Z: 00110111100111110110110101010010
# FPU_mult: WAIT
# -- input A: 10001011100111001001000001001000, input B: 10000111001110010000101110001110; output Z: 00110111100111110110110101010010
# FPU_mult: SEND
# -- input A: 10001011100111001001000001001000, input B: 10000111001110010000101110001110; output Z: 11100001100001111011100110011001
# 
# dadda_mult: input A = 1.05092e+17, input B = -2977.97, output OUT = -3.12961e+20
# dadda_mult: input A = 01011011101110101010111001001111, input B = 11000101001110100001111101111010, output OUT = 11100001100001111011100110011001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011010110110000100100100111011, input B: 01011101011111101101000010011111; output Z: 11100001100001111011100110011001
# FPU_mult: WAIT
# -- input A: 11011010110110000100100100111011, input B: 01011101011111101101000010011111; output Z: 11100001100001111011100110011001
# FPU_mult: SEND
# -- input A: 11011010110110000100100100111011, input B: 01011101011111101101000010011111; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = -6.03061e-32, input B = -1.39212e-34, output OUT = 0
# dadda_mult: input A = 10001011100111001001000001001000, input B = 10000111001110010000101110001110, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101100101111011100011100101001, input B: 10111010111001101100100110010100; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 10101100101111011100011100101001, input B: 10111010111001101100100110010100; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 10101100101111011100011100101001, input B: 10111010111001101100100110010100; output Z: 11111000110101110100100011101010
# 
# dadda_mult: input A = -3.04396e+16, input B = 1.14758e+18, output OUT = -3.4932e+34
# dadda_mult: input A = 11011010110110000100100100111011, input B = 01011101011111101101000010011111, output OUT = 11111000110101110100100011101010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100000000110001100010101001001, input B: 00010001010001001110010011010010; output Z: 11111000110101110100100011101010
# FPU_mult: WAIT
# -- input A: 10100000000110001100010101001001, input B: 00010001010001001110010011010010; output Z: 11111000110101110100100011101010
# FPU_mult: SEND
# -- input A: 10100000000110001100010101001001, input B: 00010001010001001110010011010010; output Z: 00101000001010110001011001011110
# 
# dadda_mult: input A = -5.39381e-12, input B = -0.00176077, output OUT = 9.49726e-15
# dadda_mult: input A = 10101100101111011100011100101001, input B = 10111010111001101100100110010100, output OUT = 00101000001010110001011001011110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110101100111010011000000101010, input B: 00010111000011100001111101001000; output Z: 00101000001010110001011001011110
# FPU_mult: WAIT
# -- input A: 11110101100111010011000000101010, input B: 00010111000011100001111101001000; output Z: 00101000001010110001011001011110
# FPU_mult: SEND
# -- input A: 11110101100111010011000000101010, input B: 00010111000011100001111101001000; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -1.29402e-19, input B = 1.55322e-28, output OUT = -0
# dadda_mult: input A = 10100000000110001100010101001001, input B = 00010001010001001110010011010010, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111011110001000100000010101110, input B: 01010010100001010010100001101110; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01111011110001000100000010101110, input B: 01010010100001010010100001101110; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01111011110001000100000010101110, input B: 01010010100001010010100001101110; output Z: 11001101001011101000011111011001
# 
# dadda_mult: input A = -3.98519e+32, input B = 4.59222e-25, output OUT = -1.83009e+08
# dadda_mult: input A = 11110101100111010011000000101010, input B = 00010111000011100001111101001000, output OUT = 11001101001011101000011111011001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001000011010111000110011001111, input B: 10001011000001000110111110100000; output Z: 11001101001011101000011111011001
# FPU_mult: WAIT
# -- input A: 00001000011010111000110011001111, input B: 10001011000001000110111110100000; output Z: 11001101001011101000011111011001
# FPU_mult: SEND
# -- input A: 00001000011010111000110011001111, input B: 10001011000001000110111110100000; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 2.038e+36, input B = 2.85954e+11, output OUT = inf
# dadda_mult: input A = 01111011110001000100000010101110, input B = 01010010100001010010100001101110, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100110000110001010010011110111, input B: 00111110011111011001100001011011; output Z: 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11100110000110001010010011110111, input B: 00111110011111011001100001011011; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11100110000110001010010011110111, input B: 00111110011111011001100001011011; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 7.08833e-34, input B = -2.55063e-32, output OUT = -0
# dadda_mult: input A = 00001000011010111000110011001111, input B = 10001011000001000110111110100000, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001000000101000001111011001001, input B: 10001110010000101011010100111111; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01001000000101000001111011001001, input B: 10001110010000101011010100111111; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01001000000101000001111011001001, input B: 10001110010000101011010100111111; output Z: 11100101000101110011010111100000
# 
# dadda_mult: input A = -1.80211e+23, input B = 0.247652, output OUT = -4.46294e+22
# dadda_mult: input A = 11100110000110001010010011110111, input B = 00111110011111011001100001011011, output OUT = 11100101000101110011010111100000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111010110000000000000001111011, input B: 11100111000101010010011100001110; output Z: 11100101000101110011010111100000
# FPU_mult: WAIT
# -- input A: 01111010110000000000000001111011, input B: 11100111000101010010011100001110; output Z: 11100101000101110011010111100000
# FPU_mult: SEND
# -- input A: 01111010110000000000000001111011, input B: 11100111000101010010011100001110; output Z: 10010110111000010101000001100101
# 
# dadda_mult: input A = 151675, input B = -2.39996e-30, output OUT = -3.64014e-25
# dadda_mult: input A = 01001000000101000001111011001001, input B = 10001110010000101011010100111111, output OUT = 10010110111000010101000001100101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010000001100010001110001110000, input B: 10011111000110110101010101011110; output Z: 10010110111000010101000001100101
# FPU_mult: WAIT
# -- input A: 01010000001100010001110001110000, input B: 10011111000110110101010101011110; output Z: 10010110111000010101000001100101
# FPU_mult: SEND
# -- input A: 01010000001100010001110001110000, input B: 10011111000110110101010101011110; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 4.98465e+35, input B = -7.04353e+23, output OUT = -inf
# dadda_mult: input A = 01111010110000000000000001111011, input B = 11100111000101010010011100001110, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10001001101000110001101011101111, input B: 11100011011011010010001010100001; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10001001101000110001101011101111, input B: 11100011011011010010001010100001; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10001001101000110001101011101111, input B: 11100011011011010010001010100001; output Z: 10101111110101101110111010001111
# 
# dadda_mult: input A = 1.18857e+10, input B = -3.28931e-20, output OUT = -3.90959e-10
# dadda_mult: input A = 01010000001100010001110001110000, input B = 10011111000110110101010101011110, output OUT = 10101111110101101110111010001111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111111001100101011101001111010, input B: 10101100000110010110110011101001; output Z: 10101111110101101110111010001111
# FPU_mult: WAIT
# -- input A: 00111111001100101011101001111010, input B: 10101100000110010110110011101001; output Z: 10101111110101101110111010001111
# FPU_mult: SEND
# -- input A: 00111111001100101011101001111010, input B: 10101100000110010110110011101001; output Z: 00101101100101110001010111111111
# 
# dadda_mult: input A = -3.92662e-33, input B = -4.37437e+21, output OUT = 1.71765e-11
# dadda_mult: input A = 10001001101000110001101011101111, input B = 11100011011011010010001010100001, output OUT = 00101101100101110001010111111111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100000001000001000001101001001, input B: 01000111100011000010101001010100; output Z: 00101101100101110001010111111111
# FPU_mult: WAIT
# -- input A: 10100000001000001000001101001001, input B: 01000111100011000010101001010100; output Z: 00101101100101110001010111111111
# FPU_mult: SEND
# -- input A: 10100000001000001000001101001001, input B: 01000111100011000010101001010100; output Z: 10101011110101100011101011111001
# 
# dadda_mult: input A = 0.698158, input B = -2.18031e-12, output OUT = -1.5222e-12
# dadda_mult: input A = 00111111001100101011101001111010, input B = 10101100000110010110110011101001, output OUT = 10101011110101100011101011111001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100100111001101010110111100001, input B: 10001110101100101110100001011010; output Z: 10101011110101100011101011111001
# FPU_mult: WAIT
# -- input A: 00100100111001101010110111100001, input B: 10001110101100101110100001011010; output Z: 10101011110101100011101011111001
# FPU_mult: SEND
# -- input A: 00100100111001101010110111100001, input B: 10001110101100101110100001011010; output Z: 10101000001011111100010010101100
# 
# dadda_mult: input A = -1.3596e-19, input B = 71764.7, output OUT = -9.7571e-15
# dadda_mult: input A = 10100000001000001000001101001001, input B = 01000111100011000010101001010100, output OUT = 10101000001011111100010010101100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10001101111100011001101000100100, input B: 00101101100011001111110000110010; output Z: 10101000001011111100010010101100
# FPU_mult: WAIT
# -- input A: 10001101111100011001101000100100, input B: 00101101100011001111110000110010; output Z: 10101000001011111100010010101100
# FPU_mult: SEND
# -- input A: 10001101111100011001101000100100, input B: 00101101100011001111110000110010; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 1.00041e-16, input B = -4.41041e-30, output OUT = -0
# dadda_mult: input A = 00100100111001101010110111100001, input B = 10001110101100101110100001011010, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101101010011100010001100001000, input B: 11100101011111011101010010101000; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00101101010011100010001100001000, input B: 11100101011111011101010010101000; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00101101010011100010001100001000, input B: 11100101011111011101010010101000; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -1.48899e-30, input B = 1.60282e-11, output OUT = -0
# dadda_mult: input A = 10001101111100011001101000100100, input B = 00101101100011001111110000110010, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010110111001000000110100000010, input B: 10001111111010011000101010100011; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 11010110111001000000110100000010, input B: 10001111111010011000101010100011; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11010110111001000000110100000010, input B: 10001111111010011000101010100011; output Z: 11010011010011000110001111011011
# 
# dadda_mult: input A = 1.17175e-11, input B = -7.49176e+22, output OUT = -8.77849e+11
# dadda_mult: input A = 00101101010011100010001100001000, input B = 11100101011111011101010010101000, output OUT = 11010011010011000110001111011011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010000000110100011110010100000, input B: 01101101100011110100101001001100; output Z: 11010011010011000110001111011011
# FPU_mult: WAIT
# -- input A: 11010000000110100011110010100000, input B: 01101101100011110100101001001100; output Z: 11010011010011000110001111011011
# FPU_mult: SEND
# -- input A: 11010000000110100011110010100000, input B: 01101101100011110100101001001100; output Z: 00100111010100000000101101010111
# 
# dadda_mult: input A = -1.25372e+14, input B = -2.3029e-29, output OUT = 2.88719e-15
# dadda_mult: input A = 11010110111001000000110100000010, input B = 10001111111010011000101010100011, output OUT = 00100111010100000000101101010111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001011101000100101110100111000, input B: 11010110011100110011100011010000; output Z: 00100111010100000000101101010111
# FPU_mult: WAIT
# -- input A: 01001011101000100101110100111000, input B: 11010110011100110011100011010000; output Z: 00100111010100000000101101010111
# FPU_mult: SEND
# -- input A: 01001011101000100101110100111000, input B: 11010110011100110011100011010000; output Z: 11111110001011001010100101000001
# 
# dadda_mult: input A = -1.03507e+10, input B = 5.54327e+27, output OUT = -5.73765e+37
# dadda_mult: input A = 11010000000110100011110010100000, input B = 01101101100011110100101001001100, output OUT = 11111110001011001010100101000001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011010011101101110001110101110, input B: 10100110111001110101101001110110; output Z: 11111110001011001010100101000001
# FPU_mult: WAIT
# -- input A: 10011010011101101110001110101110, input B: 10100110111001110101101001110110; output Z: 11111110001011001010100101000001
# FPU_mult: SEND
# -- input A: 10011010011101101110001110101110, input B: 10100110111001110101101001110110; output Z: 11100010100110100100001010000100
# 
# dadda_mult: input A = 2.12814e+07, input B = -6.68563e+13, output OUT = -1.4228e+21
# dadda_mult: input A = 01001011101000100101110100111000, input B = 11010110011100110011100011010000, output OUT = 11100010100110100100001010000100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10010010101010110011011000101101, input B: 00101111100111010110011000010000; output Z: 11100010100110100100001010000100
# FPU_mult: WAIT
# -- input A: 10010010101010110011011000101101, input B: 00101111100111010110011000010000; output Z: 11100010100110100100001010000100
# FPU_mult: SEND
# -- input A: 10010010101010110011011000101101, input B: 00101111100111010110011000010000; output Z: 00000001110111110001111010110000
# 
# dadda_mult: input A = -5.10555e-23, input B = -1.60534e-15, output OUT = 8.19613e-38
# dadda_mult: input A = 10011010011101101110001110101110, input B = 10100110111001110101101001110110, output OUT = 00000001110111110001111010110000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010001010011100001011100001001, input B: 11011011101001111011101101111011; output Z: 00000001110111110001111010110000
# FPU_mult: WAIT
# -- input A: 11010001010011100001011100001001, input B: 11011011101001111011101101111011; output Z: 00000001110111110001111010110000
# FPU_mult: SEND
# -- input A: 11010001010011100001011100001001, input B: 11011011101001111011101101111011; output Z: 10000010110100101000100011111000
# 
# dadda_mult: input A = -1.0805e-27, input B = 2.86307e-10, output OUT = -3.09353e-37
# dadda_mult: input A = 10010010101010110011011000101101, input B = 00101111100111010110011000010000, output OUT = 10000010110100101000100011111000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101000111101110011011110000101, input B: 10110001100000010100010100111100; output Z: 10000010110100101000100011111000
# FPU_mult: WAIT
# -- input A: 11101000111101110011011110000101, input B: 10110001100000010100010100111100; output Z: 10000010110100101000100011111000
# FPU_mult: SEND
# -- input A: 11101000111101110011011110000101, input B: 10110001100000010100010100111100; output Z: 01101101100001110000011111110101
# 
# dadda_mult: input A = -5.53219e+10, input B = -9.44249e+16, output OUT = 5.22376e+27
# dadda_mult: input A = 11010001010011100001011100001001, input B = 11011011101001111011101101111011, output OUT = 01101101100001110000011111110101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101001001111110100110011101001, input B: 10001000000000110010001010001000; output Z: 01101101100001110000011111110101
# FPU_mult: WAIT
# -- input A: 10101001001111110100110011101001, input B: 10001000000000110010001010001000; output Z: 01101101100001110000011111110101
# FPU_mult: SEND
# -- input A: 10101001001111110100110011101001, input B: 10001000000000110010001010001000; output Z: 01011010111110011010101110101100
# 
# dadda_mult: input A = -9.33959e+24, input B = -3.76227e-09, output OUT = 3.5138e+16
# dadda_mult: input A = 11101000111101110011011110000101, input B = 10110001100000010100010100111100, output OUT = 01011010111110011010101110101100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10010111100110111101000110110101, input B: 11001010100011101111100100000001; output Z: 01011010111110011010101110101100
# FPU_mult: WAIT
# -- input A: 10010111100110111101000110110101, input B: 11001010100011101111100100000001; output Z: 01011010111110011010101110101100
# FPU_mult: SEND
# -- input A: 10010111100110111101000110110101, input B: 11001010100011101111100100000001; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = -4.24772e-14, input B = -3.9462e-34, output OUT = 0
# dadda_mult: input A = 10101001001111110100110011101001, input B = 10001000000000110010001010001000, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110110110000101010100001011100, input B: 10111111001100001110011010011111; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01110110110000101010100001011100, input B: 10111111001100001110011010011111; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01110110110000101010100001011100, input B: 10111111001100001110011010011111; output Z: 00100010101011100000101111000100
# 
# dadda_mult: input A = -1.00696e-24, input B = -4.68493e+06, output OUT = 4.71753e-18
# dadda_mult: input A = 10010111100110111101000110110101, input B = 11001010100011101111100100000001, output OUT = 00100010101011100000101111000100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100100111110110000010001011110, input B: 01110011001001110011110001110011; output Z: 00100010101011100000101111000100
# FPU_mult: WAIT
# -- input A: 00100100111110110000010001011110, input B: 01110011001001110011110001110011; output Z: 00100010101011100000101111000100
# FPU_mult: SEND
# -- input A: 00100100111110110000010001011110, input B: 01110011001001110011110001110011; output Z: 11110110100001101000001100011011
# 
# dadda_mult: input A = 1.97406e+33, input B = -0.691019, output OUT = -1.36412e+33
# dadda_mult: input A = 01110110110000101010100001011100, input B = 10111111001100001110011010011111, output OUT = 11110110100001101000001100011011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011010110111010010100111110001, input B: 00100100111010000111110001111010; output Z: 11110110100001101000001100011011
# FPU_mult: WAIT
# -- input A: 11011010110111010010100111110001, input B: 00100100111010000111110001111010; output Z: 11110110100001101000001100011011
# FPU_mult: SEND
# -- input A: 11011010110111010010100111110001, input B: 00100100111010000111110001111010; output Z: 01011000101000111111101100011111
# 
# dadda_mult: input A = 1.08861e-16, input B = 1.32498e+31, output OUT = 1.44239e+15
# dadda_mult: input A = 00100100111110110000010001011110, input B = 01110011001001110011110001110011, output OUT = 01011000101000111111101100011111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00011110110001011010010000010111, input B: 00001000000101000001101011001011; output Z: 01011000101000111111101100011111
# FPU_mult: WAIT
# -- input A: 00011110110001011010010000010111, input B: 00001000000101000001101011001011; output Z: 01011000101000111111101100011111
# FPU_mult: SEND
# -- input A: 00011110110001011010010000010111, input B: 00001000000101000001101011001011; output Z: 11000000010010001101100110001100
# 
# dadda_mult: input A = -3.1126e+16, input B = 1.00825e-16, output OUT = -3.13828
# dadda_mult: input A = 11011010110111010010100111110001, input B = 00100100111010000111110001111010, output OUT = 11000000010010001101100110001100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011110111101000011001011100000, input B: 11001001111111010110011110100001; output Z: 11000000010010001101100110001100
# FPU_mult: WAIT
# -- input A: 10011110111101000011001011100000, input B: 11001001111111010110011110100001; output Z: 11000000010010001101100110001100
# FPU_mult: SEND
# -- input A: 10011110111101000011001011100000, input B: 11001001111111010110011110100001; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = 2.09261e-20, input B = 4.45686e-34, output OUT = 0
# dadda_mult: input A = 00011110110001011010010000010111, input B = 00001000000101000001101011001011, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100010010110110111000101111001, input B: 01110111110011111011011000100110; output Z: 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00100010010110110111000101111001, input B: 01110111110011111011011000100110; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00100010010110110111000101111001, input B: 01110111110011111011011000100110; output Z: 00101001011100011011100100100001
# 
# dadda_mult: input A = -2.58555e-20, input B = -2.07589e+06, output OUT = 5.36733e-14
# dadda_mult: input A = 10011110111101000011001011100000, input B = 11001001111111010110011110100001, output OUT = 00101001011100011011100100100001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10001100111001000011101100111001, input B: 01111011000001000110000000101110; output Z: 00101001011100011011100100100001
# FPU_mult: WAIT
# -- input A: 10001100111001000011101100111001, input B: 01111011000001000110000000101110; output Z: 00101001011100011011100100100001
# FPU_mult: SEND
# -- input A: 10001100111001000011101100111001, input B: 01111011000001000110000000101110; output Z: 01011010101100100000110011100100
# 
# dadda_mult: input A = 2.97401e-18, input B = 8.42578e+33, output OUT = 2.50584e+16
# dadda_mult: input A = 00100010010110110111000101111001, input B = 01110111110011111011011000100110, output OUT = 01011010101100100000110011100100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11111110101101000010000111101111, input B: 00101000101000111100001010000101; output Z: 01011010101100100000110011100100
# FPU_mult: WAIT
# -- input A: 11111110101101000010000111101111, input B: 00101000101000111100001010000101; output Z: 01011010101100100000110011100100
# FPU_mult: SEND
# -- input A: 11111110101101000010000111101111, input B: 00101000101000111100001010000101; output Z: 11001000011011000000100010010001
# 
# dadda_mult: input A = -3.51646e-31, input B = 6.87334e+35, output OUT = -241698
# dadda_mult: input A = 10001100111001000011101100111001, input B = 01111011000001000110000000101110, output OUT = 11001000011011000000100010010001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010001011011001010100111010101, input B: 10001000111111110010100000101110; output Z: 11001000011011000000100010010001
# FPU_mult: WAIT
# -- input A: 11010001011011001010100111010101, input B: 10001000111111110010100000101110; output Z: 11001000011011000000100010010001
# FPU_mult: SEND
# -- input A: 11010001011011001010100111010101, input B: 10001000111111110010100000101110; output Z: 11100111111001100111010011110101
# 
# dadda_mult: input A = -1.19719e+38, input B = 1.8181e-14, output OUT = -2.1766e+24
# dadda_mult: input A = 11111110101101000010000111101111, input B = 00101000101000111100001010000101, output OUT = 11100111111001100111010011110101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011010111101011010110111011000, input B: 01011110001011010011100101000011; output Z: 11100111111001100111010011110101
# FPU_mult: WAIT
# -- input A: 11011010111101011010110111011000, input B: 01011110001011010011100101000011; output Z: 11100111111001100111010011110101
# FPU_mult: SEND
# -- input A: 11011010111101011010110111011000, input B: 01011110001011010011100101000011; output Z: 00011010111010111110001001010000
# 
# dadda_mult: input A = -6.35288e+10, input B = -1.53567e-33, output OUT = 9.75593e-23
# dadda_mult: input A = 11010001011011001010100111010101, input B = 10001000111111110010100000101110, output OUT = 00011010111010111110001001010000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001010000100111010101101101000, input B: 10010011111101010000011100001000; output Z: 00011010111010111110001001010000
# FPU_mult: WAIT
# -- input A: 11001010000100111010101101101000, input B: 10010011111101010000011100001000; output Z: 00011010111010111110001001010000
# FPU_mult: SEND
# -- input A: 11001010000100111010101101101000, input B: 10010011111101010000011100001000; output Z: 11111001101001100011110101101111
# 
# dadda_mult: input A = -3.45763e+16, input B = 3.12052e+18, output OUT = -1.07896e+35
# dadda_mult: input A = 11011010111101011010110111011000, input B = 01011110001011010011100101000011, output OUT = 11111001101001100011110101101111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100101101101000100101000010010, input B: 01011001101000001011111101101101; output Z: 11111001101001100011110101101111
# FPU_mult: WAIT
# -- input A: 00100101101101000100101000010010, input B: 01011001101000001011111101101101; output Z: 11111001101001100011110101101111
# FPU_mult: SEND
# -- input A: 00100101101101000100101000010010, input B: 01011001101000001011111101101101; output Z: 00011110100011010101011100011001
# 
# dadda_mult: input A = -2.41942e+06, input B = -6.18536e-27, output OUT = 1.4965e-20
# dadda_mult: input A = 11001010000100111010101101101000, input B = 10010011111101010000011100001000, output OUT = 00011110100011010101011100011001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000010001111000010101110010110, input B: 00111110111011000101000111000100; output Z: 00011110100011010101011100011001
# FPU_mult: WAIT
# -- input A: 10000010001111000010101110010110, input B: 00111110111011000101000111000100; output Z: 00011110100011010101011100011001
# FPU_mult: SEND
# -- input A: 10000010001111000010101110010110, input B: 00111110111011000101000111000100; output Z: 00111111111000100110101000110111
# 
# dadda_mult: input A = 3.12752e-16, input B = 5.65581e+15, output OUT = 1.76887
# dadda_mult: input A = 00100101101101000100101000010010, input B = 01011001101000001011111101101101, output OUT = 00111111111000100110101000110111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010100111001101111101011000001, input B: 00001011100101110001001010010101; output Z: 00111111111000100110101000110111
# FPU_mult: WAIT
# -- input A: 11010100111001101111101011000001, input B: 00001011100101110001001010010101; output Z: 00111111111000100110101000110111
# FPU_mult: SEND
# -- input A: 11010100111001101111101011000001, input B: 00001011100101110001001010010101; output Z: 10000001101011011011010001001000
# 
# dadda_mult: input A = -1.38246e-37, input B = 0.461561, output OUT = -6.38089e-38
# dadda_mult: input A = 10000010001111000010101110010110, input B = 00111110111011000101000111000100, output OUT = 10000001101011011011010001001000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010101001010011011110001110010, input B: 10101110000100101000110101001100; output Z: 10000001101011011011010001001000
# FPU_mult: WAIT
# -- input A: 01010101001010011011110001110010, input B: 10101110000100101000110101001100; output Z: 10000001101011011011010001001000
# FPU_mult: SEND
# -- input A: 01010101001010011011110001110010, input B: 10101110000100101000110101001100; output Z: 10100001000010000100111010101100
# 
# dadda_mult: input A = -7.9364e+12, input B = 5.8191e-32, output OUT = -4.61827e-19
# dadda_mult: input A = 11010100111001101111101011000001, input B = 00001011100101110001001010010101, output OUT = 10100001000010000100111010101100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101010110100010010101111010110, input B: 10110101100001101000000110110111; output Z: 10100001000010000100111010101100
# FPU_mult: WAIT
# -- input A: 01101010110100010010101111010110, input B: 10110101100001101000000110110111; output Z: 10100001000010000100111010101100
# FPU_mult: SEND
# -- input A: 01101010110100010010101111010110, input B: 10110101100001101000000110110111; output Z: 11000011110000100101011001010000
# 
# dadda_mult: input A = 1.16642e+13, input B = -3.33221e-11, output OUT = -388.674
# dadda_mult: input A = 01010101001010011011110001110010, input B = 10101110000100101000110101001100, output OUT = 11000011110000100101011001010000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000001000000101111100000111111, input B: 01000100110000000011110100100001; output Z: 11000011110000100101011001010000
# FPU_mult: WAIT
# -- input A: 11000001000000101111100000111111, input B: 01000100110000000011110100100001; output Z: 11000011110000100101011001010000
# FPU_mult: SEND
# -- input A: 11000001000000101111100000111111, input B: 01000100110000000011110100100001; output Z: 11100000110110111100110111011101
# 
# dadda_mult: input A = 1.26436e+26, input B = -1.00215e-06, output OUT = -1.26708e+20
# dadda_mult: input A = 01101010110100010010101111010110, input B = 10110101100001101000000110110111, output OUT = 11100000110110111100110111011101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010000010100111110011011000010, input B: 11101111111111000101100111111101; output Z: 11100000110110111100110111011101
# FPU_mult: WAIT
# -- input A: 00010000010100111110011011000010, input B: 11101111111111000101100111111101; output Z: 11100000110110111100110111011101
# FPU_mult: SEND
# -- input A: 00010000010100111110011011000010, input B: 11101111111111000101100111111101; output Z: 11000110010001001011001011101011
# 
# dadda_mult: input A = -8.18561, input B = 1537.91, output OUT = -12588.7
# dadda_mult: input A = 11000001000000101111100000111111, input B = 01000100110000000011110100100001, output OUT = 11000110010001001011001011101011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101110001000010011010011001010, input B: 10001110010010000010010011100110; output Z: 11000110010001001011001011101011
# FPU_mult: WAIT
# -- input A: 01101110001000010011010011001010, input B: 10001110010010000010010011100110; output Z: 11000110010001001011001011101011
# FPU_mult: SEND
# -- input A: 01101110001000010011010011001010, input B: 10001110010010000010010011100110; output Z: 11000000110100001110000110100100
# 
# dadda_mult: input A = 4.17902e-29, input B = -1.56198e+29, output OUT = -6.52754
# dadda_mult: input A = 00010000010100111110011011000010, input B = 11101111111111000101100111111101, output OUT = 11000000110100001110000110100100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010110100110111011101011000110, input B: 10110000011110010010111001010001; output Z: 11000000110100001110000110100100
# FPU_mult: WAIT
# -- input A: 01010110100110111011101011000110, input B: 10110000011110010010111001010001; output Z: 11000000110100001110000110100100
# FPU_mult: SEND
# -- input A: 01010110100110111011101011000110, input B: 10110000011110010010111001010001; output Z: 10111100111111000001000011110100
# 
# dadda_mult: input A = 1.24727e+28, input B = -2.46697e-30, output OUT = -0.0307698
# dadda_mult: input A = 01101110001000010011010011001010, input B = 10001110010010000010010011100110, output OUT = 10111100111111000001000011110100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001010010101001001010101101000, input B: 01000100010001110100100101000001; output Z: 10111100111111000001000011110100
# FPU_mult: WAIT
# -- input A: 00001010010101001001010101101000, input B: 01000100010001110100100101000001; output Z: 10111100111111000001000011110100
# FPU_mult: SEND
# -- input A: 00001010010101001001010101101000, input B: 01000100010001110100100101000001; output Z: 11000111100101111001010011010111
# 
# dadda_mult: input A = 8.56132e+13, input B = -9.06515e-10, output OUT = -77609.7
# dadda_mult: input A = 01010110100110111011101011000110, input B = 10110000011110010010111001010001, output OUT = 11000111100101111001010011010111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011110000000110010110011100100, input B: 11100011101101011001101011010110; output Z: 11000111100101111001010011010111
# FPU_mult: WAIT
# -- input A: 10011110000000110010110011100100, input B: 11100011101101011001101011010110; output Z: 11000111100101111001010011010111
# FPU_mult: SEND
# -- input A: 10011110000000110010110011100100, input B: 11100011101101011001101011010110; output Z: 00001111001001010111110011111000
# 
# dadda_mult: input A = 1.02355e-32, input B = 797.145, output OUT = 8.1592e-30
# dadda_mult: input A = 00001010010101001001010101101000, input B = 01000100010001110100100101000001, output OUT = 00001111001001010111110011111000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110110100101101101111101000111, input B: 01111010001101001101010011101001; output Z: 00001111001001010111110011111000
# FPU_mult: WAIT
# -- input A: 11110110100101101101111101000111, input B: 01111010001101001101010011101001; output Z: 00001111001001010111110011111000
# FPU_mult: SEND
# -- input A: 11110110100101101101111101000111, input B: 01111010001101001101010011101001; output Z: 01000010001110100001110000101000
# 
# dadda_mult: input A = -6.94437e-21, input B = -6.70004e+21, output OUT = 46.5275
# dadda_mult: input A = 10011110000000110010110011100100, input B = 11100011101101011001101011010110, output OUT = 01000010001110100001110000101000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101101000011101011101110001001, input B: 00111011000011101001000010111100; output Z: 01000010001110100001110000101000
# FPU_mult: WAIT
# -- input A: 01101101000011101011101110001001, input B: 00111011000011101001000010111100; output Z: 01000010001110100001110000101000
# FPU_mult: SEND
# -- input A: 01101101000011101011101110001001, input B: 00111011000011101001000010111100; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = -1.53003e+33, input B = 2.34733e+35, output OUT = -inf
# dadda_mult: input A = 11110110100101101101111101000111, input B = 01111010001101001101010011101001, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001110101000100010111010000000, input B: 10000101011101110000001010101100; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11001110101000100010111010000000, input B: 10000101011101110000001010101100; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11001110101000100010111010000000, input B: 10000101011101110000001010101100; output Z: 01101000100111101111100101110001
# 
# dadda_mult: input A = 2.76085e+27, input B = 0.00217537, output OUT = 6.00588e+24
# dadda_mult: input A = 01101101000011101011101110001001, input B = 00111011000011101001000010111100, output OUT = 01101000100111101111100101110001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100011011111110101101000111110, input B: 01101001100100001011000110001000; output Z: 01101000100111101111100101110001
# FPU_mult: WAIT
# -- input A: 00100011011111110101101000111110, input B: 01101001100100001011000110001000; output Z: 01101000100111101111100101110001
# FPU_mult: SEND
# -- input A: 00100011011111110101101000111110, input B: 01101001100100001011000110001000; output Z: 00010100100111000111110010001111
# 
# dadda_mult: input A = -1.36048e+09, input B = -1.16144e-35, output OUT = 1.58011e-26
# dadda_mult: input A = 11001110101000100010111010000000, input B = 10000101011101110000001010101100, output OUT = 00010100100111000111110010001111
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011111010101111010011001111101, input B: 00000011001000000111111110100001; output Z: 00010100100111000111110010001111
# FPU_mult: WAIT
# -- input A: 10011111010101111010011001111101, input B: 00000011001000000111111110100001; output Z: 00010100100111000111110010001111
# FPU_mult: SEND
# -- input A: 10011111010101111010011001111101, input B: 00000011001000000111111110100001; output Z: 01001101100100000101001111011000
# 
# dadda_mult: input A = 1.38427e-17, input B = 2.18655e+25, output OUT = 3.02677e+08
# dadda_mult: input A = 00100011011111110101101000111110, input B = 01101001100100001011000110001000, output OUT = 01001101100100000101001111011000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11111100000010011010111010101011, input B: 10011111101110000101001101100110; output Z: 01001101100100000101001111011000
# FPU_mult: WAIT
# -- input A: 11111100000010011010111010101011, input B: 10011111101110000101001101100110; output Z: 01001101100100000101001111011000
# FPU_mult: SEND
# -- input A: 11111100000010011010111010101011, input B: 10011111101110000101001101100110; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -4.56657e-20, input B = 4.71663e-37, output OUT = -0
# dadda_mult: input A = 10011111010101111010011001111101, input B = 00000011001000000111111110100001, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111100010110110111110110010100, input B: 01101110010111001001011100011111; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00111100010110110111110110010100, input B: 01101110010111001001011100011111; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00111100010110110111110110010100, input B: 01101110010111001001011100011111; output Z: 01011100010001100100010011001011
# 
# dadda_mult: input A = -2.85955e+36, input B = -7.8065e-20, output OUT = 2.23231e+17
# dadda_mult: input A = 11111100000010011010111010101011, input B = 10011111101110000101001101100110, output OUT = 01011100010001100100010011001011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001111000011000001110110100100, input B: 01010110011000110110000010010011; output Z: 01011100010001100100010011001011
# FPU_mult: WAIT
# -- input A: 00001111000011000001110110100100, input B: 01010110011000110110000010010011; output Z: 01011100010001100100010011001011
# FPU_mult: SEND
# -- input A: 00001111000011000001110110100100, input B: 01010110011000110110000010010011; output Z: 01101011001111010010000101111101
# 
# dadda_mult: input A = 0.0133966, input B = 1.70673e+28, output OUT = 2.28645e+26
# dadda_mult: input A = 00111100010110110111110110010100, input B = 01101110010111001001011100011111, output OUT = 01101011001111010010000101111101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011100011011011100010101011110, input B: 01011100101110011000111001000110; output Z: 01101011001111010010000101111101
# FPU_mult: WAIT
# -- input A: 10011100011011011100010101011110, input B: 01011100101110011000111001000110; output Z: 01101011001111010010000101111101
# FPU_mult: SEND
# -- input A: 10011100011011011100010101011110, input B: 01011100101110011000111001000110; output Z: 00100101111110001110011001001000
# 
# dadda_mult: input A = 6.90824e-30, input B = 6.2501e+13, output OUT = 4.31772e-16
# dadda_mult: input A = 00001111000011000001110110100100, input B = 01010110011000110110000010010011, output OUT = 00100101111110001110011001001000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111010001100101101110100110111, input B: 10000100011011110111011111011011; output Z: 00100101111110001110011001001000
# FPU_mult: WAIT
# -- input A: 00111010001100101101110100110111, input B: 10000100011011110111011111011011; output Z: 00100101111110001110011001001000
# FPU_mult: SEND
# -- input A: 00111010001100101101110100110111, input B: 10000100011011110111011111011011; output Z: 10111001101011000101011111000101
# 
# dadda_mult: input A = -7.86718e-22, input B = 4.17834e+17, output OUT = -0.000328718
# dadda_mult: input A = 10011100011011011100010101011110, input B = 01011100101110011000111001000110, output OUT = 10111001101011000101011111000101
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100000010101110110110011011110, input B: 11010011100100011111110111110011; output Z: 10111001101011000101011111000101
# FPU_mult: WAIT
# -- input A: 00100000010101110110110011011110, input B: 11010011100100011111110111110011; output Z: 10111001101011000101011111000101
# FPU_mult: SEND
# -- input A: 00100000010101110110110011011110, input B: 11010011100100011111110111110011; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 0.000682312, input B = -2.81493e-36, output OUT = -0
# dadda_mult: input A = 00111010001100101101110100110111, input B = 10000100011011110111011111011011, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000000001100100101111100001111, input B: 10101011001101100111101111010010; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00000000001100100101111100001111, input B: 10101011001101100111101111010010; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00000000001100100101111100001111, input B: 10101011001101100111101111010010; output Z: 10110100011101011011010010111010
# 
# dadda_mult: input A = 1.82472e-19, input B = -1.25406e+12, output OUT = -2.28832e-07
# dadda_mult: input A = 00100000010101110110110011011110, input B = 11010011100100011111110111110011, output OUT = 10110100011101011011010010111010
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000010000010000010000110100101, input B: 01001101110100000000010000100010; output Z: 10110100011101011011010010111010
# FPU_mult: WAIT
# -- input A: 01000010000010000010000110100101, input B: 01001101110100000000010000100010; output Z: 10110100011101011011010010111010
# FPU_mult: SEND
# -- input A: 01000010000010000010000110100101, input B: 01001101110100000000010000100010; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 4.62588e-39, input B = -6.48312e-13, output OUT = -0
# dadda_mult: input A = 00000000001100100101111100001111, input B = 10101011001101100111101111010010, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101111010011000101100110011110, input B: 10111110101000110011010010101100; output Z: 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01101111010011000101100110011110, input B: 10111110101000110011010010101100; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01101111010011000101100110011110, input B: 10111110101000110011010010101100; output Z: 01010000010111010011101100010001
# 
# dadda_mult: input A = 34.0329, input B = 4.36241e+08, output OUT = 1.48465e+10
# dadda_mult: input A = 01000010000010000010000110100101, input B = 01001101110100000000010000100010, output OUT = 01010000010111010011101100010001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001010000010101011010101011000, input B: 11001110100010100001110111110000; output Z: 01010000010111010011101100010001
# FPU_mult: WAIT
# -- input A: 00001010000010101011010101011000, input B: 11001110100010100001110111110000; output Z: 01010000010111010011101100010001
# FPU_mult: SEND
# -- input A: 00001010000010101011010101011000, input B: 11001110100010100001110111110000; output Z: 11101110100000100100011100011011
# 
# dadda_mult: input A = 6.32433e+28, input B = -0.318761, output OUT = -2.01595e+28
# dadda_mult: input A = 01101111010011000101100110011110, input B = 10111110101000110011010010101100, output OUT = 11101110100000100100011100011011
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101100011011111011101100011001, input B: 00100110001000011110000011011000; output Z: 11101110100000100100011100011011
# FPU_mult: WAIT
# -- input A: 01101100011011111011101100011001, input B: 00100110001000011110000011011000; output Z: 11101110100000100100011100011011
# FPU_mult: SEND
# -- input A: 01101100011011111011101100011001, input B: 00100110001000011110000011011000; output Z: 10011001000101011010101111110100
# 
# dadda_mult: input A = 6.67857e-33, input B = -1.15861e+09, output OUT = -7.73785e-24
# dadda_mult: input A = 00001010000010101011010101011000, input B = 11001110100010100001110111110000, output OUT = 10011001000101011010101111110100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100010001000110011101011101000, input B: 11111011010001100011111000101010; output Z: 10011001000101011010101111110100
# FPU_mult: WAIT
# -- input A: 01100010001000110011101011101000, input B: 11111011010001100011111000101010; output Z: 10011001000101011010101111110100
# FPU_mult: SEND
# -- input A: 01100010001000110011101011101000, input B: 11111011010001100011111000101010; output Z: 01010011000101111001011100111001
# 
# dadda_mult: input A = 1.15927e+27, input B = 5.61628e-16, output OUT = 6.51077e+11
# dadda_mult: input A = 01101100011011111011101100011001, input B = 00100110001000011110000011011000, output OUT = 01010011000101111001011100111001
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010100101011001000110000010101, input B: 00101111010011001101110010111010; output Z: 01010011000101111001011100111001
# FPU_mult: WAIT
# -- input A: 00010100101011001000110000010101, input B: 00101111010011001101110010111010; output Z: 01010011000101111001011100111001
# FPU_mult: SEND
# -- input A: 00010100101011001000110000010101, input B: 00101111010011001101110010111010; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 7.52766e+20, input B = -1.02934e+36, output OUT = -inf
# dadda_mult: input A = 01100010001000110011101011101000, input B = 11111011010001100011111000101010, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110100001101010010110011111001, input B: 11100010001101011110000111110010; output Z: 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10110100001101010010110011111001, input B: 11100010001101011110000111110010; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10110100001101010010110011111001, input B: 11100010001101011110000111110010; output Z: 00000100100010100001010001100110
# 
# dadda_mult: input A = 1.74228e-26, input B = 1.86321e-10, output OUT = 3.24624e-36
# dadda_mult: input A = 00010100101011001000110000010101, input B = 00101111010011001101110010111010, output OUT = 00000100100010100001010001100110
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100011111000100000101001011001, input B: 10010100011000000110100011001100; output Z: 00000100100010100001010001100110
# FPU_mult: WAIT
# -- input A: 11100011111000100000101001011001, input B: 10010100011000000110100011001100; output Z: 00000100100010100001010001100110
# FPU_mult: SEND
# -- input A: 11100011111000100000101001011001, input B: 10010100011000000110100011001100; output Z: 01010111000000001011100010110100
# 
# dadda_mult: input A = -1.68733e-07, input B = -8.38785e+20, output OUT = 1.41531e+14
# dadda_mult: input A = 10110100001101010010110011111001, input B = 11100010001101011110000111110010, output OUT = 01010111000000001011100010110100
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110010111101100001000011110111, input B: 01101111111110110110011000000111; output Z: 01010111000000001011100010110100
# FPU_mult: WAIT
# -- input A: 00110010111101100001000011110111, input B: 01101111111110110110011000000111; output Z: 01010111000000001011100010110100
quit -sim
# End time: 14:36:27 on Apr 14,2021, Elapsed time: 0:02:50
# Errors: 2, Warnings: 21
do run_sim.do
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:00 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/common/fpnormalize_fpnormalize.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Loading package STD_LOGIC_UNSIGNED
# -- Compiling entity FPnormalize
# -- Compiling architecture FPnormalize of FPnormalize
# End time: 14:37:00 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:00 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/common/packfp_packfp.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity PackFP
# -- Compiling architecture PackFP of PackFP
# End time: 14:37:01 on Apr 14,2021, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:01 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/common/fpround_fpround.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Loading package STD_LOGIC_UNSIGNED
# -- Compiling entity FPround
# -- Compiling architecture FPround of FPround
# End time: 14:37:01 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:01 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/common/unpackfp_unpackfp.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity UnpackFP
# -- Compiling architecture UnpackFP of UnpackFP
# End time: 14:37:02 on Apr 14,2021, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:02 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/multiplier/fpmul_stage1_struct.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity FPmul_stage1
# -- Compiling architecture struct of FPmul_stage1
# -- Loading entity UnpackFP
# End time: 14:37:02 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:02 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/multiplier/fpmul_stage2_struct_mbe.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity FPmul_stage2
# -- Compiling architecture struct of FPmul_stage2
# End time: 14:37:03 on Apr 14,2021, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:03 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/multiplier/fpmul_stage3_struct.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity FPmul_stage3
# -- Compiling architecture struct of FPmul_stage3
# -- Loading package STD_LOGIC_UNSIGNED
# -- Loading entity FPnormalize
# -- Loading entity FPround
# End time: 14:37:03 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:03 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/multiplier/fpmul_stage4_struct.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity FPmul_stage4
# -- Compiling architecture struct of FPmul_stage4
# -- Loading package STD_LOGIC_UNSIGNED
# -- Loading entity FPnormalize
# -- Loading entity PackFP
# End time: 14:37:04 on Apr 14,2021, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:04 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/fpuvhdl/multiplier/fpmul_pipeline.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package std_logic_arith
# -- Compiling entity FPmul
# -- Compiling architecture pipeline of FPmul
# -- Loading entity FPmul_stage1
# -- Loading entity FPmul_stage2
# -- Loading entity FPmul_stage3
# -- Loading entity FPmul_stage4
# End time: 14:37:04 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:04 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/HA.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity HA
# -- Compiling architecture struct of HA
# End time: 14:37:05 on Apr 14,2021, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:05 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/FA.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity FA
# -- Compiling architecture struct of FA
# End time: 14:37:05 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:05 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/MBE.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity MBE_n
# -- Compiling architecture behavioural of MBE_n
# End time: 14:37:06 on Apr 14,2021, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# QuestaSim-64 vcom 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:06 on Apr 14,2021
# vcom -reportprogress 30 -work work ../src/MBE_mult.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity MBE_mult
# -- Compiling architecture behavioural of MBE_mult
# End time: 14:37:06 on Apr 14,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# QuestaSim-64 vlog 10.7c Compiler 2018.08 Aug 17 2018
# Start time: 14:37:07 on Apr 14,2021
# vlog -reportprogress 300 -sv ../tb/top.sv 
# ** Note: (vlog-2286) ../tb/top.sv(2): Using implicit +incdir+/software/mentor/questa10.7c/questasim/uvm-1.1d/../verilog_src/uvm-1.1d/src from import uvm_pkg
# -- Compiling package top_sv_unit
# -- Importing package mtiUvm.uvm_pkg (uvm-1.1d Built-in)
# ** Warning: ../tb/monitor.sv(49): (vlog-2240) Treating stand-alone use of function 'begin_tr' as an implicit VOID cast.
# ** Warning: ../tb/monitor_out.sv(48): (vlog-2240) Treating stand-alone use of function 'begin_tr' as an implicit VOID cast.
# -- Compiling interface dut_if
# -- Compiling module DUT
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 14:37:12 on Apr 14,2021, Elapsed time: 0:00:05
# Errors: 0, Warnings: 2
# vsim top 
# Start time: 14:37:12 on Apr 14,2021
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# Loading sv_std.std
# Loading mtiUvm.uvm_pkg
# Loading work.top_sv_unit(fast)
# Loading work.top(fast)
# Loading work.DUT(fast)
# Loading mtiUvm.questa_uvm_pkg(fast)
# Loading work.dut_if(fast)
# Loading std.standard
# Loading std.textio(body)
# Loading ieee.std_logic_1164(body)
# Loading ieee.std_logic_arith(body)
# Loading work.fpmul(pipeline)#1
# Loading work.fpmul_stage1(struct)#1
# Loading work.unpackfp(unpackfp)#1
# Loading work.fpmul_stage2(struct)#1
# Loading ieee.numeric_std(body)
# Loading work.mbe_mult(behavioural)#1
# Loading work.mbe_n(behavioural)#1
# Loading ieee.std_logic_unsigned(body)
# Loading work.fpmul_stage3(struct)#1
# Loading work.fpnormalize(fpnormalize)#1
# Loading work.fpround(fpround)#1
# Loading work.fpmul_stage4(struct)#1
# Loading work.packfp(packfp)#1
# ** Warning: (vsim-3839) Variable '/top/out/data', driven via a port connection, is multiply driven. See ../src/DUT.sv(3).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum File: ../src/DUT.sv Line: 12
# ** Warning: (vsim-3764) Stand-alone call to function 'begin_tr' treated as implicit void cast.
#    Time: 0 ns  Iteration: 0  Region: /top_sv_unit::driver File: ../tb/driver.sv Line: 67
# Loading /software/mentor/questa10.7c/questasim/uvm-1.1d/linux_x86_64/uvm_dpi.so
# ----------------------------------------------------------------
# UVM-1.1d
# (C) 2007-2013 Mentor Graphics Corporation
# (C) 2007-2013 Cadence Design Systems, Inc.
# (C) 2006-2013 Synopsys, Inc.
# (C) 2011-2013 Cypress Semiconductor Corp.
# ----------------------------------------------------------------
# 
#   ***********       IMPORTANT RELEASE NOTES         ************
# 
#   You are using a version of the UVM library that has been compiled
#   with `UVM_NO_DEPRECATED undefined.
#   See http://www.eda.org/svdb/view.php?id=3313 for more details.
# 
#   You are using a version of the UVM library that has been compiled
#   with `UVM_OBJECT_MUST_HAVE_CONSTRUCTOR undefined.
#   See http://www.eda.org/svdb/view.php?id=3770 for more details.
# 
#       (Specify +UVM_NO_RELNOTES to turn off this notice)
# 
# UVM_INFO verilog_src/questa_uvm_pkg-1.2/src/questa_uvm_pkg.sv(215) @ 0: reporter [Questa UVM] QUESTA_UVM-1.2.3
# UVM_INFO verilog_src/questa_uvm_pkg-1.2/src/questa_uvm_pkg.sv(216) @ 0: reporter [Questa UVM]  questa_uvm::init(+struct)
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I3/I11
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I3/I11
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 0  Instance: /top/sum/fpmul_under_test/I2
# UVM_INFO @ 0: reporter [RNTST] Running test simple_test...
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 1  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 1  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 1  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 0 ns  Iteration: 1  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 5 ns  Iteration: 3  Instance: /top/sum/fpmul_under_test/I3/I11
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 5 ns  Iteration: 3  Instance: /top/sum/fpmul_under_test/I3/I11
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 15 ns  Iteration: 2  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 15 ns  Iteration: 2  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 15 ns  Iteration: 2  Instance: /top/sum/fpmul_under_test/I2
# ** Warning: There is an 'U'|'X'|'W'|'Z'|'-' in an arithmetic operand, the result will be 'X'(es).
#    Time: 15 ns  Iteration: 2  Instance: /top/sum/fpmul_under_test/I2
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101011100100100110001111011001, input B: 00001010011100000010010111111101; output Z: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# REFMOD compute
# refmod: input A = 0, input B = 0, output OUT = 0
# refmod: input A = 00000000000000000000000000000000, input B = 00000000000000000000000000000000, output OUT = 00000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00101011100100100110001111011001, input B: 00001010011100000010010111111101; output Z: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# FPU_mult: SEND
# -- input A: 00101011100100100110001111011001, input B: 00001010011100000010010111111101; output Z: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# 
# dadda_mult: input A = 0, input B = 0, output OUT = 0
# dadda_mult: input A = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, input B = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, output OUT = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# UVM_INFO @ 55: reporter [MISCMP] Miscompare for exp.data: lhs = 'h0 : rhs = 'h0xxxxxxxx
# UVM_INFO @ 55: reporter [MISCMP] 1 Miscompare(s) for object tr@825 vs. exp@617
# UVM_WARNING @ 55: uvm_test_top.env_h.comp [Comparator Mismatch] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000100110010100111111010001011, input B: 10100001000100100111100111110100; output Z: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# REFMOD compute
# refmod: input A = 1.04016e-12, input B = 1.15627e-32, output OUT = 1.26117e-44
# refmod: input A = 00101011100100100110001111011001, input B = 00001010011100000010010111111101, output OUT = 00000000000000000000000000001001
# FPU_mult: WAIT
# -- input A: 00000100110010100111111010001011, input B: 10100001000100100111100111110100; output Z: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# FPU_mult: SEND
# -- input A: 00000100110010100111111010001011, input B: 10100001000100100111100111110100; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = 1.04016e-12, input B = 1.15627e-32, output OUT = 0
# dadda_mult: input A = 00101011100100100110001111011001, input B = 00001010011100000010010111111101, output OUT = 00000000000000000000000000000000
# UVM_INFO @ 85: reporter [MISCMP] Miscompare for exp.data: lhs = 'h9 : rhs = 'h0
# UVM_INFO @ 85: reporter [MISCMP] 1 Miscompare(s) for object tr@825 vs. exp@617
# UVM_WARNING @ 85: uvm_test_top.env_h.comp [Comparator Mismatch] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001111100011001011000101110100, input B: 11100011010001010000100100011010; output Z: 00000000000000000000000000000000
# REFMOD compute
# refmod: input A = 4.76062e-36, input B = -4.96281e-19, output OUT = -0
# refmod: input A = 00000100110010100111111010001011, input B = 10100001000100100111100111110100, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00001111100011001011000101110100, input B: 11100011010001010000100100011010; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00001111100011001011000101110100, input B: 11100011010001010000100100011010; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 4.76062e-36, input B = -4.96281e-19, output OUT = -0
# dadda_mult: input A = 00000100110010100111111010001011, input B = 10100001000100100111100111110100, output OUT = 10000000000000000000000000000000
# UVM_INFO @ 115: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11111110001100001111011010001100, input B: 11110100010111100000111001101111; output Z: 10000000000000000000000000000000
# REFMOD compute
# refmod: input A = 1.38734e-29, input B = -3.63466e+21, output OUT = -5.04252e-08
# refmod: input A = 00001111100011001011000101110100, input B = 11100011010001010000100100011010, output OUT = 10110011010110001001001100011110
# FPU_mult: WAIT
# -- input A: 11111110001100001111011010001100, input B: 11110100010111100000111001101111; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11111110001100001111011010001100, input B: 11110100010111100000111001101111; output Z: 10110011010110001001001100011110
# 
# dadda_mult: input A = 1.38734e-29, input B = -3.63466e+21, output OUT = -5.04252e-08
# dadda_mult: input A = 00001111100011001011000101110100, input B = 11100011010001010000100100011010, output OUT = 10110011010110001001001100011110
# UVM_INFO @ 145: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011111110111100000100101001111, input B: 11011101011110011000010111101101; output Z: 10110011010110001001001100011110
# REFMOD compute
# refmod: input A = -5.88061e+37, input B = -7.03725e+31, output OUT = inf
# refmod: input A = 11111110001100001111011010001100, input B = 11110100010111100000111001101111, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10011111110111100000100101001111, input B: 11011101011110011000010111101101; output Z: 10110011010110001001001100011110
# FPU_mult: SEND
# -- input A: 10011111110111100000100101001111, input B: 11011101011110011000010111101101; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -5.88061e+37, input B = -7.03725e+31, output OUT = inf
# dadda_mult: input A = 11111110001100001111011010001100, input B = 11110100010111100000111001101111, output OUT = 01111111100000000000000000000000
# UVM_INFO @ 175: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001000010111101000011100010110, input B: 01000010010000011100101111110100; output Z: 01111111100000000000000000000000
# REFMOD compute
# refmod: input A = -9.40361e-20, input B = -1.12375e+18, output OUT = 0.105673
# refmod: input A = 10011111110111100000100101001111, input B = 11011101011110011000010111101101, output OUT = 00111101110110000110101100110110
# FPU_mult: WAIT
# -- input A: 00001000010111101000011100010110, input B: 01000010010000011100101111110100; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 00001000010111101000011100010110, input B: 01000010010000011100101111110100; output Z: 00111101110110000110101100110110
# 
# dadda_mult: input A = -9.40361e-20, input B = -1.12375e+18, output OUT = 0.105673
# dadda_mult: input A = 10011111110111100000100101001111, input B = 11011101011110011000010111101101, output OUT = 00111101110110000110101100110110
# UVM_INFO @ 205: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100000001011111110001101011011, input B: 11101011010001101100101111001101; output Z: 00111101110110000110101100110110
# REFMOD compute
# refmod: input A = 6.69645e-34, input B = 48.4492, output OUT = 3.24437e-32
# refmod: input A = 00001000010111101000011100010110, input B = 01000010010000011100101111110100, output OUT = 00001011001010000111010100100001
# FPU_mult: WAIT
# -- input A: 11100000001011111110001101011011, input B: 11101011010001101100101111001101; output Z: 00111101110110000110101100110110
# FPU_mult: SEND
# -- input A: 11100000001011111110001101011011, input B: 11101011010001101100101111001101; output Z: 00001011001010000111010100100001
# 
# dadda_mult: input A = 6.69645e-34, input B = 48.4492, output OUT = 3.24437e-32
# dadda_mult: input A = 00001000010111101000011100010110, input B = 01000010010000011100101111110100, output OUT = 00001011001010000111010100100001
# UVM_INFO @ 235: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10010110111000011011110110000001, input B: 11001000111100010001110000110000; output Z: 00001011001010000111010100100001
# REFMOD compute
# refmod: input A = -5.06963e+19, input B = -2.4033e+26, output OUT = inf
# refmod: input A = 11100000001011111110001101011011, input B = 11101011010001101100101111001101, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10010110111000011011110110000001, input B: 11001000111100010001110000110000; output Z: 00001011001010000111010100100001
# FPU_mult: SEND
# -- input A: 10010110111000011011110110000001, input B: 11001000111100010001110000110000; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -5.06963e+19, input B = -2.4033e+26, output OUT = inf
# dadda_mult: input A = 11100000001011111110001101011011, input B = 11101011010001101100101111001101, output OUT = 01111111100000000000000000000000
# UVM_INFO @ 265: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100110110101000110101101011100, input B: 11001110011001010101000000111101; output Z: 01111111100000000000000000000000
# REFMOD compute
# refmod: input A = -3.64703e-25, input B = -493794, output OUT = 1.80088e-19
# refmod: input A = 10010110111000011011110110000001, input B = 11001000111100010001110000110000, output OUT = 00100000010101001001110001000001
# FPU_mult: WAIT
# -- input A: 11100110110101000110101101011100, input B: 11001110011001010101000000111101; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11100110110101000110101101011100, input B: 11001110011001010101000000111101; output Z: 00100000010101001001110001000001
# 
# dadda_mult: input A = -3.64703e-25, input B = -493794, output OUT = 1.80088e-19
# dadda_mult: input A = 10010110111000011011110110000001, input B = 11001000111100010001110000110000, output OUT = 00100000010101001001110001000001
# UVM_INFO @ 295: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10001101011101001001111010100100, input B: 10101111001000100101100101001001; output Z: 00100000010101001001110001000001
# REFMOD compute
# refmod: input A = -5.01561e+23, input B = -9.6181e+08, output OUT = 4.82407e+32
# refmod: input A = 11100110110101000110101101011100, input B = 11001110011001010101000000111101, output OUT = 01110101101111100100011010011101
# FPU_mult: WAIT
# -- input A: 10001101011101001001111010100100, input B: 10101111001000100101100101001001; output Z: 00100000010101001001110001000001
# FPU_mult: SEND
# -- input A: 10001101011101001001111010100100, input B: 10101111001000100101100101001001; output Z: 01110101101111100100011010011101
# 
# dadda_mult: input A = -5.01561e+23, input B = -9.6181e+08, output OUT = 4.82407e+32
# dadda_mult: input A = 11100110110101000110101101011100, input B = 11001110011001010101000000111101, output OUT = 01110101101111100100011010011101
# UVM_INFO @ 325: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011011111001011010001011111001, input B: 01010101001010000000111011110010; output Z: 01110101101111100100011010011101
# REFMOD compute
# refmod: input A = -7.53793e-31, input B = -1.47655e-10, output OUT = 1.11301e-40
# refmod: input A = 10001101011101001001111010100100, input B = 10101111001000100101100101001001, output OUT = 00000000000000010011011001000011
# FPU_mult: WAIT
# -- input A: 01011011111001011010001011111001, input B: 01010101001010000000111011110010; output Z: 01110101101111100100011010011101
# FPU_mult: SEND
# -- input A: 01011011111001011010001011111001, input B: 01010101001010000000111011110010; output Z: 00000000000000000000000000000000
# 
# dadda_mult: input A = -7.53793e-31, input B = -1.47655e-10, output OUT = 0
# dadda_mult: input A = 10001101011101001001111010100100, input B = 10101111001000100101100101001001, output OUT = 00000000000000000000000000000000
# UVM_INFO @ 355: reporter [MISCMP] Miscompare for exp.data: lhs = 'h13643 : rhs = 'h0
# UVM_INFO @ 355: reporter [MISCMP] 1 Miscompare(s) for object tr@825 vs. exp@617
# UVM_WARNING @ 355: uvm_test_top.env_h.comp [Comparator Mismatch] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001010010010110111101101101101, input B: 11011101100010101011111110001000; output Z: 00000000000000000000000000000000
# REFMOD compute
# refmod: input A = 1.29274e+17, input B = 1.15489e+13, output OUT = 1.49297e+30
# refmod: input A = 01011011111001011010001011111001, input B = 01010101001010000000111011110010, output OUT = 01110001100101101100000001011011
# FPU_mult: WAIT
# -- input A: 11001010010010110111101101101101, input B: 11011101100010101011111110001000; output Z: 00000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11001010010010110111101101101101, input B: 11011101100010101011111110001000; output Z: 01110001100101101100000001011011
# 
# dadda_mult: input A = 1.29274e+17, input B = 1.15489e+13, output OUT = 1.49297e+30
# dadda_mult: input A = 01011011111001011010001011111001, input B = 01010101001010000000111011110010, output OUT = 01110001100101101100000001011011
# UVM_INFO @ 385: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100110000110100011100001100011, input B: 00100011110101111111111011100011; output Z: 01110001100101101100000001011011
# REFMOD compute
# refmod: input A = -3.33385e+06, input B = -1.24973e+18, output OUT = 4.16642e+24
# refmod: input A = 11001010010010110111101101101101, input B = 11011101100010101011111110001000, output OUT = 01101000010111001001000110001100
# FPU_mult: WAIT
# -- input A: 01100110000110100011100001100011, input B: 00100011110101111111111011100011; output Z: 01110001100101101100000001011011
# FPU_mult: SEND
# -- input A: 01100110000110100011100001100011, input B: 00100011110101111111111011100011; output Z: 01101000010111001001000110001100
# 
# dadda_mult: input A = -3.33385e+06, input B = -1.24973e+18, output OUT = 4.16642e+24
# dadda_mult: input A = 11001010010010110111101101101101, input B = 11011101100010101011111110001000, output OUT = 01101000010111001001000110001100
# UVM_INFO @ 415: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010011011011111101111111100011, input B: 00010100111010010111000001010011; output Z: 01101000010111001001000110001100
# REFMOD compute
# refmod: input A = 1.82071e+23, input B = 2.34183e-17, output OUT = 4.2638e+06
# refmod: input A = 01100110000110100011100001100011, input B = 00100011110101111111111011100011, output OUT = 01001010100000100001111011101000
# FPU_mult: WAIT
# -- input A: 11010011011011111101111111100011, input B: 00010100111010010111000001010011; output Z: 01101000010111001001000110001100
# FPU_mult: SEND
# -- input A: 11010011011011111101111111100011, input B: 00010100111010010111000001010011; output Z: 01001010100000100001111011101000
# 
# dadda_mult: input A = 1.82071e+23, input B = 2.34183e-17, output OUT = 4.2638e+06
# dadda_mult: input A = 01100110000110100011100001100011, input B = 00100011110101111111111011100011, output OUT = 01001010100000100001111011101000
# UVM_INFO @ 445: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000101011110110001011100100001, input B: 01110101001000100011010000111001; output Z: 01001010100000100001111011101000
# REFMOD compute
# refmod: input A = -1.03025e+12, input B = 2.35713e-26, output OUT = -2.42844e-14
# refmod: input A = 11010011011011111101111111100011, input B = 00010100111010010111000001010011, output OUT = 10101000110110101011110000000101
# FPU_mult: WAIT
# -- input A: 00000101011110110001011100100001, input B: 01110101001000100011010000111001; output Z: 01001010100000100001111011101000
# FPU_mult: SEND
# -- input A: 00000101011110110001011100100001, input B: 01110101001000100011010000111001; output Z: 10101000110110101011110000000101
# 
# dadda_mult: input A = -1.03025e+12, input B = 2.35713e-26, output OUT = -2.42844e-14
# dadda_mult: input A = 11010011011011111101111111100011, input B = 00010100111010010111000001010011, output OUT = 10101000110110101011110000000101
# UVM_INFO @ 475: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110111001010010010010100011110, input B: 10011011011101101100011111000110; output Z: 10101000110110101011110000000101
# REFMOD compute
# refmod: input A = 1.18062e-35, input B = 2.05618e+32, output OUT = 0.00242757
# refmod: input A = 00000101011110110001011100100001, input B = 01110101001000100011010000111001, output OUT = 00111011000111110001011111011011
# FPU_mult: WAIT
# -- input A: 10110111001010010010010100011110, input B: 10011011011101101100011111000110; output Z: 10101000110110101011110000000101
# FPU_mult: SEND
# -- input A: 10110111001010010010010100011110, input B: 10011011011101101100011111000110; output Z: 00111011000111110001011111011011
# 
# dadda_mult: input A = 1.18062e-35, input B = 2.05618e+32, output OUT = 0.00242757
# dadda_mult: input A = 00000101011110110001011100100001, input B = 01110101001000100011010000111001, output OUT = 00111011000111110001011111011011
# UVM_INFO @ 505: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110100001110011000001000100001, input B: 00100100100111011001010001011011; output Z: 00111011000111110001011111011011
# REFMOD compute
# refmod: input A = -1.00818e-05, input B = -2.04132e-22, output OUT = 2.05802e-27
# refmod: input A = 10110111001010010010010100011110, input B = 10011011011101101100011111000110, output OUT = 00010011001000110000110110101010
# FPU_mult: WAIT
# -- input A: 00110100001110011000001000100001, input B: 00100100100111011001010001011011; output Z: 00111011000111110001011111011011
# FPU_mult: SEND
# -- input A: 00110100001110011000001000100001, input B: 00100100100111011001010001011011; output Z: 00010011001000110000110110101010
# 
# dadda_mult: input A = -1.00818e-05, input B = -2.04132e-22, output OUT = 2.05802e-27
# dadda_mult: input A = 10110111001010010010010100011110, input B = 10011011011101101100011111000110, output OUT = 00010011001000110000110110101010
# UVM_INFO @ 535: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011101100000010111110111011010, input B: 01000000000101001000101011010010; output Z: 00010011001000110000110110101010
# REFMOD compute
# refmod: input A = 1.72768e-07, input B = 6.83392e-17, output OUT = 1.18068e-23
# refmod: input A = 00110100001110011000001000100001, input B = 00100100100111011001010001011011, output OUT = 00011001011001000110000010011111
# FPU_mult: WAIT
# -- input A: 01011101100000010111110111011010, input B: 01000000000101001000101011010010; output Z: 00010011001000110000110110101010
# FPU_mult: SEND
# -- input A: 01011101100000010111110111011010, input B: 01000000000101001000101011010010; output Z: 00011001011001000110000010011111
# 
# dadda_mult: input A = 1.72768e-07, input B = 6.83392e-17, output OUT = 1.18068e-23
# dadda_mult: input A = 00110100001110011000001000100001, input B = 00100100100111011001010001011011, output OUT = 00011001011001000110000010011111
# UVM_INFO @ 565: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100100000100101100101110111111, input B: 00011010011111110110110111101110; output Z: 00011001011001000110000010011111
# REFMOD compute
# refmod: input A = 1.16636e+18, input B = 2.32097, output OUT = 2.70708e+18
# refmod: input A = 01011101100000010111110111011010, input B = 01000000000101001000101011010010, output OUT = 01011110000101100100010111110100
# FPU_mult: WAIT
# -- input A: 01100100000100101100101110111111, input B: 00011010011111110110110111101110; output Z: 00011001011001000110000010011111
# FPU_mult: SEND
# -- input A: 01100100000100101100101110111111, input B: 00011010011111110110110111101110; output Z: 01011110000101100100010111110100
# 
# dadda_mult: input A = 1.16636e+18, input B = 2.32097, output OUT = 2.70708e+18
# dadda_mult: input A = 01011101100000010111110111011010, input B = 01000000000101001000101011010010, output OUT = 01011110000101100100010111110100
# UVM_INFO @ 595: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001000110100110111010111111111, input B: 11110111111001100000111111000011; output Z: 01011110000101100100010111110100
# REFMOD compute
# refmod: input A = 1.08316e+22, input B = 5.28216e-23, output OUT = 0.572143
# refmod: input A = 01100100000100101100101110111111, input B = 00011010011111110110110111101110, output OUT = 00111111000100100111011111111100
# FPU_mult: WAIT
# -- input A: 01001000110100110111010111111111, input B: 11110111111001100000111111000011; output Z: 01011110000101100100010111110100
# FPU_mult: SEND
# -- input A: 01001000110100110111010111111111, input B: 11110111111001100000111111000011; output Z: 00111111000100100111011111111100
# 
# dadda_mult: input A = 1.08316e+22, input B = 5.28216e-23, output OUT = 0.572143
# dadda_mult: input A = 01100100000100101100101110111111, input B = 00011010011111110110110111101110, output OUT = 00111111000100100111011111111100
# UVM_INFO @ 625: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011100110011011100011010010001, input B: 00000010100011001111000011011011; output Z: 00111111000100100111011111111100
# REFMOD compute
# refmod: input A = 433072, input B = -9.33241e+33, output OUT = -inf
# refmod: input A = 01001000110100110111010111111111, input B = 11110111111001100000111111000011, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10011100110011011100011010010001, input B: 00000010100011001111000011011011; output Z: 00111111000100100111011111111100
# FPU_mult: SEND
# -- input A: 10011100110011011100011010010001, input B: 00000010100011001111000011011011; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 433072, input B = -9.33241e+33, output OUT = -inf
# dadda_mult: input A = 01001000110100110111010111111111, input B = 11110111111001100000111111000011, output OUT = 11111111100000000000000000000000
# UVM_INFO @ 655: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10011011011000010011000001101011, input B: 11001111001111010001010100000110; output Z: 11111111100000000000000000000000
# REFMOD compute
# refmod: input A = -1.36171e-21, input B = 2.07094e-37, output OUT = -0
# refmod: input A = 10011100110011011100011010010001, input B = 00000010100011001111000011011011, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 10011011011000010011000001101011, input B: 11001111001111010001010100000110; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10011011011000010011000001101011, input B: 11001111001111010001010100000110; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -1.36171e-21, input B = 2.07094e-37, output OUT = -0
# dadda_mult: input A = 10011100110011011100011010010001, input B = 00000010100011001111000011011011, output OUT = 10000000000000000000000000000000
# UVM_INFO @ 685: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001011011101101111111101000101, input B: 01111011100101010101000001100111; output Z: 10000000000000000000000000000000
# REFMOD compute
# refmod: input A = -1.86272e-22, input B = -3.17227e+09, output OUT = 5.90906e-13
# refmod: input A = 10011011011000010011000001101011, input B = 11001111001111010001010100000110, output OUT = 00101011001001100101001100111101
# FPU_mult: WAIT
# -- input A: 11001011011101101111111101000101, input B: 01111011100101010101000001100111; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11001011011101101111111101000101, input B: 01111011100101010101000001100111; output Z: 00101011001001100101001100111101
# 
# dadda_mult: input A = -1.86272e-22, input B = -3.17227e+09, output OUT = 5.90906e-13
# dadda_mult: input A = 10011011011000010011000001101011, input B = 11001111001111010001010100000110, output OUT = 00101011001001100101001100111101
# UVM_INFO @ 715: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100110111000101111100101010011, input B: 11100011011110101100001111000111; output Z: 00101011001001100101001100111101
# REFMOD compute
# refmod: input A = -1.61872e+07, input B = 1.55057e+36, output OUT = -inf
# refmod: input A = 11001011011101101111111101000101, input B = 01111011100101010101000001100111, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 10100110111000101111100101010011, input B: 11100011011110101100001111000111; output Z: 00101011001001100101001100111101
# FPU_mult: SEND
# -- input A: 10100110111000101111100101010011, input B: 11100011011110101100001111000111; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = -1.61872e+07, input B = 1.55057e+36, output OUT = -inf
# dadda_mult: input A = 11001011011101101111111101000101, input B = 01111011100101010101000001100111, output OUT = 11111111100000000000000000000000
# UVM_INFO @ 745: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110101000110001100011001101111, input B: 11101000000101101100011110011100; output Z: 11111111100000000000000000000000
# REFMOD compute
# refmod: input A = -1.57495e-15, input B = -4.62579e+21, output OUT = 7.28538e+06
# refmod: input A = 10100110111000101111100101010011, input B = 11100011011110101100001111000111, output OUT = 01001010110111100101010100001111
# FPU_mult: WAIT
# -- input A: 10110101000110001100011001101111, input B: 11101000000101101100011110011100; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10110101000110001100011001101111, input B: 11101000000101101100011110011100; output Z: 01001010110111100101010100001111
# 
# dadda_mult: input A = -1.57495e-15, input B = -4.62579e+21, output OUT = 7.28538e+06
# dadda_mult: input A = 10100110111000101111100101010011, input B = 11100011011110101100001111000111, output OUT = 01001010110111100101010100001111
# UVM_INFO @ 775: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101010000000001100101001000101, input B: 10001100010010000110111000100110; output Z: 01001010110111100101010100001111
# REFMOD compute
# refmod: input A = -5.69132e-07, input B = -2.84815e+24, output OUT = 1.62097e+18
# refmod: input A = 10110101000110001100011001101111, input B = 11101000000101101100011110011100, output OUT = 01011101101100111111011011001001
# FPU_mult: WAIT
# -- input A: 01101010000000001100101001000101, input B: 10001100010010000110111000100110; output Z: 01001010110111100101010100001111
# FPU_mult: SEND
# -- input A: 01101010000000001100101001000101, input B: 10001100010010000110111000100110; output Z: 01011101101100111111011011001001
# 
# dadda_mult: input A = -5.69132e-07, input B = -2.84815e+24, output OUT = 1.62097e+18
# dadda_mult: input A = 10110101000110001100011001101111, input B = 11101000000101101100011110011100, output OUT = 01011101101100111111011011001001
# UVM_INFO @ 805: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111000000010001000110011000110, input B: 00010101010010110000100001100010; output Z: 01011101101100111111011011001001
# REFMOD compute
# refmod: input A = 3.89244e+25, input B = -1.54406e-31, output OUT = -6.01016e-06
# refmod: input A = 01101010000000001100101001000101, input B = 10001100010010000110111000100110, output OUT = 10110110110010011010101011100000
# FPU_mult: WAIT
# -- input A: 10111000000010001000110011000110, input B: 00010101010010110000100001100010; output Z: 01011101101100111111011011001001
# FPU_mult: SEND
# -- input A: 10111000000010001000110011000110, input B: 00010101010010110000100001100010; output Z: 10110110110010011010101011100000
# 
# dadda_mult: input A = 3.89244e+25, input B = -1.54406e-31, output OUT = -6.01016e-06
# dadda_mult: input A = 01101010000000001100101001000101, input B = 10001100010010000110111000100110, output OUT = 10110110110010011010101011100000
# UVM_INFO @ 835: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101001010001001110000111110110, input B: 01010010100011101001011110100011; output Z: 10110110110010011010101011100000
# REFMOD compute
# refmod: input A = -3.2556e-05, input B = 4.10021e-26, output OUT = -1.33487e-30
# refmod: input A = 10111000000010001000110011000110, input B = 00010101010010110000100001100010, output OUT = 10001101110110001001100000110011
# FPU_mult: WAIT
# -- input A: 11101001010001001110000111110110, input B: 01010010100011101001011110100011; output Z: 10110110110010011010101011100000
# FPU_mult: SEND
# -- input A: 11101001010001001110000111110110, input B: 01010010100011101001011110100011; output Z: 10001101110110001001100000110011
# 
# dadda_mult: input A = -3.2556e-05, input B = 4.10021e-26, output OUT = -1.33487e-30
# dadda_mult: input A = 10111000000010001000110011000110, input B = 00010101010010110000100001100010, output OUT = 10001101110110001001100000110011
# UVM_INFO @ 865: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111011001110010010100101000010, input B: 00111010001111100111111101111110; output Z: 10001101110110001001100000110011
# REFMOD compute
# refmod: input A = -1.4876e+25, input B = 3.06215e+11, output OUT = -4.55526e+36
# refmod: input A = 11101001010001001110000111110110, input B = 01010010100011101001011110100011, output OUT = 11111100010110110101001111101010
# FPU_mult: WAIT
# -- input A: 01111011001110010010100101000010, input B: 00111010001111100111111101111110; output Z: 10001101110110001001100000110011
# FPU_mult: SEND
# -- input A: 01111011001110010010100101000010, input B: 00111010001111100111111101111110; output Z: 11111100010110110101001111101010
# 
# dadda_mult: input A = -1.4876e+25, input B = 3.06215e+11, output OUT = -4.55526e+36
# dadda_mult: input A = 11101001010001001110000111110110, input B = 01010010100011101001011110100011, output OUT = 11111100010110110101001111101010
# UVM_INFO @ 895: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010110100101000010101000100010, input B: 00111101100010011011001111010101; output Z: 11111100010110110101001111101010
# REFMOD compute
# refmod: input A = 9.61412e+35, input B = 0.000726692, output OUT = 6.9865e+32
# refmod: input A = 01111011001110010010100101000010, input B = 00111010001111100111111101111110, output OUT = 01110110000010011100100011010110
# FPU_mult: WAIT
# -- input A: 00010110100101000010101000100010, input B: 00111101100010011011001111010101; output Z: 11111100010110110101001111101010
# FPU_mult: SEND
# -- input A: 00010110100101000010101000100010, input B: 00111101100010011011001111010101; output Z: 01110110000010011100100011010110
# 
# dadda_mult: input A = 9.61412e+35, input B = 0.000726692, output OUT = 6.9865e+32
# dadda_mult: input A = 01111011001110010010100101000010, input B = 00111010001111100111111101111110, output OUT = 01110110000010011100100011010110
# UVM_INFO @ 925: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110101111000101110001100011101, input B: 10000110011101011101010110110100; output Z: 01110110000010011100100011010110
# REFMOD compute
# refmod: input A = 2.39373e-25, input B = 0.0672375, output OUT = 1.60948e-26
# refmod: input A = 00010110100101000010101000100010, input B = 00111101100010011011001111010101, output OUT = 00010100100111110110010101000010
# FPU_mult: WAIT
# -- input A: 11110101111000101110001100011101, input B: 10000110011101011101010110110100; output Z: 01110110000010011100100011010110
# FPU_mult: SEND
# -- input A: 11110101111000101110001100011101, input B: 10000110011101011101010110110100; output Z: 00010100100111110110010101000010
# 
# dadda_mult: input A = 2.39373e-25, input B = 0.0672375, output OUT = 1.60948e-26
# dadda_mult: input A = 00010110100101000010101000100010, input B = 00111101100010011011001111010101, output OUT = 00010100100111110110010101000010
# UVM_INFO @ 955: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101110110100011000100100100100, input B: 11000100010101111000001000101111; output Z: 00010100100111110110010101000010
# REFMOD compute
# refmod: input A = -5.75227e+32, input B = -4.62364e-35, output OUT = 0.0265964
# refmod: input A = 11110101111000101110001100011101, input B = 10000110011101011101010110110100, output OUT = 00111100110110011110000011000001
# FPU_mult: WAIT
# -- input A: 00101110110100011000100100100100, input B: 11000100010101111000001000101111; output Z: 00010100100111110110010101000010
# FPU_mult: SEND
# -- input A: 00101110110100011000100100100100, input B: 11000100010101111000001000101111; output Z: 00111100110110011110000011000001
# 
# dadda_mult: input A = -5.75227e+32, input B = -4.62364e-35, output OUT = 0.0265964
# dadda_mult: input A = 11110101111000101110001100011101, input B = 10000110011101011101010110110100, output OUT = 00111100110110011110000011000001
# UVM_INFO @ 985: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10110110011110100010010100100011, input B: 10101001001001001101111100101010; output Z: 00111100110110011110000011000001
# REFMOD compute
# refmod: input A = 9.52858e-11, input B = -862.034, output OUT = -8.21396e-08
# refmod: input A = 00101110110100011000100100100100, input B = 11000100010101111000001000101111, output OUT = 10110011101100000110010010111011
# FPU_mult: WAIT
# -- input A: 10110110011110100010010100100011, input B: 10101001001001001101111100101010; output Z: 00111100110110011110000011000001
# FPU_mult: SEND
# -- input A: 10110110011110100010010100100011, input B: 10101001001001001101111100101010; output Z: 10110011101100000110010010111011
# 
# dadda_mult: input A = 9.52858e-11, input B = -862.034, output OUT = -8.21396e-08
# dadda_mult: input A = 00101110110100011000100100100100, input B = 11000100010101111000001000101111, output OUT = 10110011101100000110010010111011
# UVM_INFO @ 1015: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011100000101001111001101011011, input B: 01100111100110001010111011100101; output Z: 10110011101100000110010010111011
# REFMOD compute
# refmod: input A = -3.72745e-06, input B = -3.66089e-14, output OUT = 1.36458e-19
# refmod: input A = 10110110011110100010010100100011, input B = 10101001001001001101111100101010, output OUT = 00100000001000010001100111011010
# FPU_mult: WAIT
# -- input A: 01011100000101001111001101011011, input B: 01100111100110001010111011100101; output Z: 10110011101100000110010010111011
# FPU_mult: SEND
# -- input A: 01011100000101001111001101011011, input B: 01100111100110001010111011100101; output Z: 00100000001000010001100111011010
# 
# dadda_mult: input A = -3.72745e-06, input B = -3.66089e-14, output OUT = 1.36458e-19
# dadda_mult: input A = 10110110011110100010010100100011, input B = 10101001001001001101111100101010, output OUT = 00100000001000010001100111011010
# UVM_INFO @ 1045: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110100111001111010000111101011, input B: 10100001001001011111011011010000; output Z: 00100000001000010001100111011010
# REFMOD compute
# refmod: input A = 1.67703e+17, input B = 1.44205e+24, output OUT = inf
# refmod: input A = 01011100000101001111001101011011, input B = 01100111100110001010111011100101, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 01110100111001111010000111101011, input B: 10100001001001011111011011010000; output Z: 00100000001000010001100111011010
# FPU_mult: SEND
# -- input A: 01110100111001111010000111101011, input B: 10100001001001011111011011010000; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 1.67703e+17, input B = 1.44205e+24, output OUT = inf
# dadda_mult: input A = 01011100000101001111001101011011, input B = 01100111100110001010111011100101, output OUT = 01111111100000000000000000000000
# UVM_INFO @ 1075: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100110111100100001110011011000, input B: 00101011001010000101011110101001; output Z: 01111111100000000000000000000000
# REFMOD compute
# refmod: input A = 1.46815e+32, input B = -5.62308e-19, output OUT = -8.2555e+13
# refmod: input A = 01110100111001111010000111101011, input B = 10100001001001011111011011010000, output OUT = 11010110100101100010101010101110
# FPU_mult: WAIT
# -- input A: 01100110111100100001110011011000, input B: 00101011001010000101011110101001; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 01100110111100100001110011011000, input B: 00101011001010000101011110101001; output Z: 11010110100101100010101010101110
# 
# dadda_mult: input A = 1.46815e+32, input B = -5.62308e-19, output OUT = -8.2555e+13
# dadda_mult: input A = 01110100111001111010000111101011, input B = 10100001001001011111011011010000, output OUT = 11010110100101100010101010101110
# UVM_INFO @ 1105: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00001110101100111010011010101101, input B: 01011111000101000000010011000101; output Z: 11010110100101100010101010101110
# REFMOD compute
# refmod: input A = 5.71672e+23, input B = 5.98072e-13, output OUT = 3.41901e+11
# refmod: input A = 01100110111100100001110011011000, input B = 00101011001010000101011110101001, output OUT = 01010010100111110011010111010101
# FPU_mult: WAIT
# -- input A: 00001110101100111010011010101101, input B: 01011111000101000000010011000101; output Z: 11010110100101100010101010101110
# FPU_mult: SEND
# -- input A: 00001110101100111010011010101101, input B: 01011111000101000000010011000101; output Z: 01010010100111110011010111010101
# 
# dadda_mult: input A = 5.71672e+23, input B = 5.98072e-13, output OUT = 3.41901e+11
# dadda_mult: input A = 01100110111100100001110011011000, input B = 00101011001010000101011110101001, output OUT = 01010010100111110011010111010101
# UVM_INFO @ 1135: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100010001000000111000010110001, input B: 10111110110101000010110010011011; output Z: 01010010100111110011010111010101
# REFMOD compute
# refmod: input A = 4.42874e-30, input B = 1.06659e+19, output OUT = 4.72364e-11
# refmod: input A = 00001110101100111010011010101101, input B = 01011111000101000000010011000101, output OUT = 00101110010011111011111101101010
# FPU_mult: WAIT
# -- input A: 01100010001000000111000010110001, input B: 10111110110101000010110010011011; output Z: 01010010100111110011010111010101
# FPU_mult: SEND
# -- input A: 01100010001000000111000010110001, input B: 10111110110101000010110010011011; output Z: 00101110010011111011111101101010
# 
# dadda_mult: input A = 4.42874e-30, input B = 1.06659e+19, output OUT = 4.72364e-11
# dadda_mult: input A = 00001110101100111010011010101101, input B = 01011111000101000000010011000101, output OUT = 00101110010011111011111101101010
# UVM_INFO @ 1165: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101011010111110011000110000100, input B: 01001010010101010000000100000011; output Z: 00101110010011111011111101101010
# REFMOD compute
# refmod: input A = 7.399e+20, input B = -0.414403, output OUT = -3.06617e+20
# refmod: input A = 01100010001000000111000010110001, input B = 10111110110101000010110010011011, output OUT = 11100001100001001111100101000111
# FPU_mult: WAIT
# -- input A: 11101011010111110011000110000100, input B: 01001010010101010000000100000011; output Z: 00101110010011111011111101101010
# FPU_mult: SEND
# -- input A: 11101011010111110011000110000100, input B: 01001010010101010000000100000011; output Z: 11100001100001001111100101000111
# 
# dadda_mult: input A = 7.399e+20, input B = -0.414403, output OUT = -3.06617e+20
# dadda_mult: input A = 01100010001000000111000010110001, input B = 10111110110101000010110010011011, output OUT = 11100001100001001111100101000111
# UVM_INFO @ 1195: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100001100110101010111000011110, input B: 00110000110010101010011011000010; output Z: 11100001100001001111100101000111
# REFMOD compute
# refmod: input A = -2.69824e+26, input B = 3.48986e+06, output OUT = -9.41648e+32
# refmod: input A = 11101011010111110011000110000100, input B = 01001010010101010000000100000011, output OUT = 11110110001110011011010100010101
# FPU_mult: WAIT
# -- input A: 01100001100110101010111000011110, input B: 00110000110010101010011011000010; output Z: 11100001100001001111100101000111
# FPU_mult: SEND
# -- input A: 01100001100110101010111000011110, input B: 00110000110010101010011011000010; output Z: 11110110001110011011010100010101
# 
# dadda_mult: input A = -2.69824e+26, input B = 3.48986e+06, output OUT = -9.41648e+32
# dadda_mult: input A = 11101011010111110011000110000100, input B = 01001010010101010000000100000011, output OUT = 11110110001110011011010100010101
# UVM_INFO @ 1225: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010000000001010000011010111100, input B: 10000011010010001000110001000100; output Z: 11110110001110011011010100010101
# REFMOD compute
# refmod: input A = 3.56668e+20, input B = 1.47448e-09, output OUT = 5.25901e+11
# refmod: input A = 01100001100110101010111000011110, input B = 00110000110010101010011011000010, output OUT = 01010010111101001110010001001100
# FPU_mult: WAIT
# -- input A: 00010000000001010000011010111100, input B: 10000011010010001000110001000100; output Z: 11110110001110011011010100010101
# FPU_mult: SEND
# -- input A: 00010000000001010000011010111100, input B: 10000011010010001000110001000100; output Z: 01010010111101001110010001001100
# 
# dadda_mult: input A = 3.56668e+20, input B = 1.47448e-09, output OUT = 5.25901e+11
# dadda_mult: input A = 01100001100110101010111000011110, input B = 00110000110010101010011011000010, output OUT = 01010010111101001110010001001100
# UVM_INFO @ 1255: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000001111011110111111000001001, input B: 11111001011000001100101100110001; output Z: 01010010111101001110010001001100
# REFMOD compute
# refmod: input A = 2.62348e-29, input B = -5.89357e-37, output OUT = -0
# refmod: input A = 00010000000001010000011010111100, input B = 10000011010010001000110001000100, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01000001111011110111111000001001, input B: 11111001011000001100101100110001; output Z: 01010010111101001110010001001100
# FPU_mult: SEND
# -- input A: 01000001111011110111111000001001, input B: 11111001011000001100101100110001; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 2.62348e-29, input B = -5.89357e-37, output OUT = -0
# dadda_mult: input A = 00010000000001010000011010111100, input B = 10000011010010001000110001000100, output OUT = 10000000000000000000000000000000
# UVM_INFO @ 1285: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11111110101110010110010010100100, input B: 11110111101111011001011110000010; output Z: 10000000000000000000000000000000
# REFMOD compute
# refmod: input A = 29.9365, input B = -7.29497e+34, output OUT = -2.18386e+36
# refmod: input A = 01000001111011110111111000001001, input B = 11111001011000001100101100110001, output OUT = 11111011110100100100110001011111
# FPU_mult: WAIT
# -- input A: 11111110101110010110010010100100, input B: 11110111101111011001011110000010; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 11111110101110010110010010100100, input B: 11110111101111011001011110000010; output Z: 11111011110100100100110001011111
# 
# dadda_mult: input A = 29.9365, input B = -7.29497e+34, output OUT = -2.18386e+36
# dadda_mult: input A = 01000001111011110111111000001001, input B = 11111001011000001100101100110001, output OUT = 11111011110100100100110001011111
# UVM_INFO @ 1315: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110011011110110100011110010010, input B: 00111011100100010010010001000100; output Z: 11111011110100100100110001011111
# REFMOD compute
# refmod: input A = -1.23215e+38, input B = -7.69076e+33, output OUT = inf
# refmod: input A = 11111110101110010110010010100100, input B = 11110111101111011001011110000010, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 01110011011110110100011110010010, input B: 00111011100100010010010001000100; output Z: 11111011110100100100110001011111
# FPU_mult: SEND
# -- input A: 01110011011110110100011110010010, input B: 00111011100100010010010001000100; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = -1.23215e+38, input B = -7.69076e+33, output OUT = inf
# dadda_mult: input A = 11111110101110010110010010100100, input B = 11110111101111011001011110000010, output OUT = 01111111100000000000000000000000
# UVM_INFO @ 1345: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110000100110100100011010011011, input B: 01000111010110100011011011101010; output Z: 01111111100000000000000000000000
# REFMOD compute
# refmod: input A = 1.99084e+31, input B = 0.00442937, output OUT = 8.81818e+28
# refmod: input A = 01110011011110110100011110010010, input B = 00111011100100010010010001000100, output OUT = 01101111100011100111011100100011
# FPU_mult: WAIT
# -- input A: 11110000100110100100011010011011, input B: 01000111010110100011011011101010; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11110000100110100100011010011011, input B: 01000111010110100011011011101010; output Z: 01101111100011100111011100100011
# 
# dadda_mult: input A = 1.99084e+31, input B = 0.00442937, output OUT = 8.81818e+28
# dadda_mult: input A = 01110011011110110100011110010010, input B = 00111011100100010010010001000100, output OUT = 01101111100011100111011100100011
# UVM_INFO @ 1375: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11101001011111101100110111000011, input B: 00001100001001111100100001100010; output Z: 01101111100011100111011100100011
# REFMOD compute
# refmod: input A = -3.81968e+29, input B = 55862.9, output OUT = -2.13379e+34
# refmod: input A = 11110000100110100100011010011011, input B = 01000111010110100011011011101010, output OUT = 11111000100000111000000100111000
# FPU_mult: WAIT
# -- input A: 11101001011111101100110111000011, input B: 00001100001001111100100001100010; output Z: 01101111100011100111011100100011
# FPU_mult: SEND
# -- input A: 11101001011111101100110111000011, input B: 00001100001001111100100001100010; output Z: 11111000100000111000000100111000
# 
# dadda_mult: input A = -3.81968e+29, input B = 55862.9, output OUT = -2.13379e+34
# dadda_mult: input A = 11110000100110100100011010011011, input B = 01000111010110100011011011101010, output OUT = 11111000100000111000000100111000
# UVM_INFO @ 1405: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110000001010001011011001101110, input B: 11000001010111000101001001110001; output Z: 11111000100000111000000100111000
# REFMOD compute
# refmod: input A = -1.92524e+25, input B = 1.29255e-31, output OUT = -2.48848e-06
# refmod: input A = 11101001011111101100110111000011, input B = 00001100001001111100100001100010, output OUT = 10110110001001101111111110101101
# FPU_mult: WAIT
# -- input A: 01110000001010001011011001101110, input B: 11000001010111000101001001110001; output Z: 11111000100000111000000100111000
# FPU_mult: SEND
# -- input A: 01110000001010001011011001101110, input B: 11000001010111000101001001110001; output Z: 10110110001001101111111110101101
# 
# dadda_mult: input A = -1.92524e+25, input B = 1.29255e-31, output OUT = -2.48848e-06
# dadda_mult: input A = 11101001011111101100110111000011, input B = 00001100001001111100100001100010, output OUT = 10110110001001101111111110101101
# UVM_INFO @ 1435: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101001110001000010100001001110, input B: 01001100110001100010000010000111; output Z: 10110110001001101111111110101101
# REFMOD compute
# refmod: input A = 2.08856e+29, input B = -13.7701, output OUT = -2.87597e+30
# refmod: input A = 01110000001010001011011001101110, input B = 11000001010111000101001001110001, output OUT = 11110010000100010011001100011011
# FPU_mult: WAIT
# -- input A: 01101001110001000010100001001110, input B: 01001100110001100010000010000111; output Z: 10110110001001101111111110101101
# FPU_mult: SEND
# -- input A: 01101001110001000010100001001110, input B: 01001100110001100010000010000111; output Z: 11110010000100010011001100011011
# 
# dadda_mult: input A = 2.08856e+29, input B = -13.7701, output OUT = -2.87597e+30
# dadda_mult: input A = 01110000001010001011011001101110, input B = 11000001010111000101001001110001, output OUT = 11110010000100010011001100011011
# UVM_INFO @ 1465: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01010101101000110110010010100000, input B: 11010111110000111101001010011110; output Z: 11110010000100010011001100011011
# REFMOD compute
# refmod: input A = 2.96425e+25, input B = 1.03876e+08, output OUT = 3.07913e+33
# refmod: input A = 01101001110001000010100001001110, input B = 01001100110001100010000010000111, output OUT = 01110111000101111101000000011001
# FPU_mult: WAIT
# -- input A: 01010101101000110110010010100000, input B: 11010111110000111101001010011110; output Z: 11110010000100010011001100011011
# FPU_mult: SEND
# -- input A: 01010101101000110110010010100000, input B: 11010111110000111101001010011110; output Z: 01110111000101111101000000011001
# 
# dadda_mult: input A = 2.96425e+25, input B = 1.03876e+08, output OUT = 3.07913e+33
# dadda_mult: input A = 01101001110001000010100001001110, input B = 01001100110001100010000010000111, output OUT = 01110111000101111101000000011001
# UVM_INFO @ 1495: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000010010001111001110111110110, input B: 00111111100111100011100101110100; output Z: 01110111000101111101000000011001
# REFMOD compute
# refmod: input A = 2.24566e+13, input B = -4.30619e+14, output OUT = -9.67022e+27
# refmod: input A = 01010101101000110110010010100000, input B = 11010111110000111101001010011110, output OUT = 11101101111110011111100000100111
# FPU_mult: WAIT
# -- input A: 01000010010001111001110111110110, input B: 00111111100111100011100101110100; output Z: 01110111000101111101000000011001
# FPU_mult: SEND
# -- input A: 01000010010001111001110111110110, input B: 00111111100111100011100101110100; output Z: 11101101111110011111100000100111
# 
# dadda_mult: input A = 2.24566e+13, input B = -4.30619e+14, output OUT = -9.67022e+27
# dadda_mult: input A = 01010101101000110110010010100000, input B = 11010111110000111101001010011110, output OUT = 11101101111110011111100000100111
# UVM_INFO @ 1525: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000010011001101101111110000001, input B: 11101111110111001100100110100001; output Z: 11101101111110011111100000100111
# REFMOD compute
# refmod: input A = 49.9043, input B = 1.23613, output OUT = 61.6881
# refmod: input A = 01000010010001111001110111110110, input B = 00111111100111100011100101110100, output OUT = 01000010011101101100000010010101
# FPU_mult: WAIT
# -- input A: 11000010011001101101111110000001, input B: 11101111110111001100100110100001; output Z: 11101101111110011111100000100111
# FPU_mult: SEND
# -- input A: 11000010011001101101111110000001, input B: 11101111110111001100100110100001; output Z: 01000010011101101100000010010101
# 
# dadda_mult: input A = 49.9043, input B = 1.23613, output OUT = 61.6881
# dadda_mult: input A = 01000010010001111001110111110110, input B = 00111111100111100011100101110100, output OUT = 01000010011101101100000010010101
# UVM_INFO @ 1555: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111101111001011010000000001101, input B: 10011000110011100001011101010010; output Z: 01000010011101101100000010010101
# REFMOD compute
# refmod: input A = -57.7183, input B = -1.36661e+29, output OUT = 7.88783e+30
# refmod: input A = 11000010011001101101111110000001, input B = 11101111110111001100100110100001, output OUT = 01110010110001110001110111101010
# FPU_mult: WAIT
# -- input A: 10111101111001011010000000001101, input B: 10011000110011100001011101010010; output Z: 01000010011101101100000010010101
# FPU_mult: SEND
# -- input A: 10111101111001011010000000001101, input B: 10011000110011100001011101010010; output Z: 01110010110001110001110111101010
# 
# dadda_mult: input A = -57.7183, input B = -1.36661e+29, output OUT = 7.88783e+30
# dadda_mult: input A = 11000010011001101101111110000001, input B = 11101111110111001100100110100001, output OUT = 01110010110001110001110111101010
# UVM_INFO @ 1585: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11011000011101100100000001110000, input B: 10111110011110111111001000010000; output Z: 01110010110001110001110111101010
# REFMOD compute
# refmod: input A = -0.112122, input B = -5.32733e-24, output OUT = 5.97309e-25
# refmod: input A = 10111101111001011010000000001101, input B = 10011000110011100001011101010010, output OUT = 00010111001110001101101110110101
# FPU_mult: WAIT
# -- input A: 11011000011101100100000001110000, input B: 10111110011110111111001000010000; output Z: 01110010110001110001110111101010
# FPU_mult: SEND
# -- input A: 11011000011101100100000001110000, input B: 10111110011110111111001000010000; output Z: 00010111001110001101101110110101
# 
# dadda_mult: input A = -0.112122, input B = -5.32733e-24, output OUT = 5.97309e-25
# dadda_mult: input A = 10111101111001011010000000001101, input B = 10011000110011100001011101010010, output OUT = 00010111001110001101101110110101
# UVM_INFO @ 1615: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000010110111011000100000100001, input B: 10011101000110101001100111011011; output Z: 00010111001110001101101110110101
# REFMOD compute
# refmod: input A = -1.08303e+15, input B = -0.246041, output OUT = 2.66468e+14
# refmod: input A = 11011000011101100100000001110000, input B = 10111110011110111111001000010000, output OUT = 01010111011100100101101000000110
# FPU_mult: WAIT
# -- input A: 00000010110111011000100000100001, input B: 10011101000110101001100111011011; output Z: 00010111001110001101101110110101
# FPU_mult: SEND
# -- input A: 00000010110111011000100000100001, input B: 10011101000110101001100111011011; output Z: 01010111011100100101101000000110
# 
# dadda_mult: input A = -1.08303e+15, input B = -0.246041, output OUT = 2.66468e+14
# dadda_mult: input A = 11011000011101100100000001110000, input B = 10111110011110111111001000010000, output OUT = 01010111011100100101101000000110
# UVM_INFO @ 1645: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00000100001010111010110111111001, input B: 10010110001111010011100111001100; output Z: 01010111011100100101101000000110
# REFMOD compute
# refmod: input A = 3.25512e-37, input B = -2.04613e-21, output OUT = -0
# refmod: input A = 00000010110111011000100000100001, input B = 10011101000110101001100111011011, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 00000100001010111010110111111001, input B: 10010110001111010011100111001100; output Z: 01010111011100100101101000000110
# FPU_mult: SEND
# -- input A: 00000100001010111010110111111001, input B: 10010110001111010011100111001100; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 3.25512e-37, input B = -2.04613e-21, output OUT = -0
# dadda_mult: input A = 00000010110111011000100000100001, input B = 10011101000110101001100111011011, output OUT = 10000000000000000000000000000000
# UVM_INFO @ 1675: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110100011010111100001011001101, input B: 01001111000001000000101111001001; output Z: 10000000000000000000000000000000
# REFMOD compute
# refmod: input A = 2.01808e-36, input B = -1.52855e-25, output OUT = -0
# refmod: input A = 00000100001010111010110111111001, input B = 10010110001111010011100111001100, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01110100011010111100001011001101, input B: 01001111000001000000101111001001; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 01110100011010111100001011001101, input B: 01001111000001000000101111001001; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = 2.01808e-36, input B = -1.52855e-25, output OUT = -0
# dadda_mult: input A = 00000100001010111010110111111001, input B = 10010110001111010011100111001100, output OUT = 10000000000000000000000000000000
# UVM_INFO @ 1705: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111101110010111011000101100011, input B: 11000110010001111101100010010011; output Z: 10000000000000000000000000000000
# REFMOD compute
# refmod: input A = 7.47156e+31, input B = 2.21536e+09, output OUT = inf
# refmod: input A = 01110100011010111100001011001101, input B = 01001111000001000000101111001001, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 00111101110010111011000101100011, input B: 11000110010001111101100010010011; output Z: 10000000000000000000000000000000
# FPU_mult: SEND
# -- input A: 00111101110010111011000101100011, input B: 11000110010001111101100010010011; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 7.47156e+31, input B = 2.21536e+09, output OUT = inf
# dadda_mult: input A = 01110100011010111100001011001101, input B = 01001111000001000000101111001001, output OUT = 01111111100000000000000000000000
# UVM_INFO @ 1735: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110111111011111101000110001001, input B: 10001110110100011101101111101100; output Z: 01111111100000000000000000000000
# REFMOD compute
# refmod: input A = 0.0994594, input B = -12790.1, output OUT = -1272.1
# refmod: input A = 00111101110010111011000101100011, input B = 11000110010001111101100010010011, output OUT = 11000100100111110000001100110111
# FPU_mult: WAIT
# -- input A: 00110111111011111101000110001001, input B: 10001110110100011101101111101100; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 00110111111011111101000110001001, input B: 10001110110100011101101111101100; output Z: 11000100100111110000001100110111
# 
# dadda_mult: input A = 0.0994594, input B = -12790.1, output OUT = -1272.1
# dadda_mult: input A = 00111101110010111011000101100011, input B = 11000110010001111101100010010011, output OUT = 11000100100111110000001100110111
# UVM_INFO @ 1765: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010001011000010011001010001100, input B: 10110000111000100101111011011101; output Z: 11000100100111110000001100110111
# REFMOD compute
# refmod: input A = 2.85886e-05, input B = -5.17343e-30, output OUT = -1.47901e-34
# refmod: input A = 00110111111011111101000110001001, input B = 10001110110100011101101111101100, output OUT = 10000111010001001001100000010110
# FPU_mult: WAIT
# -- input A: 11010001011000010011001010001100, input B: 10110000111000100101111011011101; output Z: 11000100100111110000001100110111
# FPU_mult: SEND
# -- input A: 11010001011000010011001010001100, input B: 10110000111000100101111011011101; output Z: 10000111010001001001100000010110
# 
# dadda_mult: input A = 2.85886e-05, input B = -5.17343e-30, output OUT = -1.47901e-34
# dadda_mult: input A = 00110111111011111101000110001001, input B = 10001110110100011101101111101100, output OUT = 10000111010001001001100000010110
# UVM_INFO @ 1795: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11000110110100000000000001011000, input B: 01100111011001110101101111011110; output Z: 10000111010001001001100000010110
# REFMOD compute
# refmod: input A = -6.0451e+10, input B = -1.64706e-09, output OUT = 99.5666
# refmod: input A = 11010001011000010011001010001100, input B = 10110000111000100101111011011101, output OUT = 01000010110001110010001000010011
# FPU_mult: WAIT
# -- input A: 11000110110100000000000001011000, input B: 01100111011001110101101111011110; output Z: 10000111010001001001100000010110
# FPU_mult: SEND
# -- input A: 11000110110100000000000001011000, input B: 01100111011001110101101111011110; output Z: 01000010110001110010001000010011
# 
# dadda_mult: input A = -6.0451e+10, input B = -1.64706e-09, output OUT = 99.5666
# dadda_mult: input A = 11010001011000010011001010001100, input B = 10110000111000100101111011011101, output OUT = 01000010110001110010001000010011
# UVM_INFO @ 1825: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110100000111010001110111110100, input B: 11000111000100101110000110100001; output Z: 01000010110001110010001000010011
# REFMOD compute
# refmod: input A = -26624.2, input B = 1.09256e+24, output OUT = -2.90885e+28
# refmod: input A = 11000110110100000000000001011000, input B = 01100111011001110101101111011110, output OUT = 11101110101110111111101011110100
# FPU_mult: WAIT
# -- input A: 00110100000111010001110111110100, input B: 11000111000100101110000110100001; output Z: 01000010110001110010001000010011
# FPU_mult: SEND
# -- input A: 00110100000111010001110111110100, input B: 11000111000100101110000110100001; output Z: 11101110101110111111101011110100
# 
# dadda_mult: input A = -26624.2, input B = 1.09256e+24, output OUT = -2.90885e+28
# dadda_mult: input A = 11000110110100000000000001011000, input B = 01100111011001110101101111011110, output OUT = 11101110101110111111101011110100
# UVM_INFO @ 1855: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101010000000101011101110011010, input B: 11100111111000111111110001111010; output Z: 11101110101110111111101011110100
# REFMOD compute
# refmod: input A = 1.46327e-07, input B = -37601.6, output OUT = -0.00550212
# refmod: input A = 00110100000111010001110111110100, input B = 11000111000100101110000110100001, output OUT = 10111011101101000100101100011111
# FPU_mult: WAIT
# -- input A: 01101010000000101011101110011010, input B: 11100111111000111111110001111010; output Z: 11101110101110111111101011110100
# FPU_mult: SEND
# -- input A: 01101010000000101011101110011010, input B: 11100111111000111111110001111010; output Z: 10111011101101000100101100011111
# 
# dadda_mult: input A = 1.46327e-07, input B = -37601.6, output OUT = -0.00550212
# dadda_mult: input A = 00110100000111010001110111110100, input B = 11000111000100101110000110100001, output OUT = 10111011101101000100101100011111
# UVM_INFO @ 1885: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111001100111110001111001001101, input B: 01010010111001010101111101000111; output Z: 10111011101101000100101100011111
# REFMOD compute
# refmod: input A = 3.95116e+25, input B = -2.15327e+24, output OUT = -inf
# refmod: input A = 01101010000000101011101110011010, input B = 11100111111000111111110001111010, output OUT = 11111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 00111001100111110001111001001101, input B: 01010010111001010101111101000111; output Z: 10111011101101000100101100011111
# FPU_mult: SEND
# -- input A: 00111001100111110001111001001101, input B: 01010010111001010101111101000111; output Z: 11111111100000000000000000000000
# 
# dadda_mult: input A = 3.95116e+25, input B = -2.15327e+24, output OUT = -inf
# dadda_mult: input A = 01101010000000101011101110011010, input B = 11100111111000111111110001111010, output OUT = 11111111100000000000000000000000
# UVM_INFO @ 1915: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110010000011001101000101101101, input B: 00011111101110101110000110101101; output Z: 11111111100000000000000000000000
# REFMOD compute
# refmod: input A = 0.000303494, input B = 4.92573e+11, output OUT = 1.49493e+08
# refmod: input A = 00111001100111110001111001001101, input B = 01010010111001010101111101000111, output OUT = 01001101000011101001000101010011
# FPU_mult: WAIT
# -- input A: 11110010000011001101000101101101, input B: 00011111101110101110000110101101; output Z: 11111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 11110010000011001101000101101101, input B: 00011111101110101110000110101101; output Z: 01001101000011101001000101010011
# 
# dadda_mult: input A = 0.000303494, input B = 4.92573e+11, output OUT = 1.49493e+08
# dadda_mult: input A = 00111001100111110001111001001101, input B = 01010010111001010101111101000111, output OUT = 01001101000011101001000101010011
# UVM_INFO @ 1945: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110111111011111110010011111010, input B: 00000110110110111100110001111101; output Z: 01001101000011101001000101010011
# REFMOD compute
# refmod: input A = -2.78919e+30, input B = 7.91474e-20, output OUT = -2.20757e+11
# refmod: input A = 11110010000011001101000101101101, input B = 00011111101110101110000110101101, output OUT = 11010010010011011001100010011001
# FPU_mult: WAIT
# -- input A: 01110111111011111110010011111010, input B: 00000110110110111100110001111101; output Z: 01001101000011101001000101010011
# FPU_mult: SEND
# -- input A: 01110111111011111110010011111010, input B: 00000110110110111100110001111101; output Z: 11010010010011011001100010011001
# 
# dadda_mult: input A = -2.78919e+30, input B = 7.91474e-20, output OUT = -2.20757e+11
# dadda_mult: input A = 11110010000011001101000101101101, input B = 00011111101110101110000110101101, output OUT = 11010010010011011001100010011001
# UVM_INFO @ 1975: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10100100111111111001001001010100, input B: 11110000101000010101000001000011; output Z: 11010010010011011001100010011001
# REFMOD compute
# refmod: input A = 9.73127e+33, input B = 8.26791e-35, output OUT = 0.804573
# refmod: input A = 01110111111011111110010011111010, input B = 00000110110110111100110001111101, output OUT = 00111111010011011111100010000001
# FPU_mult: WAIT
# -- input A: 10100100111111111001001001010100, input B: 11110000101000010101000001000011; output Z: 11010010010011011001100010011001
# FPU_mult: SEND
# -- input A: 10100100111111111001001001010100, input B: 11110000101000010101000001000011; output Z: 00111111010011011111100010000001
# 
# dadda_mult: input A = 9.73127e+33, input B = 8.26791e-35, output OUT = 0.804573
# dadda_mult: input A = 01110111111011111110010011111010, input B = 00000110110110111100110001111101, output OUT = 00111111010011011111100010000001
# UVM_INFO @ 2005: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110111100111100101001110110000, input B: 01111101000110111100010001011001; output Z: 00111111010011011111100010000001
# REFMOD compute
# refmod: input A = -1.10837e-16, input B = -3.99393e+29, output OUT = 4.42673e+13
# refmod: input A = 10100100111111111001001001010100, input B = 11110000101000010101000001000011, output OUT = 01010110001000010000101100100111
# FPU_mult: WAIT
# -- input A: 00110111100111100101001110110000, input B: 01111101000110111100010001011001; output Z: 00111111010011011111100010000001
# FPU_mult: SEND
# -- input A: 00110111100111100101001110110000, input B: 01111101000110111100010001011001; output Z: 01010110001000010000101100100111
# 
# dadda_mult: input A = -1.10837e-16, input B = -3.99393e+29, output OUT = 4.42673e+13
# dadda_mult: input A = 10100100111111111001001001010100, input B = 11110000101000010101000001000011, output OUT = 01010110001000010000101100100111
# UVM_INFO @ 2035: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010010101011100111001010010101, input B: 11111011010010011000100001101101; output Z: 01010110001000010000101100100111
# REFMOD compute
# refmod: input A = 1.8874e-05, input B = 1.29406e+37, output OUT = 2.44242e+32
# refmod: input A = 00110111100111100101001110110000, input B = 01111101000110111100010001011001, output OUT = 01110101010000001010110000110101
# FPU_mult: WAIT
# -- input A: 00010010101011100111001010010101, input B: 11111011010010011000100001101101; output Z: 01010110001000010000101100100111
# FPU_mult: SEND
# -- input A: 00010010101011100111001010010101, input B: 11111011010010011000100001101101; output Z: 01110101010000001010110000110101
# 
# dadda_mult: input A = 1.8874e-05, input B = 1.29406e+37, output OUT = 2.44242e+32
# dadda_mult: input A = 00110111100111100101001110110000, input B = 01111101000110111100010001011001, output OUT = 01110101010000001010110000110101
# UVM_INFO @ 2065: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101011011010011010111001100101, input B: 10100110101100001001101011001100; output Z: 01110101010000001010110000110101
# REFMOD compute
# refmod: input A = 1.10092e-27, input B = -1.04642e+36, output OUT = -1.15202e+09
# refmod: input A = 00010010101011100111001010010101, input B = 11111011010010011000100001101101, output OUT = 11001110100010010101010011101110
# FPU_mult: WAIT
# -- input A: 01101011011010011010111001100101, input B: 10100110101100001001101011001100; output Z: 01110101010000001010110000110101
# FPU_mult: SEND
# -- input A: 01101011011010011010111001100101, input B: 10100110101100001001101011001100; output Z: 11001110100010010101010011101110
# 
# dadda_mult: input A = 1.10092e-27, input B = -1.04642e+36, output OUT = -1.15202e+09
# dadda_mult: input A = 00010010101011100111001010010101, input B = 11111011010010011000100001101101, output OUT = 11001110100010010101010011101110
# UVM_INFO @ 2095: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00010100101010111001101000001101, input B: 00101100101111110010100010000010; output Z: 11001110100010010101010011101110
# REFMOD compute
# refmod: input A = 2.82503e+26, input B = -1.22544e-15, output OUT = -3.46191e+11
# refmod: input A = 01101011011010011010111001100101, input B = 10100110101100001001101011001100, output OUT = 11010010101000010011010100110011
# FPU_mult: WAIT
# -- input A: 00010100101010111001101000001101, input B: 00101100101111110010100010000010; output Z: 11001110100010010101010011101110
# FPU_mult: SEND
# -- input A: 00010100101010111001101000001101, input B: 00101100101111110010100010000010; output Z: 11010010101000010011010100110011
# 
# dadda_mult: input A = 2.82503e+26, input B = -1.22544e-15, output OUT = -3.46191e+11
# dadda_mult: input A = 01101011011010011010111001100101, input B = 10100110101100001001101011001100, output OUT = 11010010101000010011010100110011
# UVM_INFO @ 2125: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100001010100000000100010010110, input B: 01000010011011000110111100100100; output Z: 11010010101000010011010100110011
# REFMOD compute
# refmod: input A = 1.73273e-26, input B = 5.43304e-12, output OUT = 9.41403e-38
# refmod: input A = 00010100101010111001101000001101, input B = 00101100101111110010100010000010, output OUT = 00000010000000000010001100010111
# FPU_mult: WAIT
# -- input A: 11100001010100000000100010010110, input B: 01000010011011000110111100100100; output Z: 11010010101000010011010100110011
# FPU_mult: SEND
# -- input A: 11100001010100000000100010010110, input B: 01000010011011000110111100100100; output Z: 00000010000000000010001100010111
# 
# dadda_mult: input A = 1.73273e-26, input B = 5.43304e-12, output OUT = 9.41403e-38
# dadda_mult: input A = 00010100101010111001101000001101, input B = 00101100101111110010100010000010, output OUT = 00000010000000000010001100010111
# UVM_INFO @ 2155: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01110110100111110011001110101001, input B: 01010010111010101010000100111100; output Z: 00000010000000000010001100010111
# REFMOD compute
# refmod: input A = -2.39846e+20, input B = 59.1085, output OUT = -1.4177e+22
# refmod: input A = 11100001010100000000100010010110, input B = 01000010011011000110111100100100, output OUT = 11100100010000000010001000111011
# FPU_mult: WAIT
# -- input A: 01110110100111110011001110101001, input B: 01010010111010101010000100111100; output Z: 00000010000000000010001100010111
# FPU_mult: SEND
# -- input A: 01110110100111110011001110101001, input B: 01010010111010101010000100111100; output Z: 11100100010000000010001000111011
# 
# dadda_mult: input A = -2.39846e+20, input B = 59.1085, output OUT = -1.4177e+22
# dadda_mult: input A = 11100001010100000000100010010110, input B = 01000010011011000110111100100100, output OUT = 11100100010000000010001000111011
# UVM_INFO @ 2185: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11001001001100011000111110101110, input B: 11110001001101111010110110111001; output Z: 11100100010000000010001000111011
# REFMOD compute
# refmod: input A = 1.6145e+33, input B = 5.03864e+11, output OUT = inf
# refmod: input A = 01110110100111110011001110101001, input B = 01010010111010101010000100111100, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 11001001001100011000111110101110, input B: 11110001001101111010110110111001; output Z: 11100100010000000010001000111011
# FPU_mult: SEND
# -- input A: 11001001001100011000111110101110, input B: 11110001001101111010110110111001; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 1.6145e+33, input B = 5.03864e+11, output OUT = inf
# dadda_mult: input A = 01110110100111110011001110101001, input B = 01010010111010101010000100111100, output OUT = 01111111100000000000000000000000
# UVM_INFO @ 2215: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000010000101100001110000010010, input B: 01000011111100101110000011100100; output Z: 01111111100000000000000000000000
# REFMOD compute
# refmod: input A = -727291, input B = -9.09532e+29, output OUT = 6.61495e+35
# refmod: input A = 11001001001100011000111110101110, input B = 11110001001101111010110110111001, output OUT = 01111010111111101100110001101000
# FPU_mult: WAIT
# -- input A: 10000010000101100001110000010010, input B: 01000011111100101110000011100100; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 10000010000101100001110000010010, input B: 01000011111100101110000011100100; output Z: 01111010111111101100110001101000
# 
# dadda_mult: input A = -727291, input B = -9.09532e+29, output OUT = 6.61495e+35
# dadda_mult: input A = 11001001001100011000111110101110, input B = 11110001001101111010110110111001, output OUT = 01111010111111101100110001101000
# UVM_INFO @ 2245: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110101110011111110001111000100, input B: 10110101110111000110011110010101; output Z: 01111010111111101100110001101000
# REFMOD compute
# refmod: input A = -1.10283e-37, input B = 485.757, output OUT = -5.35708e-35
# refmod: input A = 10000010000101100001110000010010, input B = 01000011111100101110000011100100, output OUT = 10000110100011100110101001100111
# FPU_mult: WAIT
# -- input A: 00110101110011111110001111000100, input B: 10110101110111000110011110010101; output Z: 01111010111111101100110001101000
# FPU_mult: SEND
# -- input A: 00110101110011111110001111000100, input B: 10110101110111000110011110010101; output Z: 10000110100011100110101001100111
# 
# dadda_mult: input A = -1.10283e-37, input B = 485.757, output OUT = -5.35708e-35
# dadda_mult: input A = 10000010000101100001110000010010, input B = 01000011111100101110000011100100, output OUT = 10000110100011100110101001100111
# UVM_INFO @ 2275: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01100011011010001001101111111000, input B: 11001001110010101011110101011100; output Z: 10000110100011100110101001100111
# REFMOD compute
# refmod: input A = 1.5489e-06, input B = -1.64214e-06, output OUT = -2.54351e-12
# refmod: input A = 00110101110011111110001111000100, input B = 10110101110111000110011110010101, output OUT = 10101100001100101111101111011010
# FPU_mult: WAIT
# -- input A: 01100011011010001001101111111000, input B: 11001001110010101011110101011100; output Z: 10000110100011100110101001100111
# FPU_mult: SEND
# -- input A: 01100011011010001001101111111000, input B: 11001001110010101011110101011100; output Z: 10101100001100101111101111011010
# 
# dadda_mult: input A = 1.5489e-06, input B = -1.64214e-06, output OUT = -2.54351e-12
# dadda_mult: input A = 00110101110011111110001111000100, input B = 10110101110111000110011110010101, output OUT = 10101100001100101111101111011010
# UVM_INFO @ 2305: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111000111101111010000110111010, input B: 00011100100101110100001100101000; output Z: 10101100001100101111101111011010
# REFMOD compute
# refmod: input A = 4.29088e+21, input B = -1.66084e+06, output OUT = -7.12649e+27
# refmod: input A = 01100011011010001001101111111000, input B = 11001001110010101011110101011100, output OUT = 11101101101110000011011100100000
# FPU_mult: WAIT
# -- input A: 00111000111101111010000110111010, input B: 00011100100101110100001100101000; output Z: 10101100001100101111101111011010
# FPU_mult: SEND
# -- input A: 00111000111101111010000110111010, input B: 00011100100101110100001100101000; output Z: 11101101101110000011011100100000
# 
# dadda_mult: input A = 4.29088e+21, input B = -1.66084e+06, output OUT = -7.12649e+27
# dadda_mult: input A = 01100011011010001001101111111000, input B = 11001001110010101011110101011100, output OUT = 11101101101110000011011100100000
# UVM_INFO @ 2335: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101011010111100001001001110110, input B: 10010101001001000000100010110101; output Z: 11101101101110000011011100100000
# REFMOD compute
# refmod: input A = 0.00011808, input B = 1.00097e-21, output OUT = 1.18195e-25
# refmod: input A = 00111000111101111010000110111010, input B = 00011100100101110100001100101000, output OUT = 00010110000100100101000101011011
# FPU_mult: WAIT
# -- input A: 00101011010111100001001001110110, input B: 10010101001001000000100010110101; output Z: 11101101101110000011011100100000
# FPU_mult: SEND
# -- input A: 00101011010111100001001001110110, input B: 10010101001001000000100010110101; output Z: 00010110000100100101000101011011
# 
# dadda_mult: input A = 0.00011808, input B = 1.00097e-21, output OUT = 1.18195e-25
# dadda_mult: input A = 00111000111101111010000110111010, input B = 00011100100101110100001100101000, output OUT = 00010110000100100101000101011011
# UVM_INFO @ 2365: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110011000010101110101100111110, input B: 00010010010000101111000100010000; output Z: 00010110000100100101000101011011
# REFMOD compute
# refmod: input A = 7.88959e-13, input B = -3.31264e-26, output OUT = -2.61354e-38
# refmod: input A = 00101011010111100001001001110110, input B = 10010101001001000000100010110101, output OUT = 10000001000011100100101101100001
# FPU_mult: WAIT
# -- input A: 11110011000010101110101100111110, input B: 00010010010000101111000100010000; output Z: 00010110000100100101000101011011
# FPU_mult: SEND
# -- input A: 11110011000010101110101100111110, input B: 00010010010000101111000100010000; output Z: 10000001000011100100101101100001
# 
# dadda_mult: input A = 7.88959e-13, input B = -3.31264e-26, output OUT = -2.61354e-38
# dadda_mult: input A = 00101011010111100001001001110110, input B = 10010101001001000000100010110101, output OUT = 10000001000011100100101101100001
# UVM_INFO @ 2395: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01111010101101011110011011010010, input B: 00100001010111011001101111000110; output Z: 10000001000011100100101101100001
# REFMOD compute
# refmod: input A = -1.10063e+31, input B = 6.15127e-28, output OUT = -6770.27
# refmod: input A = 11110011000010101110101100111110, input B = 00010010010000101111000100010000, output OUT = 11000101110100111001001000101010
# FPU_mult: WAIT
# -- input A: 01111010101101011110011011010010, input B: 00100001010111011001101111000110; output Z: 10000001000011100100101101100001
# FPU_mult: SEND
# -- input A: 01111010101101011110011011010010, input B: 00100001010111011001101111000110; output Z: 11000101110100111001001000101010
# 
# dadda_mult: input A = -1.10063e+31, input B = 6.15127e-28, output OUT = -6770.27
# dadda_mult: input A = 11110011000010101110101100111110, input B = 00010010010000101111000100010000, output OUT = 11000101110100111001001000101010
# UVM_INFO @ 2425: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101101110101011100000001010111, input B: 01100001111100100100000101101100; output Z: 11000101110100111001001000101010
# REFMOD compute
# refmod: input A = 4.72244e+35, input B = 7.50839e-19, output OUT = 3.54579e+17
# refmod: input A = 01111010101101011110011011010010, input B = 00100001010111011001101111000110, output OUT = 01011100100111010111011011110011
# FPU_mult: WAIT
# -- input A: 01101101110101011100000001010111, input B: 01100001111100100100000101101100; output Z: 11000101110100111001001000101010
# FPU_mult: SEND
# -- input A: 01101101110101011100000001010111, input B: 01100001111100100100000101101100; output Z: 01011100100111010111011011110011
# 
# dadda_mult: input A = 4.72244e+35, input B = 7.50839e-19, output OUT = 3.54579e+17
# dadda_mult: input A = 01111010101101011110011011010010, input B = 00100001010111011001101111000110, output OUT = 01011100100111010111011011110011
# UVM_INFO @ 2455: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00101100011011111001111000000010, input B: 00110100100101000111000100011111; output Z: 01011100100111010111011011110011
# REFMOD compute
# refmod: input A = 8.2691e+27, input B = 5.58603e+20, output OUT = inf
# refmod: input A = 01101101110101011100000001010111, input B = 01100001111100100100000101101100, output OUT = 01111111100000000000000000000000
# FPU_mult: WAIT
# -- input A: 00101100011011111001111000000010, input B: 00110100100101000111000100011111; output Z: 01011100100111010111011011110011
# FPU_mult: SEND
# -- input A: 00101100011011111001111000000010, input B: 00110100100101000111000100011111; output Z: 01111111100000000000000000000000
# 
# dadda_mult: input A = 8.2691e+27, input B = 5.58603e+20, output OUT = inf
# dadda_mult: input A = 01101101110101011100000001010111, input B = 01100001111100100100000101101100, output OUT = 01111111100000000000000000000000
# UVM_INFO @ 2485: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00100101010010100101101001011100, input B: 01010011101010101000110011010000; output Z: 01111111100000000000000000000000
# REFMOD compute
# refmod: input A = 3.40517e-12, input B = 2.76495e-07, output OUT = 9.4151e-19
# refmod: input A = 00101100011011111001111000000010, input B = 00110100100101000111000100011111, output OUT = 00100001100010101111000100111011
# FPU_mult: WAIT
# -- input A: 00100101010010100101101001011100, input B: 01010011101010101000110011010000; output Z: 01111111100000000000000000000000
# FPU_mult: SEND
# -- input A: 00100101010010100101101001011100, input B: 01010011101010101000110011010000; output Z: 00100001100010101111000100111011
# 
# dadda_mult: input A = 3.40517e-12, input B = 2.76495e-07, output OUT = 9.4151e-19
# dadda_mult: input A = 00101100011011111001111000000010, input B = 00110100100101000111000100011111, output OUT = 00100001100010101111000100111011
# UVM_INFO @ 2515: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01011000001111111001101110111100, input B: 10011011100001000001001101100110; output Z: 00100001100010101111000100111011
# REFMOD compute
# refmod: input A = 1.75513e-16, input B = 1.46501e+12, output OUT = 0.000257129
# refmod: input A = 00100101010010100101101001011100, input B = 01010011101010101000110011010000, output OUT = 00111001100001101100111101001111
# FPU_mult: WAIT
# -- input A: 01011000001111111001101110111100, input B: 10011011100001000001001101100110; output Z: 00100001100010101111000100111011
# FPU_mult: SEND
# -- input A: 01011000001111111001101110111100, input B: 10011011100001000001001101100110; output Z: 00111001100001101100111101001111
# 
# dadda_mult: input A = 1.75513e-16, input B = 1.46501e+12, output OUT = 0.000257129
# dadda_mult: input A = 00100101010010100101101001011100, input B = 01010011101010101000110011010000, output OUT = 00111001100001101100111101001111
# UVM_INFO @ 2545: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101101110000001101010011010101, input B: 11100000110111100010000101010011; output Z: 00111001100001101100111101001111
# REFMOD compute
# refmod: input A = 8.42702e+14, input B = -2.18501e-22, output OUT = -1.84131e-07
# refmod: input A = 01011000001111111001101110111100, input B = 10011011100001000001001101100110, output OUT = 10110100010001011011010110100100
# FPU_mult: WAIT
# -- input A: 10101101110000001101010011010101, input B: 11100000110111100010000101010011; output Z: 00111001100001101100111101001111
# FPU_mult: SEND
# -- input A: 10101101110000001101010011010101, input B: 11100000110111100010000101010011; output Z: 10110100010001011011010110100100
# 
# dadda_mult: input A = 8.42702e+14, input B = -2.18501e-22, output OUT = -1.84131e-07
# dadda_mult: input A = 01011000001111111001101110111100, input B = 10011011100001000001001101100110, output OUT = 10110100010001011011010110100100
# UVM_INFO @ 2575: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00111001011011100001001100001111, input B: 01100100100100100011000100001010; output Z: 10110100010001011011010110100100
# REFMOD compute
# refmod: input A = -2.19224e-11, input B = -1.28049e+20, output OUT = 2.80715e+09
# refmod: input A = 10101101110000001101010011010101, input B = 11100000110111100010000101010011, output OUT = 01001111001001110101000110101011
# FPU_mult: WAIT
# -- input A: 00111001011011100001001100001111, input B: 01100100100100100011000100001010; output Z: 10110100010001011011010110100100
# FPU_mult: SEND
# -- input A: 00111001011011100001001100001111, input B: 01100100100100100011000100001010; output Z: 01001111001001110101000110101011
# 
# dadda_mult: input A = -2.19224e-11, input B = -1.28049e+20, output OUT = 2.80715e+09
# dadda_mult: input A = 10101101110000001101010011010101, input B = 11100000110111100010000101010011, output OUT = 01001111001001110101000110101011
# UVM_INFO @ 2605: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11110010101111011100000111110001, input B: 00111011000100000000000000010100; output Z: 01001111001001110101000110101011
# REFMOD compute
# refmod: input A = 0.000227045, input B = 2.15741e+22, output OUT = 4.89829e+18
# refmod: input A = 00111001011011100001001100001111, input B = 01100100100100100011000100001010, output OUT = 01011110100001111111010001111010
# FPU_mult: WAIT
# -- input A: 11110010101111011100000111110001, input B: 00111011000100000000000000010100; output Z: 01001111001001110101000110101011
# FPU_mult: SEND
# -- input A: 11110010101111011100000111110001, input B: 00111011000100000000000000010100; output Z: 01011110100001111111010001111010
# 
# dadda_mult: input A = 0.000227045, input B = 2.15741e+22, output OUT = 4.89829e+18
# dadda_mult: input A = 00111001011011100001001100001111, input B = 01100100100100100011000100001010, output OUT = 01011110100001111111010001111010
# UVM_INFO @ 2635: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000111000100111111111000101011, input B: 11100010011101100000100110111001; output Z: 01011110100001111111010001111010
# REFMOD compute
# refmod: input A = -7.51707e+30, input B = 0.00219727, output OUT = -1.6517e+28
# refmod: input A = 11110010101111011100000111110001, input B = 00111011000100000000000000010100, output OUT = 11101110010101010111101001001101
# FPU_mult: WAIT
# -- input A: 10000111000100111111111000101011, input B: 11100010011101100000100110111001; output Z: 01011110100001111111010001111010
# FPU_mult: SEND
# -- input A: 10000111000100111111111000101011, input B: 11100010011101100000100110111001; output Z: 11101110010101010111101001001101
# 
# dadda_mult: input A = -7.51707e+30, input B = 0.00219727, output OUT = -1.6517e+28
# dadda_mult: input A = 11110010101111011100000111110001, input B = 00111011000100000000000000010100, output OUT = 11101110010101010111101001001101
# UVM_INFO @ 2665: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10001010010011010111101000011010, input B: 01011111000101111100010111101111; output Z: 11101110010101010111101001001101
# REFMOD compute
# refmod: input A = -1.11337e-34, input B = -1.13465e+21, output OUT = 1.26329e-13
# refmod: input A = 10000111000100111111111000101011, input B = 11100010011101100000100110111001, output OUT = 00101010000011100011101111011100
# FPU_mult: WAIT
# -- input A: 10001010010011010111101000011010, input B: 01011111000101111100010111101111; output Z: 11101110010101010111101001001101
# FPU_mult: SEND
# -- input A: 10001010010011010111101000011010, input B: 01011111000101111100010111101111; output Z: 00101010000011100011101111011100
# 
# dadda_mult: input A = -1.11337e-34, input B = -1.13465e+21, output OUT = 1.26329e-13
# dadda_mult: input A = 10000111000100111111111000101011, input B = 11100010011101100000100110111001, output OUT = 00101010000011100011101111011100
# UVM_INFO @ 2695: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11100110000010001111111011111011, input B: 00100001101110000100101000110101; output Z: 00101010000011100011101111011100
# REFMOD compute
# refmod: input A = -9.89336e-33, input B = 1.09364e+19, output OUT = -1.08198e-13
# refmod: input A = 10001010010011010111101000011010, input B = 01011111000101111100010111101111, output OUT = 10101001111100111010001111001000
# FPU_mult: WAIT
# -- input A: 11100110000010001111111011111011, input B: 00100001101110000100101000110101; output Z: 00101010000011100011101111011100
# FPU_mult: SEND
# -- input A: 11100110000010001111111011111011, input B: 00100001101110000100101000110101; output Z: 10101001111100111010001111001000
# 
# dadda_mult: input A = -9.89336e-33, input B = 1.09364e+19, output OUT = -1.08198e-13
# dadda_mult: input A = 10001010010011010111101000011010, input B = 01011111000101111100010111101111, output OUT = 10101001111100111010001111001000
# UVM_INFO @ 2725: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101110000010110101111101001100, input B: 00110111010101011101011000000100; output Z: 10101001111100111010001111001000
# REFMOD compute
# refmod: input A = -1.61736e+23, input B = 1.2488e-18, output OUT = -201976
# refmod: input A = 11100110000010001111111011111011, input B = 00100001101110000100101000110101, output OUT = 11001000010001010011110111110101
# FPU_mult: WAIT
# -- input A: 01101110000010110101111101001100, input B: 00110111010101011101011000000100; output Z: 10101001111100111010001111001000
# FPU_mult: SEND
# -- input A: 01101110000010110101111101001100, input B: 00110111010101011101011000000100; output Z: 11001000010001010011110111110101
# 
# dadda_mult: input A = -1.61736e+23, input B = 1.2488e-18, output OUT = -201976
# dadda_mult: input A = 11100110000010001111111011111011, input B = 00100001101110000100101000110101, output OUT = 11001000010001010011110111110101
# UVM_INFO @ 2755: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01101100011101110110011100101000, input B: 10000001101110010011000100010101; output Z: 11001000010001010011110111110101
# REFMOD compute
# refmod: input A = 1.07834e+28, input B = 1.27456e-05, output OUT = 1.37441e+23
# refmod: input A = 01101110000010110101111101001100, input B = 00110111010101011101011000000100, output OUT = 01100101111010001101010110011100
# FPU_mult: WAIT
# -- input A: 01101100011101110110011100101000, input B: 10000001101110010011000100010101; output Z: 11001000010001010011110111110101
# FPU_mult: SEND
# -- input A: 01101100011101110110011100101000, input B: 10000001101110010011000100010101; output Z: 01100101111010001101010110011100
# 
# dadda_mult: input A = 1.07834e+28, input B = 1.27456e-05, output OUT = 1.37441e+23
# dadda_mult: input A = 01101110000010110101111101001100, input B = 00110111010101011101011000000100, output OUT = 01100101111010001101010110011100
# UVM_INFO @ 2785: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 11010100011110101110110010111000, input B: 00011100111111111110000101101000; output Z: 01100101111010001101010110011100
# REFMOD compute
# refmod: input A = 1.19637e+27, input B = -6.80287e-38, output OUT = -8.13873e-11
# refmod: input A = 01101100011101110110011100101000, input B = 10000001101110010011000100010101, output OUT = 10101110101100101111100011111011
# FPU_mult: WAIT
# -- input A: 11010100011110101110110010111000, input B: 00011100111111111110000101101000; output Z: 01100101111010001101010110011100
# FPU_mult: SEND
# -- input A: 11010100011110101110110010111000, input B: 00011100111111111110000101101000; output Z: 10101110101100101111100011111011
# 
# dadda_mult: input A = 1.19637e+27, input B = -6.80287e-38, output OUT = -8.13873e-11
# dadda_mult: input A = 01101100011101110110011100101000, input B = 10000001101110010011000100010101, output OUT = 10101110101100101111100011111011
# UVM_INFO @ 2815: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00110001110101100011011101010010, input B: 00100110100010111110000111111011; output Z: 10101110101100101111100011111011
# REFMOD compute
# refmod: input A = -4.31085e+12, input B = 1.69328e-21, output OUT = -7.29946e-09
# refmod: input A = 11010100011110101110110010111000, input B = 00011100111111111110000101101000, output OUT = 10110001111110101100111010111011
# FPU_mult: WAIT
# -- input A: 00110001110101100011011101010010, input B: 00100110100010111110000111111011; output Z: 10101110101100101111100011111011
# FPU_mult: SEND
# -- input A: 00110001110101100011011101010010, input B: 00100110100010111110000111111011; output Z: 10110001111110101100111010111011
# 
# dadda_mult: input A = -4.31085e+12, input B = 1.69328e-21, output OUT = -7.29946e-09
# dadda_mult: input A = 11010100011110101110110010111000, input B = 00011100111111111110000101101000, output OUT = 10110001111110101100111010111011
# UVM_INFO @ 2845: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10111110001010000101111110000011, input B: 11001111101011111010100001010010; output Z: 10110001111110101100111010111011
# REFMOD compute
# refmod: input A = 6.23451e-09, input B = 9.70631e-16, output OUT = 6.05141e-24
# refmod: input A = 00110001110101100011011101010010, input B = 00100110100010111110000111111011, output OUT = 00011000111010100001101001000100
# FPU_mult: WAIT
# -- input A: 10111110001010000101111110000011, input B: 11001111101011111010100001010010; output Z: 10110001111110101100111010111011
# FPU_mult: SEND
# -- input A: 10111110001010000101111110000011, input B: 11001111101011111010100001010010; output Z: 00011000111010100001101001000100
# 
# dadda_mult: input A = 6.23451e-09, input B = 9.70631e-16, output OUT = 6.05141e-24
# dadda_mult: input A = 00110001110101100011011101010010, input B = 00100110100010111110000111111011, output OUT = 00011000111010100001101001000100
# UVM_INFO @ 2875: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 00011100110101101010010010000101, input B: 11100011010011010010100011001110; output Z: 00011000111010100001101001000100
# REFMOD compute
# refmod: input A = -0.164427, input B = -5.89409e+09, output OUT = 9.69146e+08
# refmod: input A = 10111110001010000101111110000011, input B = 11001111101011111010100001010010, output OUT = 01001110011001110000111111111110
# FPU_mult: WAIT
# -- input A: 00011100110101101010010010000101, input B: 11100011010011010010100011001110; output Z: 00011000111010100001101001000100
# FPU_mult: SEND
# -- input A: 00011100110101101010010010000101, input B: 11100011010011010010100011001110; output Z: 01001110011001110000111111111110
# 
# dadda_mult: input A = -0.164427, input B = -5.89409e+09, output OUT = 9.69146e+08
# dadda_mult: input A = 10111110001010000101111110000011, input B = 11001111101011111010100001010010, output OUT = 01001110011001110000111111111110
# UVM_INFO @ 2905: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10101010001111101111001000001111, input B: 11010111111010011100000000001000; output Z: 01001110011001110000111111111110
# REFMOD compute
# refmod: input A = 1.42039e-21, input B = -3.78452e+21, output OUT = -5.37548
# refmod: input A = 00011100110101101010010010000101, input B = 11100011010011010010100011001110, output OUT = 11000000101011000000001111110101
# FPU_mult: WAIT
# -- input A: 10101010001111101111001000001111, input B: 11010111111010011100000000001000; output Z: 01001110011001110000111111111110
# FPU_mult: SEND
# -- input A: 10101010001111101111001000001111, input B: 11010111111010011100000000001000; output Z: 11000000101011000000001111110101
# 
# dadda_mult: input A = 1.42039e-21, input B = -3.78452e+21, output OUT = -5.37548
# dadda_mult: input A = 00011100110101101010010010000101, input B = 11100011010011010010100011001110, output OUT = 11000000101011000000001111110101
# UVM_INFO @ 2935: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01000101100111011111000010111110, input B: 11011111111010010011010001000111; output Z: 11000000101011000000001111110101
# REFMOD compute
# refmod: input A = -1.69594e-13, input B = -5.14022e+14, output OUT = 87.1749
# refmod: input A = 10101010001111101111001000001111, input B = 11010111111010011100000000001000, output OUT = 01000010101011100101100110001011
# FPU_mult: WAIT
# -- input A: 01000101100111011111000010111110, input B: 11011111111010010011010001000111; output Z: 11000000101011000000001111110101
# FPU_mult: SEND
# -- input A: 01000101100111011111000010111110, input B: 11011111111010010011010001000111; output Z: 01000010101011100101100110001011
# 
# dadda_mult: input A = -1.69594e-13, input B = -5.14022e+14, output OUT = 87.1749
# dadda_mult: input A = 10101010001111101111001000001111, input B = 11010111111010011100000000001000, output OUT = 01000010101011100101100110001011
# UVM_INFO @ 2965: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001011011100101100010110010110, input B: 01001010110000000001011001101011; output Z: 01000010101011100101100110001011
# REFMOD compute
# refmod: input A = 5054.09, input B = -3.36083e+19, output OUT = -1.69859e+23
# refmod: input A = 01000101100111011111000010111110, input B = 11011111111010010011010001000111, output OUT = 11100110000011111110000001011110
# FPU_mult: WAIT
# -- input A: 01001011011100101100010110010110, input B: 01001010110000000001011001101011; output Z: 01000010101011100101100110001011
# FPU_mult: SEND
# -- input A: 01001011011100101100010110010110, input B: 01001010110000000001011001101011; output Z: 11100110000011111110000001011110
# 
# dadda_mult: input A = 5054.09, input B = -3.36083e+19, output OUT = -1.69859e+23
# dadda_mult: input A = 01000101100111011111000010111110, input B = 11011111111010010011010001000111, output OUT = 11100110000011111110000001011110
# UVM_INFO @ 2995: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 10000110111000001110100001111001, input B: 00000111110100011011010111111100; output Z: 11100110000011111110000001011110
# REFMOD compute
# refmod: input A = 1.59103e+07, input B = 6.29433e+06, output OUT = 1.00145e+14
# refmod: input A = 01001011011100101100010110010110, input B = 01001010110000000001011001101011, output OUT = 01010110101101100010100101110011
# FPU_mult: WAIT
# -- input A: 10000110111000001110100001111001, input B: 00000111110100011011010111111100; output Z: 11100110000011111110000001011110
# FPU_mult: SEND
# -- input A: 10000110111000001110100001111001, input B: 00000111110100011011010111111100; output Z: 01010110101101100010100101110011
# 
# dadda_mult: input A = 1.59103e+07, input B = 6.29433e+06, output OUT = 1.00145e+14
# dadda_mult: input A = 01001011011100101100010110010110, input B = 01001010110000000001011001101011, output OUT = 01010110101101100010100101110011
# UVM_INFO @ 3025: uvm_test_top.env_h.comp [Comparator Match] 
# FPU_mult: WAIT_PIPEFILL
# -- input A: 01001000010001100111001010101000, input B: 10111000000000010001100111101010; output Z: 01010110101101100010100101110011
# REFMOD compute
# refmod: input A = -8.4601e-35, input B = 3.15538e-34, output OUT = -0
# refmod: input A = 10000110111000001110100001111001, input B = 00000111110100011011010111111100, output OUT = 10000000000000000000000000000000
# FPU_mult: WAIT
# -- input A: 01001000010001100111001010101000, input B: 10111000000000010001100111101010; output Z: 01010110101101100010100101110011
# FPU_mult: SEND
# -- input A: 01001000010001100111001010101000, input B: 10111000000000010001100111101010; output Z: 10000000000000000000000000000000
# 
# dadda_mult: input A = -8.4601e-35, input B = 3.15538e-34, output OUT = -0
# dadda_mult: input A = 10000110111000001110100001111001, input B = 00000111110100011011010111111100, output OUT = 10000000000000000000000000000000
# UVM_INFO @ 3055: uvm_test_top.env_h.comp [Comparator Match] 
# UVM_INFO verilog_src/uvm-1.1d/src/base/uvm_objection.svh(1267) @ 3055: reporter [TEST_DONE] 'run' phase is ready to proceed to the 'extract' phase
# UVM_INFO ../tb/env.sv(42) @ 3055: uvm_test_top.env_h [env] Reporting matched 98
# UVM_ERROR ../tb/env.sv(44) @ 3055: uvm_test_top.env_h [env] Saw 3 mismatched samples
# 
# --- UVM Report Summary ---
# 
# ** Report counts by severity
# UVM_INFO :  109
# UVM_WARNING :    3
# UVM_ERROR :    1
# UVM_FATAL :    0
# ** Report counts by id
# [Comparator Match]    98
# [Comparator Mismatch]     3
# [MISCMP]     6
# [Questa UVM]     2
# [RNTST]     1
# [TEST_DONE]     1
# [env]     2
# ** Note: $finish    : /software/mentor/questa10.7c/questasim/linux_x86_64/../verilog_src/uvm-1.1d/src/base/uvm_root.svh(430)
#    Time: 3055 ns  Iteration: 61  Instance: /top
# Break in Task uvm_pkg/uvm_root::run_test at /software/mentor/questa10.7c/questasim/linux_x86_64/../verilog_src/uvm-1.1d/src/base/uvm_root.svh line 430
# End time: 14:38:15 on Apr 14,2021, Elapsed time: 0:01:03
# Errors: 0, Warnings: 19
